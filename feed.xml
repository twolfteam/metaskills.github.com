<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>MetaSkills.net</title>
 <link href="http://metaskills.net/feed.xml" rel="self"/>
 <link href="http://metaskills.net/"/>
 <updated>2011-05-22T11:46:11-04:00</updated>
 <id>http://metaskills.net/</id>
 <author>
   <name>Ken Collins</name>
   <email>ken@metaskills.net</email>
 </author>

 
 <entry>
   <title>The Browser Is Dead?</title>
   <link href="http://metaskills.net/2011/05/21/the-browser-is-dead"/>
   <updated>2011-05-21T00:00:00-04:00</updated>
   <id>http://metaskills.net/2011/05/21/the-browser-is-dead</id>
   <content type="html">
     <![CDATA[<p>
  <span class="photofancy floatr mr10 mb30 ml30">
    <img class="" src="/assets/the_browser_is_dead.png" width="368" height="2969" alt="Converstation between DHH And Dave Thomas on Rails 3.1"/>
  </span>
  This <a href="https://twitter.com/#!/pragdave/status/62510978893492224">twitter post by Dave Thomas</a> sparked an interesting back and forth with DHH on how Rails 3.1 could be more opinionated towards web development for the browser. A short time before &ndash; it was announced that Rails would include CoffeeScript and Sass as defaults for JavaScript and CSS authoring. FWIW, both of these new defaults are in my opinion the best of the breed fore each task. If you have not done so, I suggest taking a quick read down this thread that I put together with screenshots from my Twitter.app.
</p>

<p>
  The topic is one I have thought often about over the past 6 years. I started writing Rails applications before 1.0 was released and I have seen the changes and felt each one. Having written both web and native iOS apps for <a href="http://homemarks.com">HomeMarks.com</a> and retooling the whole application for each major Rails version, I think it gives me a good insight into the pain here. For instance when <a href="http://ajaxian.com/archives/rails-rjs-for-ajax-101">RJS in Rails</a> first came out, HomeMarks took extreme advantage of it in very clever ways. Pushing rendered partials out and communicating to the browser's JavaScript environment was fun and rewarding at the time. It also felt really DRY at times.
</p>

<p>
  As I started to <a href="/2008/08/18/in-hell-oo-for-homemarks/">learn more advanced JavaScript techniques</a> for organizing my rich client code, I ended up rewriting HomeMarks again under the poorly named moniker <a href="/2008/05/24/the-ajax-head-design-pattern/">"The AJAX Head Design Pattern"</a>. It even caught a little bit of attention by the Ajaxian and <a href="http://voodootikigod.com/ajax-head-design-pattern">Chris Williams</a>. Essentially what I ended up building was my own minimal <a href="http://documentcloud.github.com/backbone/">backbone.js</a> in that I had a rich MVC layer all written in JavaScript. This usage of Rails as an API foundation on top of a rich JavaScript application was in my opinion a few years ahead of the average curve. Though it was very rewarding from a JavaScript as a language first, DOM second development perspective &amp; it yielded a very clean way to leverage the same RESTful controller actions used by JavaScript in the browser with a <a href="/2010/02/12/synchronizing-core-data-with-rails-3-0-0-pre/">native iOS app that integrated with Core Data</a>, it still felt like an over achievement or harder than it had to be.
</p>

<p>
  So as I embark on my third complete rewrite of HomeMarks, I have to think about my tools and techniques again and what the end goal may look like. I have thrown away thousands of lines of OO-JavaScript written in Prototype.js and <a href="https://gist.github.com/973483">started rewriting them in CoffeeScript</a>. Though there are still some tough decisions to be made on what my complete stack will look like and how HomeMarks v3 will hopefully again push the new web forward, I cant help bug agree with both Dave and DHH. I also share James A Rosen's opinion summed up in <a href="http://twitter.com/#!/jamesarosen/status/70544535373086720">this tweet</a>.
  <blockquote style="width:220px;">
    If I had known that RailsConf would be How-to-Use-Rails-as-a-Backend-for-Javascript-Conf, I would've gone!
  </blockquote>
</p>]]>
    </content>
 </entry>
 
 <entry>
   <title>Use Compass Sass Framework Files With The Rails 3.1 Asset Pipeline</title>
   <link href="http://metaskills.net/2011/05/18/use-compass-sass-framework-files-with-the-rails-3.1-asset-pipeline"/>
   <updated>2011-05-18T00:00:00-04:00</updated>
   <id>http://metaskills.net/2011/05/18/use-compass-sass-framework-files-with-the-rails-3.1-asset-pipeline</id>
   <content type="html">
     <![CDATA[<p>
  The Sprockets 2 gem along with the Tilt gem make it really easy to write JavaScript or CSS using any templating language you desire. The rails defaults are CoffeeScript and Sass. About the <a href="https://github.com/chriseppstein/compass/tree/stable/frameworks/compass/stylesheets">best collection of Sass framework files</a> for easy cross-browser CSS authoring are packaged in the compass framework. Compass even has <a href="http://compass-style.org/reference/compass/css3/">great documentation</a> for using their Sass framework. But what if you want to use those within the asset pipeline provided by Rails? Easy enough!
</p>

<p>
  First, bundle up the compass, but do not require it. Add this to your <code>Gemfile</code>.
</p>

<div class="highlight"><pre><code class="ruby"><span class="n">gem</span> <span class="s1">&#39;compass&#39;</span><span class="p">,</span> <span class="ss">:require</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</code></pre>
</div>

<p>
  Next, add a Sass initializer in <code>config/initializers/sass.rb</code> and fill it in with the code below. This will add two more load paths to the Sass engine. The first is your default rails/sprockets asset path for stylesheets. It simply let's you build a deep folder structure in that directory and use relative paths from each file. The second will put the entire compass Sass framework files into the Sass load path.
</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Sass</span><span class="o">::</span><span class="no">Engine</span><span class="o">::</span><span class="no">DEFAULT_OPTIONS</span><span class="o">[</span><span class="ss">:load_paths</span><span class="o">].</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">load_paths</span><span class="o">|</span>
  <span class="n">load_paths</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/app/assets/stylesheets&quot;</span>
  <span class="n">load_paths</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Gem</span><span class="o">.</span><span class="n">loaded_specs</span><span class="o">[</span><span class="s1">&#39;compass&#39;</span><span class="o">].</span><span class="n">full_gem_path</span><span class="si">}</span><span class="s2">/frameworks/compass/stylesheets&quot;</span>
<span class="k">end</span>
</code></pre>
</div>

<p>
  Now in your rails <code>app/assets/stylesheets/foo.scss</code> file you can use Sass' <code>@import</code> with paths to the compass framework.
</p>

<div class="highlight"><pre><code class="css"><span class="k">@import</span> <span class="s2">&quot;compass/css3/opacity&quot;</span><span class="p">;</span>
<span class="nf">#mylogo</span> <span class="p">{</span> <span class="o">@</span><span class="n">include</span> <span class="k">opacity</span><span class="p">(</span><span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">);</span> <span class="p">}</span>
</code></pre>
</div>

<p>
  That is an example loading up the opacity helpers. Your generated css file will look like this! CSS is never going to be the same again!
</p>

<div class="highlight"><pre><code class="css"><span class="nf">#mylogo</span> <span class="p">{</span>
  <span class="o">-</span><span class="n">ms</span><span class="o">-</span><span class="n">filter</span><span class="o">:</span> <span class="s2">&quot;progid:DXImageTransform.Microsoft.Alpha(Opacity=50)&quot;</span><span class="p">;</span>
  <span class="n">filter</span><span class="o">:</span> <span class="n">progid</span><span class="o">:</span><span class="n">DXImageTransform</span><span class="o">.</span><span class="n">Microsoft</span><span class="o">.</span><span class="n">Alpha</span><span class="p">(</span><span class="n">Opacity</span><span class="o">=</span><span class="m">50</span><span class="p">);</span>
  <span class="k">opacity</span><span class="o">:</span> <span class="m">0</span><span class="o">.</span><span class="m">5</span><span class="p">;</span> <span class="p">}</span>
</code></pre>
</div>




]]>
    </content>
 </entry>
 
 <entry>
   <title>Speaking At MADExpo</title>
   <link href="http://metaskills.net/2011/05/06/speaking_at_madexpo"/>
   <updated>2011-05-06T00:00:00-04:00</updated>
   <id>http://metaskills.net/2011/05/06/speaking_at_madexpo</id>
   <content type="html">
     <![CDATA[<p>
  Over the past few months I have been actively working with both <a href="http://twitter.com/#!/luislavena">Luis Lavena</a> and <a href="http://twitter.com/#!/wayneeseguin">Wayne E Seguin</a> to incorporate both <a href="https://github.com/rails-sqlserver/tiny_tds">TinyTDS</a> and the <a href="https://github.com/rails-sqlserver/activerecord-sqlserver-adapter">SQL Server Adapter</a> into the latest release of the <a href="http://railsinstaller.org/">Rails Installer for Windows</a>. Like them, I firmly believe that Ruby's success is tightly bound to how well we can bring these tools to the Windows platform. So despite that I have no love for the Windows â€“ I do want to see Ruby succeed and help spread the gospel. To this end, I have been working really hard at making both TinyTDS and the adapter a superb backend for ActiveRecord. In fact today, I just released a 3.1 beta that takes advantage of the new prepared statement support.
</p>

<p>
  <span class="photofancy floatr ml20">
    <img src="/assets/madexpo.png" alt="MADExpo: Mid Atlantic Developer Expo" width="240" height="80" />
  </span>
  To go one step further in helping Ruby, I have decided to speak at a local conference called the <a href="http://madexpo2011-collins.eventbrite.com/">Mid Atlantic Developer Expo</a> or just MADExpo. The <a href="http://madexpo.us/Sessions/84">details for my talk
</a> are below and if you find any of the <a href="http://madexpo.us/agenda">other talks</a> interesting, I highly advise you to grab a ticket and help me bring the message of Ruby right to the belly of the beast!
</p>


<h2>Free The Enterprise With Ruby &amp; Master Your Own Domain</h2>

<p>On the heals of Luis Lavena's RailsConf talk "<a href="http://en.oreilly.com/rails2011/public/schedule/detail/19499"><em>Infiltrating Ruby Onto The Enterprise Death Star Using Guerilla Tactics</em></a>" comes a local and frank talk about the current state of Open Source Software (OSS) participation from Windows developers. Learn what OSS is, what motivates its contributors, and how OSS can make you a stronger developer. Be prepared to fall in love with writing software again!</p>

<p>We will start off with a 101 introduction to both the Ruby programming language and the Ruby on Rails web application framework. You will learn about ActiveRecord, a powerful ORM that maps rich objects to your databases, and the latest components to use it with SQL Server. As a Rails core contributor and author of the SQL Server stack, I will give you a modern insight into both that will allow you to leverage your legacy data with Ruby.</p>

<p>Lastly, I will review the bleeding edge tools being actively created for Windows developers to ease the transition to Ruby, Rails and OSS from a POSIX driven world. Many things have changed. It is time to learn and perform some occupational maintenance.</p>



]]>
    </content>
 </entry>
 
 <entry>
   <title>Using MiniTest::Spec With Rails</title>
   <link href="http://metaskills.net/2011/03/26/using-minitest-spec-with-rails"/>
   <updated>2011-03-26T00:00:00-04:00</updated>
   <id>http://metaskills.net/2011/03/26/using-minitest-spec-with-rails</id>
   <content type="html">
     <![CDATA[<p>
  So after a few blog post on the subject of MiniTest::Spec, I finally have a simple testing stack for Rails 3 that leverages MiniTest's spec DSL. I introduce to you the <a href="http://github.com/metaskills/mini_specunit">MiniSpecUnit</a> gem. MiniSpecUnit defines a <code>Test::Unit::TestCase</code> class that subclasses MiniTest::Spec. It implements only what is needed to make rails happy. It is not a drop in replacement for the real Test::Unit::TestCase that is included with ruby 1.9.
</p>

<p>
  Once you bundle the gem in your Rails application, it will satisfy the <code>require "test/unit/testcase"</code> from ActiveSupport's test case. Tricking it to use MiniTest::Spec instead of MiniTest::Unit. Here is an example Gemfile that shows the usage of MiniSpecUnit as well as two other MiniTest gems that I have made. The first is <a href="/2011/03/22/mini-backtrace-for-minitest-and-rails/">MiniBacktrace</a> which allows you to leverage the <code>Rails.backtrace_cleaner</code> using MiniTest. The other is <a href="/2011/01/25/from-test-unit-shoulda-to-minitest-spec-minishoulda/">MiniShoulda</a> which builds a simple Shoulda syntax on top of MiniTest::Spec.
</p>

<div class="highlight"><pre><code class="ruby"><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;minitest&#39;</span>          <span class="c1"># At least v2.0.2 if using MiniShoulda.</span>
  <span class="n">gem</span> <span class="s1">&#39;mini_specunit&#39;</span>     <span class="c1"># The goods! Force MiniTest::Spec instead of MiniTest::Unit.</span>
  <span class="n">gem</span> <span class="s1">&#39;mini_backtrace&#39;</span>    <span class="c1"># Use Rails.backtrace_cleaner with MiniTest.</span>
  <span class="n">gem</span> <span class="s1">&#39;mini_shoulda&#39;</span>      <span class="c1"># A small Shoulda syntax on top of MiniTest::Spec.</span>
<span class="k">end</span>
</code></pre>
</div>

<p>
  Since MinitTest::Spec is built on top of MiniTest::Unit, there is not a lot that can go wrong. With MiniSpecUnit, we finally have a working solution by replacing MiniTest::Spec as the superclass for ActiveSupport::TestCase when using Rails. This solution is drop dead simple and does not require you to recreate a new test case in your <code>test_helper.rb</code> and change all your cases to subclass that new test case. About the only gotcha is a few missing assertions available in Test::Unit. If you encounter these, I encourage you to rewrite them to the modern MiniTest::Spec assertion style. I commonly use this <a href="http://cheat.errtheblog.com/s/minitest/1">cheat sheet</a> to remember them. For example:
</p>

<div class="highlight"><pre><code class="ruby"><span class="c1"># This:</span>
<span class="n">assert_not_nil</span> <span class="vi">@foo</span><span class="o">.</span><span class="n">bar</span>

<span class="c1"># Would Become This:</span>
<span class="vi">@foo</span><span class="o">.</span><span class="n">bar</span><span class="o">.</span><span class="n">wont_be_nil</span>
</code></pre>
</div>



<h2>Functional Tests With ActionController::TestCase</h2>

<p>
  One problem you may have with your functional tests is a nil <code>@controller</code> instance variable in <code>describe</code> or <code>context</code> blocks. Resulting in the "<em>RuntimeError: @controller is nil: make sure you set it in your test's setup method.</em>" message. This is easy to fix, all you have to do is be explicit about your controller that you are testing like so.
</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">UsersControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="n">tests</span> <span class="no">UsersController</span>
  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
<span class="k">end</span>
</code></pre>
</div>


<h2>Broken Describe Scopes</h2>

<p>
  In my article, <a href="/2011/01/25/from-test-unit-shoulda-to-minitest-spec-minishoulda/"><em>From Test::Unit & Shoulda To MiniTest::Spec & MiniShoulda</em></a>, I cover a patch to MiniTest that would fix "undefined local variable or method" errors when using describe/context scopes. I submitted a <a href="https://github.com/seattlerb/minitest/pull/9">patch and pull request</a> to Ryan Davis that I believe was applied. At the time of this article, there is no release version of MiniTest that includes <a href="http://github.com/metaskills/mini_shoulda/blob/master/lib/mini_shoulda/minitest_describe_patch.rb">this patch</a> that I have in MiniShoulda. So if you find yourself with errors in describe/context blocks, consider bundling the MiniSholda gem to fix it till a new version of MiniTest is released.
</p>


<h2>In Closing</h2>

<p>
  I have only tested the above stack in the latest Rails edge, 3.1.beta and ruby 1.9.2. I doubt there are issues on older versions of Rails with different Ruby versions. If you apply these gems to success, I would love to hear about it. Happy testing!
</p>

]]>
    </content>
 </entry>
 
 <entry>
   <title>MiniBacktrace - For MiniTest &amp; Rails</title>
   <link href="http://metaskills.net/2011/03/22/mini-backtrace-for-minitest-and-rails"/>
   <updated>2011-03-22T00:00:00-04:00</updated>
   <id>http://metaskills.net/2011/03/22/mini-backtrace-for-minitest-and-rails</id>
   <content type="html">
     <![CDATA[<aside class="flash_info">
  UPDATE:  
  <a href="/2011/03/26/using-minitest-spec-with-rails/">Using MiniTest::Spec With Rails</a> 
  &amp;
  <a href="/2011/03/26/using-minitest-spec-with-rails/">From Test::Unit &amp; Shoulda To MiniTest::Spec &amp; MiniShoulda</a>
</aside>

<p>
  <a href="https://github.com/metaskills/mini_backtrace">MiniBacktrace</a> allows you to take advantage of the Rails.backtrace_cleaner when using MiniTest. This includes everyone using Rails 3 with Ruby 1.9.
</p>

<p>
  Just add 'mini_backtrace' to your Gemfile's :test group and your should automatically see a huge difference. Any additions to the Rails.backtrace_cleaner should now work.
</p>

<div class="highlight"><pre><code class="ruby"><span class="no">Rails</span><span class="o">.</span><span class="n">backtrace_cleaner</span><span class="o">.</span><span class="n">add_silencer</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">line</span> <span class="o">=~</span> <span class="sr">/my_noisy_library/</span> <span class="p">}</span>
</code></pre>
</div>

]]>
    </content>
 </entry>
 
 <entry>
   <title>PDFKit Overview &amp; Advanced Usage</title>
   <link href="http://metaskills.net/2011/03/20/pdfkit-overview-and-advanced-usage"/>
   <updated>2011-03-20T00:00:00-04:00</updated>
   <id>http://metaskills.net/2011/03/20/pdfkit-overview-and-advanced-usage</id>
   <content type="html">
     <![CDATA[<p>
  Last week I had the pleasure of rewriting 4 years of legacy PDF::Writer code to <a href="http://github.com/jdpace/PDFKit">PDFKit</a>. Why? Well drawing pdfs in ruby using libraries like PDF::Writer is like composing a webpage with an Etch A Sketch. In short, its a damn chore that involves a bunch of code that mixes both data and presentation. Sure there are gems like <a href="http://prawn.majesticseacreature.com/">Prawn</a> that make this much easier, but nothing beats drawing your pdf code in native HTML and CSS, and that is where <a href="http://code.google.com/p/wkhtmltopdf/">wkhtmltopdf</a> comes in.
</p>

<p>
  Wkhtmltopdf is an open source project that uses the <a href="http://www.webkit.org/">WebKit</a> rendering engine to convert HTML to native PDF code. This is the muscle behind the PDFKit gem and other projects like <a href="https://github.com/mileszs/wicked_pdf">WickedPdf</a>. In this article I am only going to focus on PDFKit with Rails. But many topics will apply to both PDFKit and WickedPdf since they use wkhtmltopdf on the backside.
</p>


<h2>Installation</h2>

<p>
  Installing the PDFKit gem is a no brainer. The hard part is getting the wkhtmltopdf binaries for you platform installed. Thankfully the google project page hosts a batch of static binaries that work on just about every platform. So <a href="http://code.google.com/p/wkhtmltopdf/downloads/list">go to their download page</a> and pick the statically compiled binary that meets your needs. I highly suggest that you get the latest 0.10.0rc2 since some topics below take advantage of recent bug fixes. I have tested both the OSX and i386 on RHEL with success and the release candidate seems very production ready. I suggest placing wkhtmltopdf in <code>/usr/local/bin/wkhtmltopdf</code>.
</p>

<pre class="command">
$ which wkhtmltopdf
/usr/local/bin/wkhtmltopdf
</pre>

<h2>The Basic Requirements</h2>

<p>
  I knew that HTML to PDF generation has its drawbacks, specifically with common headers/footers and page breaks. I happily found out that wkhtmltopdf has a solution for all these problems and can layout PDF pages with pixel perfect precision. So let's skip over the <a href="https://github.com/jdpace/PDFKit/wiki">basics</a> and get right down to using PDFKit like a pro. We are going to build out the Rails HTML/CSS layouts and templates that will solve a series of common problems.
</p>

<p>
  The major reason to use PDFKit and wkhtmltopdf is that we can use the same templating system in Rails that we use to generate other views. This means that we test our PDF view code just like any other Rails code using its built-in functional or integration test cases. Let me say that again, we can TEST our PDF code! A huge win if you have complex conditional view code. So let's get to it.
</p>


<h2>The Main PDF Layout</h2>

<p>
  Sometimes it is useful to start at the end. So the first thing we need is a new layout for all of our pdf templates to use. Here is a <a href="http://haml-lang.com/">HAML</a> file that I recommend you name <code>app/views/layouts/pdf.html.pdf.haml</code>. Did you see that name? <strong>This is important!</strong> because Rails allows us to specify template names that can service more than one mime type format. So in this case, the layout will be found when rendering both HTML and .pdf formats. 
</p>

<div class="highlight"><pre><code class="ruby"><span class="o">!!!</span> <span class="mi">5</span>
<span class="o">%</span><span class="n">html</span><span class="p">{</span><span class="ss">:lang</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">}</span>
  <span class="o">%</span><span class="n">head</span>
    <span class="o">%</span><span class="n">meta</span><span class="p">{</span><span class="ss">:charset</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">}</span>
    <span class="o">%</span><span class="n">meta</span><span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdfkit-footer_html&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">pdf_footer_url</span><span class="p">}</span>
    <span class="o">=</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">protocol</span><span class="si">}#{</span><span class="n">request</span><span class="o">.</span><span class="n">host_with_port</span><span class="si">}</span><span class="s2">/stylesheets/pdf.css&quot;</span>
  <span class="o">%</span><span class="n">body</span>
    <span class="o">=</span> <span class="k">yield</span><span class="p">(</span><span class="ss">:layout</span><span class="p">)</span>
</code></pre>
</div>

<p>
  <strong>I recommend that all PDF layouts, templates, and partials use the dual mime type naming convention.</strong> This will allow you to test your rendered HTML to PDF view code using common DOM techniques. Like <code>assert_select</code> in rails or maybe <a href="https://github.com/jnicklas/capybara">capybara's</a> <code>has_selector?</code>. So given that you may have a print action for your orders controller, you would use <code>print_orders_path(@order)</code> for your functional tests with DOM assertions and <code>print_orders_path(@order,:format=>:pdf)</code> for real world usage and/or integration tests. Both formats will render the same partials, templates and layouts if you use that naming structure.
</p>

<p>
  So that layout file is a real basic HTML5 doctype (which WebKit handles just fine) plus a few special elements. I'll cover that <code>pdfkit-footer_html</code> meta tag later on. For now, let's focus on that <code>pdf.css</code> stylesheet.
</p>


<h2>Your PDF CSS</h2>

<p>
  You might be tempted to utilize your existing site's stylesheets for a base and then use media/print techniques to override and customize your printed versions. I am of the opinion that your PDF stylesheets should be very basic and easy to layout. To this end, I highly suggest that you start with an HTML reset CSS. In the example below, I have used <a href="http://yui.yahooapis.com/3.2.0/build/cssreset/reset-min.css">Yahoo's CSS reset</a>. This makes it so that every bit of layout is under your strict control with a common rendering of no margin or padding to throw you off.
</p>

<div class="highlight"><pre><code class="css"><span class="c">/* Reset CSS. http://yui.yahooapis.com/3.2.0/build/cssreset/reset-min.css  */</span>
<span class="nt">html</span><span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="m">#000</span><span class="p">;</span><span class="k">background</span><span class="o">:</span><span class="m">#FFF</span><span class="p">;}</span><span class="nt">body</span><span class="o">,</span><span class="nt">div</span><span class="o">,</span><span class="nt">dl</span><span class="o">,</span><span class="nt">dt</span><span class="o">,</span><span class="nt">dd</span><span class="o">,</span><span class="nt">ul</span><span class="o">,</span><span class="nt">ol</span><span class="o">,</span><span class="nt">li</span><span class="o">,</span><span class="nt">h1</span><span class="o">,</span><span class="nt">h2</span><span class="o">,</span><span class="nt">h3</span><span class="o">,</span><span class="nt">h4</span><span class="o">,</span><span class="nt">h5</span><span class="o">,</span><span class="nt">h6</span><span class="o">,</span>
<span class="nt">pre</span><span class="o">,</span><span class="nt">code</span><span class="o">,</span><span class="nt">form</span><span class="o">,</span><span class="nt">fieldset</span><span class="o">,</span><span class="nt">legend</span><span class="o">,</span><span class="nt">input</span><span class="o">,</span><span class="nt">textarea</span><span class="o">,</span><span class="nt">p</span><span class="o">,</span><span class="nt">blockquote</span><span class="o">,</span><span class="nt">th</span><span class="o">,</span><span class="nt">td</span><span class="p">{</span><span class="k">margin</span><span class="o">:</span><span class="m">0</span><span class="p">;</span><span class="k">padding</span><span class="o">:</span><span class="m">0</span><span class="p">;}</span>
<span class="nt">table</span><span class="p">{</span><span class="k">border-collapse</span><span class="o">:</span><span class="k">collapse</span><span class="p">;</span><span class="k">border-spacing</span><span class="o">:</span><span class="m">0</span><span class="p">;}</span><span class="nt">fieldset</span><span class="o">,</span><span class="nt">img</span><span class="p">{</span><span class="k">border</span><span class="o">:</span><span class="m">0</span><span class="p">;}</span><span class="nt">address</span><span class="o">,</span><span class="nt">caption</span><span class="o">,</span>
<span class="nt">cite</span><span class="o">,</span><span class="nt">code</span><span class="o">,</span><span class="nt">dfn</span><span class="o">,</span><span class="nt">em</span><span class="o">,</span><span class="nt">strong</span><span class="o">,</span><span class="nt">th</span><span class="o">,</span><span class="nt">var</span><span class="p">{</span><span class="k">font-style</span><span class="o">:</span><span class="k">normal</span><span class="p">;</span><span class="k">font-weight</span><span class="o">:</span><span class="k">normal</span><span class="p">;}</span><span class="nt">li</span><span class="p">{</span><span class="k">list-style</span><span class="o">:</span><span class="k">none</span><span class="p">;}</span>
<span class="nt">caption</span><span class="o">,</span><span class="nt">th</span><span class="p">{</span><span class="k">text-align</span><span class="o">:</span><span class="k">left</span><span class="p">;}</span><span class="nt">h1</span><span class="o">,</span><span class="nt">h2</span><span class="o">,</span><span class="nt">h3</span><span class="o">,</span><span class="nt">h4</span><span class="o">,</span><span class="nt">h5</span><span class="o">,</span><span class="nt">h6</span><span class="p">{</span><span class="k">font-size</span><span class="o">:</span><span class="m">100%</span><span class="p">;</span><span class="k">font-weight</span><span class="o">:</span><span class="k">normal</span><span class="p">;}</span>
<span class="nt">q</span><span class="nd">:before</span><span class="o">,</span><span class="nt">q</span><span class="nd">:after</span><span class="p">{</span><span class="k">content</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">;}</span><span class="nt">abbr</span><span class="o">,</span><span class="nt">acronym</span><span class="p">{</span><span class="k">border</span><span class="o">:</span><span class="m">0</span><span class="p">;</span><span class="k">font-variant</span><span class="o">:</span><span class="k">normal</span><span class="p">;}</span>
<span class="nt">sup</span><span class="p">{</span><span class="k">vertical-align</span><span class="o">:</span><span class="k">text</span><span class="o">-</span><span class="k">top</span><span class="p">;}</span><span class="nt">sub</span><span class="p">{</span><span class="k">vertical-align</span><span class="o">:</span><span class="k">text</span><span class="o">-</span><span class="k">bottom</span><span class="p">;}</span><span class="nt">input</span><span class="o">,</span><span class="nt">textarea</span><span class="o">,</span>
<span class="nt">select</span><span class="p">{</span><span class="k">font-family</span><span class="o">:</span><span class="k">inherit</span><span class="p">;</span><span class="k">font-size</span><span class="o">:</span><span class="k">inherit</span><span class="p">;</span><span class="k">font-weight</span><span class="o">:</span><span class="k">inherit</span><span class="p">;}</span><span class="nt">input</span><span class="o">,</span><span class="nt">textarea</span><span class="o">,</span>
<span class="nt">select</span><span class="p">{</span><span class="o">*</span><span class="k">font-size</span><span class="o">:</span><span class="m">100%</span><span class="p">;}</span><span class="nt">legend</span><span class="p">{</span><span class="k">color</span><span class="o">:</span><span class="m">#000</span><span class="p">;}</span>

<span class="c">/* Your Base Foundation */</span>
<span class="nt">html</span><span class="o">,</span><span class="nt">body</span> <span class="p">{</span> <span class="k">font-family</span><span class="o">:</span> <span class="k">sans-serif</span><span class="p">;</span> <span class="k">font-size</span><span class="o">:</span><span class="m">12px</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">h1</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span><span class="m">18px</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">h2</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span><span class="m">16px</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">h3</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span><span class="m">14px</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">h4</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span><span class="m">12px</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">strong</span> <span class="p">{</span> <span class="k">font-weight</span><span class="o">:</span><span class="m">900</span> <span class="cp">!important</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">hr</span>     <span class="p">{</span> <span class="k">border</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="k">margin</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="k">padding</span><span class="o">:</span><span class="m">0</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span><span class="m">1px</span><span class="p">;</span> <span class="k">color</span><span class="o">:</span><span class="m">#000</span><span class="p">;</span> <span class="k">background-color</span><span class="o">:</span><span class="m">#000</span><span class="p">;</span> <span class="p">}</span>

<span class="c">/* Page Breaks */</span>
<span class="nc">.pb_before</span> <span class="p">{</span> <span class="k">page</span><span class="o">-</span><span class="n">break</span><span class="o">-</span><span class="n">before</span><span class="o">:</span><span class="k">always</span> <span class="cp">!important</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.pb_after</span>  <span class="p">{</span> <span class="k">page</span><span class="o">-</span><span class="n">break</span><span class="o">-</span><span class="n">after</span><span class="o">:</span><span class="k">always</span> <span class="cp">!important</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.pbi_avoid</span> <span class="p">{</span> <span class="k">page</span><span class="o">-</span><span class="n">break</span><span class="o">-</span><span class="k">inside</span><span class="o">:</span><span class="k">avoid</span> <span class="cp">!important</span><span class="p">;</span> <span class="p">}</span>
</code></pre>
</div>

<p>
  The second section of the CSS above is the place where you can put in a few custom styles that fit your needs. In my example I set a series of header font sizes, a base sans-serif font face and an hr tag that can be used as a simple rule. Feel free to add others here like basic styles for data tables, etc. The last section of the CSS file above are page break helpers. The latest version of wkhtmltopdf never breaks text in the middle of the line anymore. So most of the time the default page break behavior will work fine. But for those situations where you need more control, these 3 CSS declarations will serve most of your needs. Let's take a look at a few examples of their usage. Full details on <a href="http://www.w3.org/TR/css3-page/">CSS paged media</a> can be found on the W3C's site.
</p>

<p>
  Use the <code>.pbi_avoid</code> class on any block level element that you want to make sure is never broken across multiple pages. A great usage would be on each element of an orders line items. It can also be used on any large page element that will certainly fit on one page, but should never be broken up. This is perfect in places where you might have measured the remaining page space before drawing said element. The <code>.pb_before</code> class will always break to a new page. I found this very useful when printing composite PDF files that combined multiple other PDF actions. So here is another HAML template that renders 3 other PDF full page partials. Each partial can be 1 to many pages. By enclosing each in a <code><div></code> tag that forces a new page break makes sure that we always start a new page when rendering each document.
</p>

<div class="highlight"><pre><code class="ruby"><span class="o">%</span><span class="n">div</span><span class="o">.</span><span class="n">pb_before</span>
  <span class="o">=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdf/orders/print&#39;</span>
<span class="o">%</span><span class="n">div</span><span class="o">.</span><span class="n">pb_before</span>
  <span class="o">=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdf/orders/invoice&#39;</span>
<span class="o">%</span><span class="n">div</span><span class="o">.</span><span class="n">pb_before</span>
  <span class="o">=</span> <span class="n">render</span> <span class="ss">:partial</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdf/orders/picklist&#39;</span>
</code></pre>
</div>


<h2>Custom Headers/Footers</h2>

<p>
  PDFKit and specifically wkhtmltopdf handles common page headers and footers just wonderfully, though it did take me some time to figure it out. I'll try to spare you the same pain by detailing the process for a custom footer on each page. In this example we will expect that our custom footer will be approximately .2 inches tall with a current page number next to a total page count. 
</p>

<p>
  Remember that <code>pdfkit-footer_html</code> meta tag in the pdf layout above? If not, here it is again.
</p>

<div class="highlight"><pre><code class="ruby"><span class="o">%</span><span class="n">meta</span><span class="p">{</span><span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s1">&#39;pdfkit-footer_html&#39;</span><span class="p">,</span> <span class="ss">:content</span> <span class="o">=&gt;</span> <span class="n">pdf_footer_url</span><span class="p">}</span>
</code></pre>
</div>

<p>
  So what is going on here? Two things really. The first is a way for PDFKit to customize the command arguments passed down to wkhtmltopdf when the page is converted. PDFKit will take any meta tag with a name prefixed using "pdfkit-" and pass down the content attribute as the value to the suffix of the name attribute. In this case <code>--foter-html http://myapp.com/pdf/footer</code> will be used as a command argument to wkhtmltopdf when rendering templates using that layout file. Note, it is important to use fully qualified URLs for header and footer arguments.
</p>

<p>
  When it comes to headers and footers, wkhtmltopdf takes the URL to an HTML page, renders it to native PDF code and embeds it automatically for you below or above your page margin. You can control the placement of these in one of two ways. The first is by adjusting the layout of the header/footer HTML page. The second is by adjusting the margin of the parent document. In my case, since I knew my footer was around .2 inches tall, I gave it's template an internal top margin of 10 pixels and told PDFKit to increase my global .5 inch page margins by .2 inches for the bottom margin using a rails initializer.
</p>

<div class="highlight"><pre><code class="ruby"><span class="no">PDFKit</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
  <span class="n">config</span><span class="o">.</span><span class="n">default_options</span> <span class="o">=</span> <span class="p">{</span>
    <span class="ss">:page_size</span>     <span class="o">=&gt;</span> <span class="s1">&#39;Letter&#39;</span><span class="p">,</span>
    <span class="ss">:margin_top</span>    <span class="o">=&gt;</span> <span class="s1">&#39;0.5in&#39;</span><span class="p">,</span>
    <span class="ss">:margin_right</span>  <span class="o">=&gt;</span> <span class="s1">&#39;0.5in&#39;</span><span class="p">,</span>
    <span class="ss">:margin_bottom</span> <span class="o">=&gt;</span> <span class="s1">&#39;0.7in&#39;</span><span class="p">,</span>
    <span class="ss">:margin_left</span>   <span class="o">=&gt;</span> <span class="s1">&#39;0.5in&#39;</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre>
</div>

<p>
  So now I know that whatever content I render in my <code>http://myapp.com/pdf/footer</code> page will fit just nicely on the bottom of each page. But how to generate that content and the custom page numbers? First, let's make a single pdf resource in our rails route file with a collection action for #footer. Now here is a controller for that resource with a single footer action.
</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">PdfController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">perform_caching</span> <span class="p">;</span> <span class="kp">true</span> <span class="p">;</span> <span class="k">end</span>
  <span class="n">caches_page</span> <span class="ss">:footer</span>
  
  <span class="k">def</span> <span class="nf">footer</span>
    <span class="n">render</span> <span class="ss">:layout</span> <span class="o">=&gt;</span> <span class="kp">false</span>
  <span class="k">end</span>
  
  <span class="kp">private</span>
  
  <span class="k">def</span> <span class="nf">perform_caching</span>
    <span class="kp">true</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre>
</div>

<p>
  There is not much here past rendering a basic template file with no layout. All the rest is to achieve an important set of caching rules. Ideally the URL argument to <code>--footer-html</code> would be a static HTML file. However, if want to use Rails templating to render that file, it is important to cache the results. The parent document will request this URL for each page it renders, so you can see how one process could deadlock another if your were not careful. In my example above, I override ActionController's perform_caching class and instance methods so that all actions in this controller would cache. I recommend committing a cached footer html page to any source control you have for deployment.
</p>

<p>
  With that out of the way, what about the content of the footer HTML page? Again, here is a HAML template I used. This is very much like my pdf layout with one important difference, some JavaScript that is used to parse the query parameters that wkhtmltopdf tacks onto each header/footer URL request. In the example below I am only using the current page <code>page</code> and total page count <code>topage</code> params and inserting those values into to elements. For a full list of all the query parameters, consult the wkhtmltopdf expanded help page.
</p>

<div class="highlight"><pre><code class="ruby"><span class="o">!!!</span> <span class="mi">5</span>
<span class="o">%</span><span class="n">html</span><span class="p">{</span><span class="ss">:lang</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">}</span>
  <span class="o">%</span><span class="n">head</span>
    <span class="o">%</span><span class="n">meta</span><span class="p">{</span><span class="ss">:charset</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">}</span>
    <span class="o">=</span> <span class="n">stylesheet_link_tag</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">protocol</span><span class="si">}#{</span><span class="n">request</span><span class="o">.</span><span class="n">host_with_port</span><span class="si">}</span><span class="s2">/stylesheets/pdf.css&quot;</span>
    <span class="ss">:javascript</span>
      <span class="n">var</span> <span class="n">pdfInfo</span> <span class="o">=</span> <span class="p">{};</span>
      <span class="n">var</span> <span class="n">x</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">search</span><span class="o">.</span><span class="n">substring</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&amp;&#39;</span><span class="p">);</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">var</span> <span class="n">i</span> <span class="k">in</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="n">var</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;=&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span> <span class="n">pdfInfo</span><span class="o">[</span><span class="n">z</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span> <span class="o">=</span> <span class="n">unescape</span><span class="p">(</span><span class="n">z</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">);</span> <span class="p">}</span>
      <span class="n">function</span> <span class="n">getPdfInfo</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">page</span> <span class="o">=</span> <span class="n">pdfInfo</span><span class="o">.</span><span class="n">page</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">var</span> <span class="n">pageCount</span> <span class="o">=</span> <span class="n">pdfInfo</span><span class="o">.</span><span class="n">topage</span> <span class="o">||</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s1">&#39;pdfkit_page_current&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">textContent</span> <span class="o">=</span> <span class="n">page</span><span class="p">;</span>
        <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s1">&#39;pdfkit_page_count&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">textContent</span> <span class="o">=</span> <span class="n">pageCount</span><span class="p">;</span>
      <span class="p">}</span>
  <span class="o">%</span><span class="n">body</span><span class="p">{</span><span class="ss">:onload</span> <span class="o">=&gt;</span> <span class="s1">&#39;getPdfInfo()&#39;</span><span class="p">}</span>
    <span class="o">%</span><span class="n">div</span><span class="c1">#pdfkit_page_numbers</span>
      <span class="o">%</span><span class="n">span</span> <span class="no">Page</span><span class="p">:</span> 
      <span class="o">%</span><span class="n">span</span><span class="c1">#pdfkit_page_current</span>
      <span class="o">%</span><span class="n">span</span> <span class="n">of</span> 
      <span class="o">%</span><span class="n">span</span><span class="c1">#pdfkit_page_count</span>
</code></pre>
</div>

<p>
  Hopefully this helps anyone looking to use PDFKit or any system that leverages the wkhtmltopdf project. If I missed anything or can help, please leave me a comment. Thanks!
</p>



]]>
    </content>
 </entry>
 
 <entry>
   <title>GC Tune Ruby 1.9.2 With RVM</title>
   <link href="http://metaskills.net/2011/03/09/gc-tune-ruby-1.9.2-with-rvm"/>
   <updated>2011-03-09T00:00:00-05:00</updated>
   <id>http://metaskills.net/2011/03/09/gc-tune-ruby-1.9.2-with-rvm</id>
   <content type="html">
     <![CDATA[<p>
  Here is a <a href="https://gist.github.com/856296">gist</a> by Sokolov Yura (funny-falcon) that allows you to GC tune Ruby 1.9.2 just like Ruby Enterprise Edition (REE). So all of us using <a href="http://rvm.beginrescueend.com/">RVM</a> have no reason not start using this right away. Here are the steps.
</p>

<pre class="command">
  $ curl https://gist.github.com/raw/856296/patch-1.9.2-gc.patch > ~/192-gc.patch
  $ rvm uninstall 1.9.2
  $ rvm install 1.9.2 --patch ~/192-gc.patch
</pre>

<p>
  I have used this RVM hook below for awhile now. It automatically sets and unsets the proper ENV vars to GC tunes my REE. I have now updated it to apply the same GC settings to my newly patched 1.9.2 as well. I recommend this go into <code>~/.rvm/hooks/after_use</code>. 
</p>

<div class="highlight"><pre><code class="bash"><span class="k">case</span> <span class="s2">&quot;$rvm_ruby_string&quot;</span> in
  *ree*|*ruby-1.9.2*<span class="o">)</span>
    <span class="nb">export </span><span class="nv">RUBY_HEAP_MIN_SLOTS</span><span class="o">=</span>1000000
    <span class="nb">export </span><span class="nv">RUBY_HEAP_SLOTS_INCREMENT</span><span class="o">=</span>1000000
    <span class="nb">export </span><span class="nv">RUBY_HEAP_SLOTS_GROWTH_FACTOR</span><span class="o">=</span>1
    <span class="nb">export </span><span class="nv">RUBY_GC_MALLOC_LIMIT</span><span class="o">=</span>1000000000
    <span class="nb">export </span><span class="nv">RUBY_HEAP_FREE_MIN</span><span class="o">=</span>500000
    <span class="nb">export </span><span class="nv">RUBY_FREE_MIN</span><span class="o">=</span><span class="nv">$RUBY_HEAP_FREE_MIN</span>
  ;;
  *<span class="o">)</span>
    <span class="nb">unset </span>RUBY_HEAP_MIN_SLOTS RUBY_HEAP_SLOTS_INCREMENT RUBY_HEAP_SLOTS_GROWTH_FACTOR RUBY_GC_MALLOC_LIMIT RUBY_HEAP_FREE_MIN RUBY_FREE_MIN
  ;;                                                                                                                                                                                                                                                                                                                        
<span class="k">esac</span>
</code></pre>
</div>





]]>
    </content>
 </entry>
 
 <entry>
   <title>Code Sharing With XCode 4 - An Alternative To Static Libraries</title>
   <link href="http://metaskills.net/2011/03/03/code-sharing-with-xcode-4-an-alternative-to-static-libraries"/>
   <updated>2011-03-03T00:00:00-05:00</updated>
   <id>http://metaskills.net/2011/03/03/code-sharing-with-xcode-4-an-alternative-to-static-libraries</id>
   <content type="html">
     <![CDATA[<p>
  There are many great techniques for sharing code across XCode projects. If that code is tested and build-able by XCode as a static library, Clint Harris' <em><a href="http://www.clintharris.net/2009/iphone-app-shared-libraries/">Easy, Modular Code Sharing Across iPhone Apps: Static Libraries and Cross-Project References</a></em> is really a solid source on the topic. However, this approach is a bit heavy handed for what I wanted to do. Basically if you just have some common header and implementation files that you want to use across multiple XCode projects, this article is for you. The goals for the common code is simple:
</p>

<ul>
  <li>Common code needs to be under distinct version control.</li>
  <li>Common code files need to be editable by XCode from the referencing project.</li>  
</ul>

<p>
  In this example I will use a contrived example folder called "MetaSupport" as simple directory of common code to use. It includes some global function, a MyApp namespace with class with accessors and a directory of Additions to core classes.
</p>

<pre class="command">
$ tree MetaSupport
â”œâ”€â”€ Additions
â”‚Â Â  â”œâ”€â”€ NSArray+MetaSupport.h
â”‚Â Â  â””â”€â”€ NSArray+MetaSupport.m
â”œâ”€â”€ MyApp.h
â”œâ”€â”€ MyApp.m
â”œâ”€â”€ MyGlobal.h
â””â”€â”€ MyGlobal.m  
</pre>

<p>
  So let's get started. Below are the steps for adding shared code to our "KillerApp" iOS project. FIrst, right click on the XCode project in your project navigator. Select "New Group".
  <aside class="center">
    <span class="photofancy">
      <img src="/assets/xcs_addgroup.png" alt="XCode 4 Add New Group" width="367" height="421" />
    </span>
  </aside>
</p>

<p>
  Select the newly created group in your project navigator. Now open up the file inspector. It can be found in View => Utilities => File Inspector. In the file inspector, set the "Group Name" to match your shared code folder. In this case I named it "MetaSupport". This is purely optional and simply helps you organize your code.
  <aside class="center">
    <span class="photofancy">
      <img src="/assets/xcs_addedgroup.png" alt="XCode 4 Added New Group" width="367" height="421" />
    </span>
  </aside>
</p>

<p>
  Drag all your shared files and folders from your "MetaSupport" directory to the newly created "MetaSupport" group folder. XCode will ask you to choose some options for adding these files. It is important to add folder references and not copy files. Check any targets that apply.
  <aside class="center">
    <span class="photofancy">
      <img src="/assets/xcs_addfiles.png" alt="XCode 4 Added New Files" width="730" height="493" />
    </span>
  </aside>
</p>

<p>
  So not only can you see and edit the files belonging to your shared code. You can also commit changes to those files and they will be committed to the shared code's repository that they reside in, not the current KillerApp projects repo! Hence you can update your shared code for all projects from any project.
  <aside class="center">
    <span class="photofancy">
      <img src="/assets/xcs_commitfiles.png" alt="XCode 4 Commit Files" width="756" height="457" />
    </span>
  </aside>
</p>



]]>
    </content>
 </entry>
 
 <entry>
   <title>Modern SQL Server &amp; Ruby/Rails Installer For Windows</title>
   <link href="http://metaskills.net/2011/02/10/modern-sql-server--rails"/>
   <updated>2011-02-10T00:00:00-05:00</updated>
   <id>http://metaskills.net/2011/02/10/modern-sql-server--rails</id>
   <content type="html">
     <![CDATA[<p>
  <span class="photofancy floatr ml20 mb10">
    <img src="/assets/mss_eyarticle.png" alt="My Modern SQL Server & Rails Engine Yard Article" width="400" height="293" />
  </span>
  If you have not done so, please go read my article <em><a href="http://www.engineyard.com/blog/2011/modern-sql-server-rails/">Modern SQL Server & Rails</a></em> on the Engine Yard blog. I want to thank Wayne E Seguin for inviting me to write the article. This article details many exciting things that have been happening for those using the SQL Server Adapter for Rails, most notably TinyTDS. The article outlines why everyone still using the ODBC connection mode should really switch over to TinyTDS.
</p>

<p>
  <span class="photofancy floatr ml20 mb20">
    <img src="/assets/mss_railsinstaller.png" alt="Ruby Rails Installer For Windows" width="400" height="293" />
  </span>
  Many exciting things are happening thanks to Wayne's new pet project, a <a href="http://railsinstaller.org/">ruby and rails installer for Windows</a>. The adapter and TinyTDS will hopefully dove tail into that. The plan is to include components in the one click installer that will allow Windows users to access their legacy databases using TinyTDS and the SQL Server Adapter. We had even talked on the mailing list about including a demo rails app with the ruby windows installer that would access the northwind database much the same way .Net demos would.
</p>


]]>
    </content>
 </entry>
 
 <entry>
   <title>Simple Memcached Reports In Rails</title>
   <link href="http://metaskills.net/2011/01/27/simple-memcached-reports-in-rails"/>
   <updated>2011-01-27T00:00:00-05:00</updated>
   <id>http://metaskills.net/2011/01/27/simple-memcached-reports-in-rails</id>
   <content type="html">
     <![CDATA[<p>
  <span class="photofancy floatr ml20">
    <img src="/assets/memcd.jpg" alt="Time Machine Exclude Window" width="152" height="182" />
  </span>
  The Pragmatic Bookshelf's <a href="http://www.pragprog.com/titles/memcd/using-memcached"><em>Using memcached: How to scale your website easily</em></a> is way old. But then again, memcached is still very useful. One of the things I remember reading a long time ago was the stats for your process and how to pull out meaningful reports like a hit ratio, memory and a get to set ration.
</p>

<p>
  I whipped these up today as a simple way of getting a report using <code>Rails.cache.report</code>, assuming your cache strategy is set to memcached. Hope others find it useful. BTW, I do not recommend the book, it is too low level for any useful meaning to the average Rails developer.
</p>

<div class="h20"></div>

<div class="highlight"><pre><code class="ruby"><span class="k">module</span> <span class="nn">ActiveSupport</span>
  <span class="k">module</span> <span class="nn">Cache</span>
    <span class="k">class</span> <span class="nc">MemCacheStore</span> <span class="o">&lt;</span> <span class="no">Store</span>
      
      <span class="kp">include</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">DateHelper</span>
      <span class="kp">include</span> <span class="no">ActionView</span><span class="o">::</span><span class="no">Helpers</span><span class="o">::</span><span class="no">NumberHelper</span>

      <span class="c1"># Higher percentages, above 90%, are good.</span>
      <span class="k">def</span> <span class="nf">hit_ratio</span>
        <span class="n">stats</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="p">(</span><span class="n">server</span><span class="p">,</span><span class="n">stat</span><span class="p">)</span><span class="o">|</span>
          <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">stat</span><span class="o">[</span><span class="s1">&#39;get_hits&#39;</span><span class="o">].</span><span class="n">to_f</span> <span class="o">/</span> <span class="n">stat</span><span class="o">[</span><span class="s1">&#39;cmd_get&#39;</span><span class="o">].</span><span class="n">to_f</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
          <span class="n">memo</span><span class="o">[</span><span class="n">server</span><span class="o">]</span> <span class="o">=</span> <span class="n">number_to_percentage</span><span class="p">(</span><span class="n">value</span><span class="p">,</span><span class="ss">:precision</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">)</span>
          <span class="n">memo</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="c1"># Another good statistic to look at is percentage of gets to sets. For a well-tuned application, </span>
      <span class="c1"># there should be more gets than sets. High percents are bad, negatives are great.</span>
      <span class="k">def</span> <span class="nf">gets_to_sets</span>
        <span class="n">stats</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="p">(</span><span class="n">server</span><span class="p">,</span><span class="n">stat</span><span class="p">)</span><span class="o">|</span>
          <span class="n">sets</span> <span class="o">=</span> <span class="n">stat</span><span class="o">[</span><span class="s1">&#39;cmd_set&#39;</span><span class="o">].</span><span class="n">to_f</span>
          <span class="nb">gets</span> <span class="o">=</span> <span class="n">stat</span><span class="o">[</span><span class="s1">&#39;cmd_get&#39;</span><span class="o">].</span><span class="n">to_f</span>
          <span class="n">more_sets</span> <span class="o">=</span> <span class="n">sets</span> <span class="o">-</span> <span class="nb">gets</span>
          <span class="n">value</span> <span class="o">=</span> <span class="p">(</span><span class="n">more_sets</span> <span class="o">/</span> <span class="nb">gets</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span>
          <span class="n">memo</span><span class="o">[</span><span class="n">server</span><span class="o">]</span> <span class="o">=</span> <span class="n">number_to_percentage</span><span class="p">(</span><span class="n">value</span><span class="p">,</span><span class="ss">:precision</span><span class="o">=&gt;</span><span class="mi">2</span><span class="p">)</span>
          <span class="n">memo</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="k">def</span> <span class="nf">uptime</span>
        <span class="n">stats</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="p">(</span><span class="n">server</span><span class="p">,</span><span class="n">stat</span><span class="p">)</span><span class="o">|</span>
          <span class="n">started_on</span> <span class="o">=</span> <span class="n">stat</span><span class="o">[</span><span class="s1">&#39;uptime&#39;</span><span class="o">].</span><span class="n">seconds</span><span class="o">.</span><span class="n">ago</span>
          <span class="n">utime</span> <span class="o">=</span> <span class="n">distance_of_time_in_words</span> <span class="n">started_on</span><span class="p">,</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span>
          <span class="n">memo</span><span class="o">[</span><span class="n">server</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:started_on</span> <span class="o">=&gt;</span> <span class="n">started_on</span><span class="p">,</span> <span class="ss">:uptime</span> <span class="o">=&gt;</span> <span class="n">utime</span><span class="p">}</span>
          <span class="n">memo</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="k">def</span> <span class="nf">memory</span>
        <span class="n">stats</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="p">(</span><span class="n">server</span><span class="p">,</span><span class="n">stat</span><span class="p">)</span><span class="o">|</span>
          <span class="n">memory</span> <span class="o">=</span> <span class="n">number_to_human_size</span> <span class="n">stat</span><span class="o">[</span><span class="s1">&#39;limit_maxbytes&#39;</span><span class="o">]</span>
          <span class="n">used</span> <span class="o">=</span> <span class="n">number_to_human_size</span> <span class="n">stat</span><span class="o">[</span><span class="s1">&#39;bytes&#39;</span><span class="o">]</span>
          <span class="n">memo</span><span class="o">[</span><span class="n">server</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:memory_total</span> <span class="o">=&gt;</span> <span class="n">memory</span><span class="p">,</span> <span class="ss">:memory_used</span> <span class="o">=&gt;</span> <span class="n">used</span><span class="p">}</span>
          <span class="n">memo</span>
        <span class="k">end</span>
      <span class="k">end</span>
      
      <span class="k">def</span> <span class="nf">report</span>
        <span class="n">stats</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">memo</span><span class="p">,</span> <span class="n">server</span><span class="o">|</span>
          <span class="n">rpt</span> <span class="o">=</span> <span class="n">memory</span><span class="o">[</span><span class="n">server</span><span class="o">].</span><span class="n">merge</span><span class="p">(</span><span class="n">uptime</span><span class="o">[</span><span class="n">server</span><span class="o">]</span><span class="p">)</span>
          <span class="n">rpt</span><span class="o">[</span><span class="ss">:hit_ratio</span><span class="o">]</span> <span class="o">=</span> <span class="n">hit_ratio</span><span class="o">[</span><span class="n">server</span><span class="o">]</span>
          <span class="n">rpt</span><span class="o">[</span><span class="ss">:gets_to_sets</span><span class="o">]</span> <span class="o">=</span> <span class="n">gets_to_sets</span><span class="o">[</span><span class="n">server</span><span class="o">]</span>
          <span class="n">memo</span><span class="o">[</span><span class="n">server</span><span class="o">]</span> <span class="o">=</span> <span class="n">rpt</span>
          <span class="n">memo</span>
        <span class="k">end</span>
      <span class="k">end</span>
      
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre>
</div>

]]>
    </content>
 </entry>
 
 <entry>
   <title>From Test::Unit &amp; Shoulda To MiniTest::Spec &amp; MiniShoulda</title>
   <link href="http://metaskills.net/2011/01/25/from-test-unit-shoulda-to-minitest-spec-minishoulda"/>
   <updated>2011-01-25T00:00:00-05:00</updated>
   <id>http://metaskills.net/2011/01/25/from-test-unit-shoulda-to-minitest-spec-minishoulda</id>
   <content type="html">
     <![CDATA[<aside class="flash_info">
  UPDATE:  
  <a href="/2011/03/26/using-minitest-spec-with-rails/">Using MiniTest::Spec With Rails</a> 
  &amp;
  <a href="/2011/03/26/using-minitest-spec-with-rails/">MiniBacktrace For MiniTest &amp; Rails</a>
</aside>

<p>
  It seems the MiniTest replacement for Test::Unit in Ruby 1.9 has been presenting itself more and more in my daily readings. Recently was Jamis Buck's article titled <a href="http://37signals.com/svn/posts/2742-the-road-to-faster-tests">The road to faster tests</a> where he talks about optimizing basecamp's suite to run faster. And there again, some of the comments below mentioned MiniTest as a solution. That got me thinking on what would it take for me to switch from Test::Unit to MiniTest.
</p>

<p>
  I love testing! But I am not nuts about large libraries. Looking at you RSpec! <a href="http://evan.tiggerpalace.com/articles/2010/12/18/ruby-test-unit-sucks-and-why-i-still-use-it/">Like others</a>, I believe that you do not need a bloated test framework to get good coverage with a lean and succinct style. A handful of assertions and a simple context structure provided by libraries like <a href="https://github.com/thoughtbot/shoulda">Shoulda</a> is really all I need for both unit and a certain level of functional testing. It is my firm believe that large libraries and semi-magical test code based on things like RSpec will wane in the coming years. Those that base very large test suites on them will suffer the penalty for when an upgrade or test refactor is needed. I could be wrong, time will tell. For now let's cover how to move to MiniTest for those that like simple Test::Unit and or Shoulda.
</p>

<p>
  MiniTest provides a drop in replacement for Test::Unit, so I wont cover the details of those basics. What most do not know is that MiniTest comes with a simple MiniTest::Spec DSL that uses <code>describe</code> and <code>it</code> blocks much like Shoulda's <code>context</code> and <code>should</code> methods. The similarities were so close that I set out to move all my projects to MiniTest::Spec. The goal would be that none of my exiting suites context/should/before/after code would require a change. The result...
</p>


<h2>MiniShoulda</h2>

<p>
  <a href="https://github.com/metaskills/mini_shoulda">MiniShoulda</a> is a small ruby gem that puts a Shoulda DSL on top of MiniTest::Spec. All it really does it alias a few key methods. Here is the core of it now.
</p>

<div class="highlight"><pre><code class="ruby"><span class="k">class</span> <span class="nc">MiniTest</span><span class="o">::</span><span class="no">Spec</span> <span class="o">&lt;</span> <span class="no">MiniTest</span><span class="o">::</span><span class="no">Unit</span><span class="o">::</span><span class="no">TestCase</span>
  
  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
    <span class="k">alias</span> <span class="ss">:setup</span>    <span class="ss">:before</span>
    <span class="k">alias</span> <span class="ss">:teardown</span> <span class="ss">:after</span>
    <span class="k">alias</span> <span class="ss">:should</span>   <span class="ss">:it</span>
    <span class="k">alias</span> <span class="ss">:context</span>  <span class="ss">:describe</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">should_eventually</span><span class="p">(</span><span class="n">desc</span><span class="p">)</span>
    <span class="n">it</span><span class="p">(</span><span class="s2">&quot;should eventually </span><span class="si">#{</span><span class="n">desc</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="n">skip</span><span class="p">(</span><span class="s2">&quot;Should eventually </span><span class="si">#{</span><span class="n">desc</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
  
<span class="k">end</span>
</code></pre>
</div>

<p>
  For now, MiniShoulda performs only one monkey patch to MiniTest. There is a critical bug in MiniTest that does not allow the describe/context blocks to use the existing scope of the parent class. I have a <a href="https://github.com/seattlerb/minitest/pull/9">pull request</a> in for the project. Please help out and add a thoughtful comment based on the <a href="https://github.com/metaskills/minitest/commit/e7cde5bd9e61bc1ac13c7326ef4de23382e3467b">merits of the patch</a> and the <a href="https://gist.github.com/793330">description of the problem</a>. No author likes to see simple +1 comments.
</p>


<h2>The MiniTest Switch</h2>

<pre class="command">
$ gem install mini_shoulda
</pre>

<p>
  Our gem spec will automatically pull in MiniTest version 2.0.2 or greater. Assuming you have a test helper file, the top requires will looks something like this. MiniTest needs that autorun file required or none of your tests will run.
</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;mini_shoulda&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;minitest/autorun&#39;</span>
</code></pre>
</div>

<p>
  What should I expect? For starters, expect a few of your tests to fail. Especially ones that were happenstantially running linearly and not exercised in isolation. I think there is a technical term for this? Anyways, MiniTest mixes up the test suite each run trough it using a random seed. So it is highly like to expose a few poorly written tests that depended on state leftover from a previous test. Also the MiniTest::Unit underneath MiniTest::Spec does not have a few assertions you may have used. One is <code>assert_raise</code> which is now the standard convention <code>assert_raises</code> with an "s". And finally <code>assert_nothing_raised</code> has been pulled completely since Test::Unit's documentation alluded to its uselessness for a long time.
</p>

<p>
  What does MiniTest::Spec give you besides clean and powerful describe/it organization with before/after setups and teardowns? I highly recommend the <a href="http://cheat.errtheblog.com/s/minitest/1">MiniTest cheat sheet</a> to find out. See the spec and mock methods at the bottom? As much as I have always like the basic unit testing assertions, I am looking forward to using the must/wont object assertions.
</p>


<h2>Resources</h2>

<ul>
  <li><a href="https://github.com/metaskills/mini_shoulda">MiniShoulda Github Project</a></li>
  <li><a href="https://github.com/seattlerb/minitest/pull/9">The MiniTest Describe Pull Resuest</a> - HELP OUT! COMMENT!</li>
  <li><a href="http://cheat.errtheblog.com/s/minitest/1">MiniTest Cheat Sheet</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Automating Heroku PG Backups</title>
   <link href="http://metaskills.net/2011/01/03/automating-heroku-pg-backups"/>
   <updated>2011-01-03T00:00:00-05:00</updated>
   <id>http://metaskills.net/2011/01/03/automating-heroku-pg-backups</id>
   <content type="html">
     <![CDATA[<p>
  On December 1st, Heroku <a href="http://blog.heroku.com/archives/2010/12/1/bundles-deprecation/">deprecated their bundles add-on</a> in favor of <a href="http://blog.heroku.com/archives/2010/11/16/pgbackups/">their new PG Backups</a>. Even though there are <a href="http://groups.google.com/group/heroku/browse_thread/thread/25402694098d393a">other solutions</a> for automating backups using this new add-on, none of them met my needs. I like to have a daily DB backup history, just in case you find something bad that happened "n" days earlier. Below is a simple rake task suitable to place in your rails <code>lib/tasks/heroku.task</code> file. I'll explain some things I learned below when writing this.
</p>

<div class="highlight"><pre><code class="ruby"><span class="nb">require</span> <span class="s1">&#39;heroku&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;heroku/command&#39;</span>

<span class="no">HEROKU_BACKUP_BUCKET</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Heroku</span><span class="o">::</span><span class="no">Command</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">selected_application</span><span class="si">}</span><span class="s2">-backups&quot;</span>

<span class="n">namespace</span> <span class="ss">:heroku</span> <span class="k">do</span>
  
  <span class="n">desc</span> <span class="s2">&quot;Use the `heroku pgbackups` with my S3 bucket.&quot;</span>
  <span class="n">task</span> <span class="ss">:backup</span> <span class="o">=&gt;</span> <span class="ss">:connect_to_s3</span> <span class="k">do</span>
    <span class="n">info</span> <span class="o">=</span> <span class="n">capture_heroku_command</span> <span class="s1">&#39;pgbackups&#39;</span>
    <span class="k">if</span> <span class="n">heroku_existing_backup?</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
      <span class="n">last_backup_info</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; | &quot;</span><span class="p">)</span>
      <span class="n">last_backup_id</span> <span class="o">=</span> <span class="n">last_backup_info</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
      <span class="n">last_backup_time</span> <span class="o">=</span> <span class="n">last_backup_info</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
      <span class="nb">puts</span> <span class="s2">&quot;Deleting last backup - ID: </span><span class="si">#{</span><span class="n">last_backup_id</span><span class="si">}</span><span class="s2"> BackupTime: </span><span class="si">#{</span><span class="n">last_backup_time</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="n">heroku_command</span> <span class="s1">&#39;pgbackups:destroy&#39;</span><span class="p">,</span> <span class="n">last_backup_id</span>
    <span class="k">end</span>
    <span class="n">heroku_command</span> <span class="s1">&#39;pgbackups:capture&#39;</span>
    <span class="n">backup_url</span> <span class="o">=</span> <span class="n">capture_heroku_command</span> <span class="s1">&#39;pgbackups:url&#39;</span>
    <span class="n">backup_filename</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Heroku</span><span class="o">::</span><span class="no">Command</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">selected_application</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">xmlschema</span><span class="si">}</span><span class="s2">.dump&quot;</span>
    <span class="n">backup_data</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get_response</span><span class="p">(</span><span class="no">URI</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">backup_url</span><span class="p">))</span><span class="o">.</span><span class="n">body</span>
    <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">S3Object</span><span class="o">.</span><span class="n">store</span> <span class="n">backup_filename</span><span class="p">,</span> <span class="n">backup_data</span><span class="p">,</span> <span class="no">HEROKU_BACKUP_BUCKET</span>
  <span class="k">end</span>
  
  <span class="n">task</span> <span class="ss">:connect_to_s3</span> <span class="k">do</span>
    <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection!</span><span class="p">(</span>
      <span class="ss">:access_key_id</span>     <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AMAZON_ACCESS_KEY_ID&#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;AMAZON_SECRET_ACCESS_KEY&#39;</span><span class="o">]</span><span class="p">)</span>
    <span class="k">begin</span>
      <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Bucket</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="no">HEROKU_BACKUP_BUCKET</span><span class="p">)</span>
    <span class="k">rescue</span> <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">NoSuchBucket</span>
      <span class="no">AWS</span><span class="o">::</span><span class="no">S3</span><span class="o">::</span><span class="no">Bucket</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="no">HEROKU_BACKUP_BUCKET</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
<span class="k">end</span>

<span class="kp">private</span>

<span class="k">def</span> <span class="nf">heroku_command</span><span class="p">(</span><span class="o">*</span><span class="n">cmds</span><span class="p">)</span>
  <span class="no">Heroku</span><span class="o">::</span><span class="no">Command</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">command</span><span class="p">(</span><span class="o">*</span><span class="n">cmds</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">capture_heroku_command</span><span class="p">(</span><span class="o">*</span><span class="n">cmds</span><span class="p">)</span>
  <span class="n">stdout</span> <span class="o">=</span> <span class="no">STDOUT</span>
  <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">out</span><span class="o">|</span>
    <span class="k">def</span> <span class="nc">out</span><span class="o">.</span><span class="nf">flush</span> <span class="p">;</span> <span class="k">end</span>
    <span class="vg">$stdout</span> <span class="o">=</span> <span class="n">out</span>
    <span class="n">heroku_command</span><span class="p">(</span><span class="o">*</span><span class="n">cmds</span><span class="p">)</span>
  <span class="k">end</span><span class="o">.</span><span class="n">string</span><span class="o">.</span><span class="n">chomp</span>
<span class="k">ensure</span>
  <span class="vg">$stdout</span> <span class="o">=</span> <span class="n">stdout</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">heroku_existing_backup?</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
  <span class="n">info</span> <span class="o">!~</span> <span class="sr">/no backups/i</span>
<span class="k">end</span>
</code></pre>
</div>


<p>
  Once installed you can run something like <code>bundle exec rake heroku:backup</code> or if you are not using bundler, <code>rake heroku:backup</code>. Assuming you have your S3 credentials setup in the ENV variables, it will find or create a private bucket on your S3 account and upload an app-named and time-stamped dump file to that new bucket. If necessary, it <strong>will delete your latest backup</strong> on Heroku to make room for this new one. The code should be easy to change, so flavor to taste.
</p>

<p>
  I tried to use the Heroku commands built into their plugin without resorting to command interpolation. The only problem was that the Heroku gem always wants to print to standard out and flush the buffer. So I created a few private helper methods that temporarily shim in a <code>$stdout</code> replacement that does not flush. This let's me run the Heroku commands from code and capture what would have been printed to standard out.
</p>

<p>
  Lastly, since I could not find a way to automate this on Heroku via their cron add-on, I simply added a <code>launchd</code> plist to my desktop Mac that hit a shell script in my project folder to run the rake task. It is way past my skills to try and get RVM to work in the <code>launchd.plist</code> system since it is not a true shell. This is why the shell script uses my system ruby (installed via MacPorts). Here is the shell script below and the launchd plist which I placed in <code>~/Library/LaunchAgents</code> with a name like <code>com.actionmoniker.backupMyApp.plist</code>. Just run <code>launchctl load ~/Library/LaunchAgents/com.actionmoniker.backupMyApp.plist</code> and this will run at 4am every morning. If any one finds out how to automate the execution of this rake task on Heroku, please drop me a line!
</p>

<div class="highlight"><pre><code class="bash"><span class="c">#! /bin/zsh</span>
<span class="nb">source</span> /Users/kencollins/.zshenv
<span class="nb">cd</span> /Users/kencollins/repos/myapp <span class="o">&amp;&amp;</span> /opt/local/bin/rake heroku:backup
</code></pre>
</div>

<div class="highlight"><pre><code class="html"><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">&quot;1.0&quot;</span><span class="nt">&gt;</span>
<span class="nt">&lt;dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;string&gt;</span>com.actionmoniker.backupMyApp<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;</span>
    <span class="nt">&lt;string&gt;</span>/Users/kencollins/repos/myapp/lib/bin/backup.sh<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;/array&gt;</span>
  <span class="nt">&lt;key&gt;</span>StartCalendarInterval<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;dict&gt;</span>
    <span class="nt">&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;integer&gt;</span>0<span class="nt">&lt;/integer&gt;</span>
    <span class="nt">&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;</span>
    <span class="nt">&lt;integer&gt;</span>4<span class="nt">&lt;/integer&gt;</span>
  <span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/dict&gt;</span>
<span class="nt">&lt;/plist&gt;</span>
</code></pre>
</div>



]]>
    </content>
 </entry>
 
 <entry>
   <title>Pyr Pressure</title>
   <link href="http://metaskills.net/2010/12/29/pyr-pressure"/>
   <updated>2010-12-29T00:00:00-05:00</updated>
   <id>http://metaskills.net/2010/12/29/pyr-pressure</id>
   <content type="html">
     <![CDATA[<p>
  <span class="photofancy floatr ml20"><img src="/assets/sasha.png" width="284" height="376" alt="Sasha - Our Great Pyrenees"></img></span>
  It's a shame I do not do lifestyle posts more often, but with the <a href="/2010/12/27/let-it-go-moving-from-mephisto-to-jekyll/">new blog</a> I hope to change that. To that end, this article is dedicated to our Great Pyrenees Sasha who passed away from bone cancer last month. She was just 7 years old and we only had 3 weeks of good times from the point she was diagnosed with osteosarcoma, a form of bone cancer. I am sure everyone loves their pet(s), we even have another dog and 3 cats. But there is something about a large breed, perhaps more so a Great Pyrenees, that made our loss really painful. It was also the first time I heard about the rainbow bridge, total tear buster.
</p>

<p>
  Luckily for us, we have a personal friend that breeds Great Pyrenees show dogs in Smithfield, VA and she just so happens to have had a new litter. Determined to turn a bad situation into something positive, we just up'ed our family by two more puppy dogs. You could say I RAID-1'ed my pyr puppies. So we now have a little boy and girl from the same litter. His name is Remy LeBeau and is on the left and her name is Sonya, pictured on the right.
</p>

<p class="clearfix">
  <span class="photofancy floatl mr20"><img src="/assets/pyrpups.png" width="350" height="325" alt="Remy LeBeau & Sonya - Our New Pyr Puppies"></img></span>
  They are getting tons of love, attention, and good food. Raising two puppy dogs is so much fun, but it takes a lot of time and patience, especially when training them to go out doors with all the snow we have gotten lately. In the future Kelly and I will enjoy walking these guys around Colonial Williamsburg. Since they look like sheep, our Border Collie will corral them indoors for us as he did for Sasha. We can already tell that Remy will be the protector of the household and probably weigh in around 150 pounds when he grows up.
</p>

]]>
    </content>
 </entry>
 
 <entry>
   <title>Let It Go - Moving From Mephisto To Jekyll</title>
   <link href="http://metaskills.net/2010/12/27/let-it-go-moving-from-mephisto-to-jekyll"/>
   <updated>2010-12-27T00:00:00-05:00</updated>
   <id>http://metaskills.net/2010/12/27/let-it-go-moving-from-mephisto-to-jekyll</id>
   <content type="html">
     <![CDATA[<p>
  Welcome to the new MetaSkills.net! I have moved from Mephisto to <a href="https://github.com/mojombo/jekyll">Jekyll</a> and done a complete rewrite of the presentation layer to the latest web standards as a way of staying somewhat sharp with the latest HTML5/CSS3 hotness. In this article, I would like to cover all the gory details of what I learned about moving to Jekyll and the various techniques I have used for the site's CSS. But first a small history lesson. 
</p>

<p>
  If you are somewhat new to rails, Mephisto was one of the greatest open source blog engines a <a href="/2008/03/22/metaskills-net-reborn-on-mephisto/">ruby developer could work with</a>. But ruby, and especially rails, is a fast paced landscape, making it hard to keep any CMS project up to date. Options like file storage, comment moderation, templating languages, hosting locations and more are all very hard to embody in one project. I think that is why Mephisto's creator, <a href="http://twitter.com/#!/technoweenie">Rick Olson</a> (@technoweenie), <a href="http://techno-weenie.net/2010/6/23/you-can-let-go-now/">announced that he was dropping the project</a>. Good for him and many thanks for his hard work on all the open source projects he has contributed to! So let's talk about Jekyll et al.
</p>


<h2>Migrating Mephisto Data</h2>

<p>
  So maybe you have an old Mephisto install that you would like to migrate to Jekyll? If so, I have <a href="https://gist.github.com/756111">posted a gist</a> of some rails 3 models that I used to export my data from MySQL to static files following the format required by Jekyll. Simply populate a new rails 3 project with these, fire up a console and do <code>Site.export_jekyll</code>. This will create a folder in <code>tmp/jekyll_posts</code> and write a file for each Mephisto article. The posts will contain the YAML front matter for jekyll and hopefully a good starting point of the categories you had assigned to that post. As a bonus, the export will create a <code>tmp/jekyll_posts/rewrites.txt</code> file that will be very useful to include in a .htaccess file of your jekyll project. An example below.
</p>

<div class="highlight"><pre><code class="apache"><span class="nb">RewriteRule</span> ^2010/8/19/how-to-clean-a-campfire-room-of-uploads$ <span class="sx">/2010/08/19/how-to-clean-a-campfire-room-of-uploads/</span> [L]
</code></pre>
</div>

<p>
  Also included in the gist is a <code>Site.export_jskit</code> method that will generate an XML file of  your comments to import into Disqus. Though I was able to import my Mephisto comments into Disqus and see them linked from the admin interface, I have yet to get them to show up on the new site. I have a support request open with Disqus and will update this article and the gist with any new information.
</p>


<h2>Using Jekyll</h2>

<p>
  The best way you can learn how to use Jekyll is to <a href="https://github.com/mojombo/jekyll/wiki/Sites">review code of the sites</a> that use it. If you want to learn more about how I have implemented jekyll, you could <a href="https://github.com/metaskills/metaskills.net">browse my source</a> on github.
</p>

<p>
  Like many others, I have created a tasks directory in my project root with some executable scripts that help me author, publish and deploy my site. Here are some examples.
</p>

<div class="highlight"><pre><code class="bash"><span class="c">#!/usr/bin/env zsh</span>
<span class="c"># File: tasks/scss</span>
<span class="c"># Handy to watch for scss file changes while designing.</span>
sass --scss --watch _sass:_site/resource --style compact --no-cache

<span class="c">#!/usr/bin/env zsh</span>
<span class="c"># File: tasks/jekyll</span>
<span class="c"># Create the site and tidy it.</span>
setopt rmstarsilent
rm -rf _site/* <span class="o">&amp;&amp;</span> <span class="se">\</span>
  sass --style compressed _sass/site.scss:resource/site.css <span class="o">&amp;&amp;</span> <span class="se">\</span>
  bundle <span class="nb">exec </span>jekyll <span class="o">&amp;&amp;</span> <span class="se">\</span>
  find _site -name <span class="s2">&quot;*.html&quot;</span> -exec tidy -config <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/tidy.conf <span class="o">{}</span> <span class="se">\;</span>
  
<span class="c">#!/usr/bin/env zsh</span>
<span class="c"># File: tasks/deploy</span>
<span class="c"># Build and deploy to mini.</span>
./tasks/jekyll <span class="o">&amp;&amp;</span> <span class="se">\</span>
  rsync -avz --delete _site/ mini:/Library/WebServer/hosts/metaskills.net <span class="o">&amp;&amp;</span> <span class="se">\</span>
  mini sudo apachectl restart
</code></pre>
</div>

<p>
  The first one, <code>task/scss</code> allowed me to author my site's CSS using <a href="http://sass-lang.com/">SASS</a> and its newer SCSS syntax, more on that later. This task simply let me publish my site and then style it later by easily saving the source SCSS file and avoiding a long running jekyll command. The second <code>task/jekyll</code> is my own long winded jekyll command. Basically it will compile my SCSS file, execute my bundled jekyll binary, then post process all my HTML files with tidy. I spent a long time coming up with <a href="https://github.com/metaskills/metaskills.net/blob/master/tidy.conf">an appropriate tidy.conf compatible with HTML5 standards.</a> Perhaps you may find it useful. Lastly, the <code>task/deploy</code> is just a simple wrapper to my own jekyll command and a final rsync command to my Mac Mini web server. I restart the web server just in case I have made changes to my <code>.htaccess</code> file.
</p>


<h2>HTML5</h2>

<p>
  A personal tech blog is a great platform to try out new things, including the semantic goodness that HTML5 offers. Frankly, it was way past time for me to learn and I found <a href="http://diveintohtml5.org/">Mark Pilgrim's - Dive Into HTML5</a> really helpful on the topic. The final structure of the blog came out nicely. A post is contained in its own <code>&lt;article&gt;</code> element with <code>&lt;header&gt;</code> and <code>&lt;footer&gt;</code> elements in between. A great way to organize comments and new elements like the <code>&lt;time&gt;</code> so you can associate a machine readable publication date to your post.
</p>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;article</span> <span class="na">id=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;header&gt;</span>
    <span class="nt">&lt;time</span> <span class="na">pubdate</span> <span class="na">datetime=</span><span class="s">&quot;2010-12-27T00:00:00-05:00&quot;</span><span class="nt">&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;day&quot;</span><span class="nt">&gt;</span>27<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;month&quot;</span><span class="nt">&gt;</span>Dec<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;year&quot;</span><span class="nt">&gt;</span>2010<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;/time&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Let It Go - Moving From Mephisto To Jekyll<span class="nt">&lt;/h1&gt;</span>
  <span class="nt">&lt;/header&gt;</span>
  ...
  <span class="nt">&lt;footer</span> <span class="na">id=</span><span class="s">&quot;disqus_thread&quot;</span><span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/footer&gt;</span>
<span class="nt">&lt;/article&gt;</span>
</code></pre>
</div>


<h2>Presentation - SASS</h2>

<p>
  This was the second time I have used SASS from the start of a project. The first time was almost a year ago and I must say, it has gotten much nicer with the newer SCSS format. While writing <a href="https://github.com/metaskills/metaskills.net/blob/master/_sass/site.scss">my lengthy SCSS file</a>, I found the following linear organization method very helpful. </p>

<ul>
  <li><strong>Font Declarations</strong> - With Mixins For Usage.</li>
  <li><strong>Global Variables</strong> - Grids, Colors...</li>
  <li><strong>Vendor Mixins</strong> - Gradients, Shadows, Transformations...</li>
  <li><strong>Component Mixins</strong> - Links, Navigation, Fancy Images, Comments...</li>
  <li><strong>Layout Mixins</strong> - Posts, Footer, Excerpts, Etc</li>
  <li><strong>Final Layout</strong> - Site Structure (using mixins)</li>
</ul>

<p>
  I think this is important, because it outlines a radical shift from writing raw CSS and really flexes SASS's <code>@mixin</code> and <code>@include</code> features. First it is important to point out that CSS falls into two categories, layout &amp; presentation. Layout CSS is akin to using <code>&lt;table&gt;</code> tags in the old days. It is CSS that controls the structure of your site. After that, all CSS is presentation oriented. It is there to make things look pretty.
</p>

<p>
  Back in the day, I would put my layout styles at the beginning of my stylesheet, then finish with abstract presentation classes. This works, but sometimes you find yourself deep into a CSS corner and having to whip out <code>!important</code> declarations to bail yourself out. When writing with SASS, the layout styles are now my last declarations. Why? Because you can include your earlier coded design components as a last step within the structure declarations, thereby ensuring their scope is locked down to the explicit node of your choosing. This helps you keep your layout and presentation CSS in separate and manageable chunks that have logical names while keeping your SASS file from looking like one big long procedural function. It's OO-CSS at its best!
</p>

<div class="highlight"><pre><code class="text">...
section#page { 
  width: $pagewidth; 
  margin: 0px auto;
  min-height: 800px;
  @include cmpnt-links;
  section#content {
    float: right;
    width: $c8width;
    padding-top: $hdrheight + 20px;
    padding-bottom: 20px;
    @include layout-excerpt;
    @include layout-post;
    @include cmpnt-flash;
    @include cmpnt-blockquote;
  }
...
</code></pre>
</div>


<h2>Presentation - Simple Grid</h2>

<p>
  I have previously used CSS grids like <a href="http://960.gs/">960.gs</a> and the <a href="http://www.1kbgrid.com/">1Kb Grid</a>. However, for this project, I decided to flex SASS and my previous CSS knowledge of positioning and clearing for a leaner layout structure. These SCSS variables were enough to let me build out the new layout.
</p>

<div class="highlight"><pre><code class="ruby"><span class="vg">$cols</span><span class="p">:</span> <span class="mi">10</span><span class="p">;</span>
<span class="vg">$colwidth</span><span class="p">:</span> <span class="mi">80</span><span class="n">px</span><span class="p">;</span>
<span class="vg">$gutterwidth</span><span class="p">:</span> <span class="mi">20</span><span class="n">px</span><span class="p">;</span>
<span class="vg">$c1width</span><span class="p">:</span>  <span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">1</span><span class="p">;</span>
<span class="vg">$c2width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">1</span><span class="p">);</span>
<span class="vg">$c3width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
<span class="vg">$c4width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">3</span><span class="p">);</span>
<span class="vg">$c5width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">4</span><span class="p">);</span>
<span class="vg">$c6width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">5</span><span class="p">);</span>
<span class="vg">$c7width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">6</span><span class="p">);</span>
<span class="vg">$c8width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">7</span><span class="p">);</span>
<span class="vg">$c9width</span><span class="p">:</span>  <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">9</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">8</span><span class="p">);</span>
<span class="vg">$c10width</span><span class="p">:</span> <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="mi">9</span><span class="p">);</span>
<span class="vg">$pagewidth</span><span class="p">:</span> <span class="p">(</span><span class="vg">$colwidth</span> <span class="o">*</span> <span class="vg">$cols</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="vg">$gutterwidth</span> <span class="o">*</span> <span class="p">(</span><span class="vg">$cols</span> <span class="o">-</span> <span class="mi">1</span><span class="p">));</span>
</code></pre>
</div>


<h2>Presentation - Pseudo Generated Content</h2>

<div class="highlight"><pre><code class="html"><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;photobounding&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tl&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;tr&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;bl&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;br&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;photoborder&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;photo&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">&quot;/files/yourpicture.jpg&quot;</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="na">width=</span><span class="s">&quot;&quot;</span> <span class="na">height=</span><span class="s">&quot;&quot;</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre>
</div>

<p>
  We have all seen code like this! It is called divitis, the overuse of span or div elements to structure and style content. I am guilty of doing this too, in fact, that code is from my old blog's CSS convention page to make a fancy border around a photo. The new MetaSkills.net takes advantage of a pseudo generated content to style complex elements and avoid this. <span class="photofancy floatr mt20 mb10 ml20"><img src="/assets/jack.png" alt="Jack Has Many Things" width="320" height="214" /></span> I would like to show you a few examples, but first, learn from the master <a href="http://twitter.com/#!/necolas">Nicolas Gallagher</a> (@necolas) in a series of articles he published for <a href="http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/">backgrounds/borders</a>, <a href="http://nicolasgallagher.com/pure-css-speech-bubbles/">speach bubbles</a>, and <a href="http://nicolasgallagher.com/pure-css-gui-icons/">GUI icons</a> all using pseudo generated content with CSS.
</p>

<p>
  Using these techniques, I was able to accomplish all the complex styles like my Apple TV navigation and photo fancy borders with simple semantic elements. The image to the right is only surrounded by one <code>&lt;span class="photofancy"&gt;...&lt;/span&gt;</code> element since you can not generate pseudo content from a <code>&lt;img&gt;</code> tag. I also used pseudo generated content to remove excessive layout elements too. My complex headers use them to add multiple backgrounds where only one element resides in the code. Learn this technique, it keeps things very clean.
</p>


<h2>Zepto.js - Something You Need To Watch For</h2>

<p>
  Lastly, if you have not seen the <a href="https://github.com/madrobby/zepto">zepto.js</a> project, go check it out. It bills itself as the aerogel-weight mobile javascript framework. Besides being incredibly small, I think zepto has some incredible potential when used with backbone.js. I have never used jQuery and always looked at JavaScript thru the eye's of prototype since most of my JavaScript needs require rich objects first, and access to the DOM second. I'll make another post on Zepto and why I think it is so bad ass. I use it on the new MetaSkills.net to shim up my custom pygmentize theme.
</p>


<h2>In Closing</h2>

<p>
  I am really happy with the new layout and using Jekyll to publish my static blog. I even think the old content carried over well once I tweaked it to the new CSS conventions. One particular old article that embodies all the design aspects of the new layout is <a href="/2008/9/28/jack-has_many-things">Jack has_many :things</a>. It is about a plugin I wrote on grouping ActiveRecord has_many associations. Hope you find some time to try out Jekyll too and let me know what you think of my new site!
</p>


<h2>Resources</h2>

<ul>
  <li><a href="http://techno-weenie.net/2010/6/23/you-can-let-go-now/">You Can Let Go Now</a> - Mephisto ends</li>
  <li><a href="https://github.com/mojombo/jekyll">Jekyll Project</a> - A static blog/site generator</li>
  <li><a href="https://gist.github.com/756111">Migrate Mephisto Data</a> - A gist of rails 3 model files</li>
  <li><a href="https://github.com/metaskills/metaskills.net">MetaSkills.net Source</a> - On Github.com</li>
  <li><a href="http://diveintohtml5.org/">Dive Into HTML5</a></li>
  <li><a href="http://nicolasgallagher.com/multiple-backgrounds-and-borders-with-css2/">Multiple Backgrounds &amp; Borders With CSS2</a></li>
  <li><a href="http://nicolasgallagher.com/pure-css-speech-bubbles/">Pure CSS speech bubbles</a></li>
  <li><a href="http://nicolasgallagher.com/pure-css-gui-icons/">Pure CSS GUI Icons </a></li>
  <li><a href="https://github.com/madrobby/zepto">Zepto.js</a> - The aerogel-weight mobile javascript framework</li>
  
</ul>

]]>
    </content>
 </entry>
 
 <entry>
   <title>TinyTds - A modern, simple and fast FreeTDS library for Ruby using DB-Library</title>
   <link href="http://metaskills.net/2010/10/18/tinytds-a-modern-simple-and-fast-freetds-library-for-ruby-using-db-library"/>
   <updated>2010-10-18T00:00:00-04:00</updated>
   <id>http://metaskills.net/2010/10/18/tinytds-a-modern-simple-and-fast-freetds-library-for-ruby-using-db-library</id>
   <content type="html">
     <![CDATA[<p>I just finished the first cut of learning C extensions for ruby and I <a href="http://github.com/rails-sqlserver/tiny_tds">present The TinyTds gem</a>. It is meant to serve the extremely common use-case of connecting, querying and iterating over results to Microsoft SQL Server databases from ruby. Even though it uses FreeTDS's DB-Library, it is NOT meant to serve as direct 1:1 mapping of that complex C API</p>

<p>The benefits are speed, automatic casting to ruby primitives, and proper encoding support. It converts all SQL Server datatypes to native ruby objects supporting :utc or :local time zones for time-like types. To date it is the only ruby client library that allows client encoding options, defaulting to UTF-8, while connecting to SQL Server. It also properly encodes all string and binary data. The motivation for TinyTds is to become the de-facto low level connection mode for the SQL Server adapter for ActiveRecord. For further details see the special thanks to Erik Bryn for his help, the authors/contributors of the Mysql2 gem for inspiration, and Yehuda Katz for articulating ruby's need for proper encoding support. Please read up on it here.</p>


]]>
    </content>
 </entry>
 
 
</feed>
