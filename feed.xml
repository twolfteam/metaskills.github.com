<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>MetaSkills.net</title>
 <link href="http://metaskills.net/feed.xml" rel="self"/>
 <link href="http://metaskills.net/"/>
 <updated>2013-12-24T22:13:45-05:00</updated>
 <id>http://metaskills.net/</id>
 <author>
   <name>Ken Collins</name>
   <email>ken@metaskills.net</email>
 </author>

 
 <entry>
   <title>Instrumenting Your Code With ActiveSupport Notifications</title>
   <link href="http://metaskills.net/2013/12/15/instrumenting-your-code-with-activesupport-notifications"/>
   <updated>2013-12-15T00:00:00-05:00</updated>
   <id>http://metaskills.net/2013/12/15/instrumenting-your-code-with-activesupport-notifications</id>
   <content type="html">
     <![CDATA[<p><span class="photofancy floatr ml20 mb10">
  <img src="/assets/asn_log_lady.jpg" alt="Moving past the supernatural ability to garner information from the log!" width="300" height="243" />
</span>
Have you ever wondered how tools like New Relic are able to gain valuable metrics to your Rails application&#39;s internals? Or maybe you are interested in learning how to write your own libraries and gems so they can be instrumented using those same techniques? Once again the answer is to look deep into the Rails source code – and the answer is <a href="http://apidock.com/rails/ActiveSupport/Notifications"><code>ActiveSupport::Notifications</code></a>. A simple and powerful instrumentation API for Ruby available in Rails v3.0 and upward.</p>

<p>Today I want to share a working example of how you might use ActiveSupport::Notifications. Instead of presenting some contrived code, I thought it would be fun to <a href="http://vimeo.com/17420638#t=27m27s">freedom-patch</a> a popular gem so that we can garner supernatural metrics that would have otherwise been lost or hidden deep in our log. For this exercise I have chosen the <a href="https://github.com/nulayer/subexec">Subexec</a> gem. Subexec is a simple library that spawns an external command with an optional timeout parameter. It is used by other gems like <a href="https://github.com/minimagick/minimagick">MiniMagick</a> – a popular minimal replacement for RMagick.</p>

<h2 id="toc_0">Building Subexec::Notifications</h2>

<p>Our goal will be to build a new gem called subexec-notifications that instruments all commands run by the Subexec library. Once completed, third-party subscribers would be able collect these metrics thereby opening up developer/operational insights into how long certain commands were taking and on which server(s). </p>

<p>Lucky for us, the Subexec gem has one interface, the <code>Subexec#run!</code> method. So our work is going to be straight forward. All we have to do is <a href="http://erniemiller.org/2011/02/03/when-to-use-alias_method_chain/">alias method chain</a> that instance method and wrap it with some instrumentation. Assuming you are up to speed on this practice, here is our new implementation.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">run_with_notifications!</span>
  <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="nb">sub</span><span class="p">:</span> <span class="nb">self</span><span class="p">,</span> <span class="ss">hostname</span><span class="p">:</span> <span class="no">Socket</span><span class="o">.</span><span class="n">gethostname</span><span class="p">}</span>
  <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">.</span><span class="n">instrument</span> <span class="s2">&quot;subexec.run&quot;</span><span class="p">,</span> <span class="n">payload</span> <span class="k">do</span>
    <span class="n">run_without_notifications!</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>This small snippet of code exemplifies how simple it is to instrument our code. The Notifications instrument class method takes two arguments, a string for the name and an optional payload hash. The name will be used by subscribers and the payload hash can contain anything you want. </p>

<p>Since the Subexec instance has tons of valuable information like the commands output, process id, exit status, and the command string itself - I decided to include it with our payload. The host name is provided with the payload to help us aggregate or subdivide our metrics for each server.</p>

<p>Believe it or not, that pretty much wraps up all that is needed for our new gem&#39;s code. Everything else like tests and gem structure are orthogonal to our learning today. But please, browse the entire <a href="https://github.com/customink/subexec-notifications">subexec-notifications</a> gem if you are interested in how it is put together.</p>

<h2 id="toc_1">Choosing A Metrics Service</h2>

<p>So now we have a way to instrument all of our system commands, but how do we collect and view that data? To be honest, your options are incredibly numerous at this point. While learning ActiveSupport::Notifications myself, these two services kept appearing.</p>

<ul>
<li><a href="http://www.datadoghq.com">Datadog - Monitoring Service</a></li>
<li><a href="https://metrics.librato.com">Librato - Highly Scalable Metrics, Monitoring &amp; Alerts</a></li>
</ul>

<p>My examples below will use Librato since I found their service extremely simple to use. I was able to quickly get metrics submitted to them and viewable via their dashboard gauges. Librato also has a very nice presence on Github and some impressive tools for Ruby. Datadog is no slouch in any of these areas either. So please use what best fits your own needs.</p>

<p>IMPORTANT: The example Rails application code that follows makes direct use of the <a href="https://github.com/librato/librato-metrics">librato-metrics</a> gem. This means that submissions will happen synchronously while your application is running. You would never do this in your Rails application! If you choose to use Librato, please use the <a href="https://github.com/librato/librato-rails">librato-rails</a> gem instead. Metrics are then delivered asynchronously behind the scenes so they won&#39;t affect the performance of your requests. Other possibilities would be to use background jobs or some other worker message queue.</p>

<h2 id="toc_2">Subscribing To Events</h2>

<p>Assuming we have a Rails application that makes use of MiniMagick, Subexec or both, all we have to do now is bundle up our new notification gem along with librato-metrics.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In Gemfile</span>

<span class="n">gem</span> <span class="s1">&#39;subexec-notifications&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;librato-metrics&#39;</span>
</code></pre></div>
<p>Now we need to subscribe to the <code>subexec.run</code> events that we instrumented in the subexec-notifications gem. For a Rails application, this is best done in an initializer named after the gem.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In config/initializers/subexec_notifications.rb</span>

<span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">.</span><span class="n">subscribe</span> <span class="s1">&#39;subexec.run&#39;</span> <span class="k">do</span> <span class="o">|*</span><span class="n">args</span><span class="o">|</span>
  <span class="no">Subscribers</span><span class="o">::</span><span class="no">SubexecLibrato</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<h2 id="toc_3">Publishing Metrics</h2>

<p>As you can see in the code above, subscribing to an event will yield an array of arguments. Technically, these will be the name of the event, a few timestamps, a unique id, and the payload. Because dealing with individual arguments is not very object-oriented, I always recommend creating an event object using the <code>ActiveSupport::Notifications::Event</code> class. It consumes these arguments and gives you a clean interface to the <code>duration</code> of the event, <code>payload</code>, and more.</p>

<p>To accomplish this in one place for our publishing code, I created a simple base class for all our subscribers to inherit from. This base class creates our <code>event</code> object as well as a <code>process</code> method that subclasses must implement.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In app/models/subscribers/base.rb</span>

<span class="k">module</span> <span class="nn">Subscribers</span>
  <span class="k">class</span> <span class="nc">Base</span>

    <span class="kp">attr_reader</span> <span class="ss">:event</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
      <span class="vi">@event</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Notifications</span><span class="o">::</span><span class="no">Event</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
      <span class="n">process</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">process</span>
      <span class="k">raise</span> <span class="no">NotImplementedError</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Now to the fun part, sending some metrics to Librato. Below is the full implementation of our <code>SubexecLibrato</code> event consumer. This creates two different types of metrics. One for each command/binary that was run and the other for the host the commands are run on. Each of these metrics will allow us to build some interesting gauges. The Librato site has a great developer section titled <a href="http://dev.librato.com/v1/metrics">What Are Metrics</a> that can guide you on what type of data you may want to submit.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In app/models/subscribers/subexec_librato.rb</span>

<span class="k">module</span> <span class="nn">Subscribers</span>
  <span class="k">class</span> <span class="nc">SubexecLibrato</span> <span class="o">&lt;</span> <span class="no">Base</span>

    <span class="k">def</span> <span class="nf">process</span>
      <span class="nb">sub</span>   <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">payload</span><span class="o">[</span><span class="ss">:sub</span><span class="o">]</span>
      <span class="n">dur</span>   <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">duration</span>
      <span class="n">type</span>  <span class="o">=</span> <span class="nb">sub</span><span class="o">.</span><span class="n">command</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">first</span>
      <span class="n">host</span>  <span class="o">=</span> <span class="n">event</span><span class="o">.</span><span class="n">payload</span><span class="o">[</span><span class="ss">:hostname</span><span class="o">]</span>
      <span class="n">time</span>  <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span>
      <span class="no">Librato</span><span class="o">::</span><span class="no">Metrics</span><span class="o">.</span><span class="n">submit</span> <span class="s1">&#39;subexec.hosts&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="n">measure_time</span><span class="p">:</span> <span class="n">time</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="n">dur</span><span class="p">,</span> <span class="ss">source</span><span class="p">:</span> <span class="n">host</span><span class="p">}</span>
      <span class="no">Librato</span><span class="o">::</span><span class="no">Metrics</span><span class="o">.</span><span class="n">submit</span> <span class="s1">&#39;subexec.types&#39;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="n">measure_time</span><span class="p">:</span> <span class="n">time</span><span class="p">,</span> <span class="ss">value</span><span class="p">:</span> <span class="n">dur</span><span class="p">,</span> <span class="ss">source</span><span class="p">:</span> <span class="n">type</span><span class="p">}</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<h2 id="toc_4">Viewing Metrics</h2>

<p>Here are what each of these metrics look like in Librato. To generate some commands, I wrote a small tests case that did some random MiniMagick commands along with a few <code>echo</code> and <code>uptime</code> commands. All of these ran on my local machine.</p>

<div class="center">
  <span class="photofancy">
    <img src="/assets/asn_metrics_command.png" alt="Librato - Subexec Commands" width="650" />
  </span>
</div>

<div class="center">
  <span class="photofancy">
    <img src="/assets/asn_metrics_host.png" alt="Librato - Subexec Hosts" width="650" />
  </span>
</div>

<h2 id="toc_5">In Closing</h2>

<p>Hopefully these simple examples we built will help get you excited both about instrumenting your application as well as collecting and viewing those metrics. If you are hungry for more, check out the links in the resources below. You can even dig deep into the Rails source to see where and how it uses ActiveSupport::Notifications. Thanks!</p>

<h2 id="toc_6">Other Resources</h2>

<ul>
<li><a href="http://apidock.com/rails/ActiveSupport/Notifications">APIdock ActiveSupport::Notifications</a></li>
<li><a href="https://speakerdeck.com/nextmat/digging-deep-with-activesupportnotifications">Digging Deep with ActiveSupport::Notifications</a></li>
<li><a href="https://github.com/customink/subexec-notifications">Final Subexec::Notifications Gem</a></li>
<li><a href="http://www.datadoghq.com">Datadog - Monitoring Service</a></li>
<li><a href="https://github.com/DataDog">Datadog - On Github</a></li>
<li><a href="https://metrics.librato.com">Librato - Highly Scalable Metrics, Monitoring &amp; Alerts</a></li>
<li><a href="https://github.com/librato">Librato - On Github</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Using Dotenv In Rails</title>
   <link href="http://metaskills.net/2013/10/03/using-dotenv-in-rails"/>
   <updated>2013-10-03T00:00:00-04:00</updated>
   <id>http://metaskills.net/2013/10/03/using-dotenv-in-rails</id>
   <content type="html">
     <![CDATA[<p>Environment variables as a configuration means are everywhere in Ruby. For instance, ActiveRecord will use the single <code>DATABASE_URL</code> environment variable for every part of it&#39;s configuration, no database.yml needed! If you are not on board with environment variables, check out <a href="http://12factor.net/config">The Twelve-Factor App</a> for configuration. This is exactly how good software platforms like <a href="https://www.heroku.com">Heroku</a> work, all through environment variables.</p>

<p>But using environment variables in a Rails application can be tricky. During local development, you may not want to set everything in your Bash or ZSH profile. Perhaps you want per project settings. And then there is the trouble of using different environment variables when running your tests. Enter the <a href="https://github.com/bkeepers/dotenv">Dotenv</a> project. </p>

<p>In my examples below of how to integrate Dotenv, I will be using @ecbypi&#39;s fork until this <a href="https://github.com/bkeepers/dotenv/pull/61">pull request for overloading environment variables</a> is accepted. This pull request is key to overriding development or local settings for our Rails test environment. If you like how these examples look below, weigh in on that pull request and lobby for a fresh hot Dotenv release. </p>

<p>Let&#39;s get started. First, let&#39;s add the gem to your Rails project&#39;s Gemfile.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In Gemfile</span>
<span class="n">gem</span> <span class="s1">&#39;dotenv&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s1">&#39;ecbypi/dotenv&#39;</span><span class="p">,</span> <span class="ss">branch</span><span class="p">:</span> <span class="s1">&#39;overload-environment-variables&#39;</span>
</code></pre></div>
<p>Next up, open your <code>config/application.rb</code> and add this line right after the require &#39;rails/all&#39; line. This will require the Dotenv gem, then load your own per-developer local settings (if present), then a .env file that matches the current <code>Rails.env</code>.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In config/application.rb</span>
<span class="nb">require</span> <span class="s1">&#39;rails/all&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;dotenv&#39;</span> <span class="p">;</span> <span class="no">Dotenv</span><span class="o">.</span><span class="n">load</span> <span class="s2">&quot;.env.local&quot;</span><span class="p">,</span> <span class="s2">&quot;.env.</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2">&quot;</span>
</code></pre></div>
<p>Next, create individual <code>.env.RAILS_ENV</code> files with your configurations. YMMV on this one, but the idea is to check all of these in. The <code>.env.development</code> will hold all the default configurations for a new developer to get up and running quickly. The <code>.env.test</code> will hold all the configurations for your test runs. Past that, how you handle the production file or not, is left up to you. In my examples below, we are setting the environment variable for the Awesome gem.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ echo &quot;AWESOME_GEM_URL=https://awesome.dev&quot;          &gt; .env.development
$ echo &quot;AWESOME_GEM_URL=https://sandbox.awesome.com&quot;  &gt; .env.test
$ echo &quot;AWESOME_GEM_URL=https://awesome.com&quot;          &gt; .env.production
</code></pre></div>
<p>This covers our bases, but what if a developer wants to override a configuration. They can use good ol&#39; environment variables and get the behavior they expect. Or they create their own <code>.env.local</code> file and set their configurations there. The benefit of the local file is that your Rails application via the console or the development server (for example Pow) will automatically get the same thing when using the .env.local file. Oh yea, it is a good idea to add the this file to your <code>.gitignore</code>.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ echo &quot;AWESOME_GEM_URL=https://my-awesome.dev&quot;       &gt; .env.local
</code></pre></div>
<p>Now, one last thing. We need to make sure that our tests do not use any real, development or local environment settings. This is where @ecbypi overload feature comes in handy. I have added this to the top of the Rails <code>test/test_helper.rb</code> file. </p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In test/test_helper.rb</span>
<span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;test&quot;</span>
<span class="o">+</span><span class="nb">require</span> <span class="s1">&#39;dotenv&#39;</span> <span class="p">;</span> <span class="no">Dotenv</span><span class="o">.</span><span class="n">overload</span> <span class="s2">&quot;.env.test&quot;</span>
</code></pre></div>
<p>Happy environment usage! Have you been solving environment and application configuration in a different way (don&#39;t say YAML), if so, I would love to hear about it!</p>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Jekyll Tips And Tricks</title>
   <link href="http://metaskills.net/2013/09/02/jekyll-tips-and-tricks"/>
   <updated>2013-09-02T00:00:00-04:00</updated>
   <id>http://metaskills.net/2013/09/02/jekyll-tips-and-tricks</id>
   <content type="html">
     <![CDATA[<p><aside class="flash_info">
  <a href="http://www.booster.com/757rb?utm_source=metaskills&utm_medium=site">
    <img src="/assets/757rb_shirt_ladies.jpg" alt="757.RB T-Shirt" width="50" class="floatr ml10 mb10 mr10" style="border: 2px solid white;" />
    <img src="/assets/757rb_shirt_unisex.jpg" alt="757.RB T-Shirt" width="50" class="floatr ml10 mb10" style="border: 2px solid white;" />
    IT&#39;S DANGEROUS TO GO ALONE! TAKE THIS!<br>
    Our t-shirt fund-raiser on Booster.com only has a few days left. Don&#39;t miss out on this 8-bit-tacular Ruby shirt!
    Available in men, ladies &amp; youth sizes!
  </a>
</aside></p>

<div class="h10"></div>

<p><a href="http://757rb.org?utm_source=metaskills&utm_medium=site">
  <img class="floatr ml20 mb20" src="/assets/757rb_site.png" alt="757.RB New Website" width="275" />
</a>
Last week, our localy Ruby community in Norfolk, VA re-launched the <a href="http://757rb.org?utm_source=metaskills&amp;utm_medium=site">757rb.org</a> website. This was the third static website I have build using <a href="http://jekyllrb.com">Jekyll</a> and the second since the official v1.0.0 release. It was also completely different than any creative approach I have taken on. Please, go ahead and <a href="http://757rb.org?utm_source=metaskills&amp;utm_medium=site">check it out</a> real quick, I will wait.</p>

<p>Many things have changed with Jekyll over the years and it is always fun to stay current with the latest technical aspects of the tools we use. So I thought I would put a few of my own techniques out there to see what others think. If you find any of these useful or know of better ways to solve them, let me know.</p>

<h2 id="toc_0">Use Task Scripts</h2>

<p>I have no idea where I picked this up, but the general idea is to create a <code>tasks</code> directory that holds a set of useful shell scripts. My Jekyll projects usually contain the following executables.</p>

<p><aside class="flash_warn">
  Remember to add the tasks directory to jekyll&#39;s exclude array in your config file(s).
</aside></p>

<ul>
<li>jekyll</li>
<li>jekyll-livereload</li>
<li>deploy</li>
<li><a href="https://gist.github.com/metaskills/6414700">optipng</a></li>
<li><a href="https://gist.github.com/metaskills/6414713">post</a></li>
</ul>

<p>The <code>jekyll</code> wrapper script is only useful to those projects that need to perform additional steps before or after building the site. In the example below, we are cleaning up the site with <code>tidy</code>. Notice the usage of <code>$*</code> after the jekyll build command. This is akin to Ruby&#39;s reverse splat args. It allows you to send any arguments to your own script that the jekyll command would normally take.</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> -e

jekyll build <span class="nv">$*</span>
find _site -name <span class="s2">&quot;*.html&quot;</span> -exec tidy -config <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>/tidy.conf <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div>
<p>I will cover <code>jekyll-livereload</code> and <code>deploy</code> later in this post. The <a href="https://gist.github.com/metaskills/6414700">optipng</a> script is a useful command line utility that compresses assets. While the <a href="https://gist.github.com/metaskills/6414713">post</a> script allows you to easily create a new post. For example:</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ ./tasks/post &quot;Jekyll Tips And Tricks&quot;
</code></pre></div>
<h2 id="toc_1">Development &amp; Production Environments</h2>

<p>Sometimes you do not want a production feature turned on when developing your site locally. Blogs backed by <a href="https://disqus.com">DISQUS</a> comments would be a great example. Likewise, maybe you want to develop a new feature that you can see during local development only to be enabled at a later time. Thanks to v1.0 of Jekyll and up, this is easy to do with different configuration files.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In _config.yml</span>
<span class="ss">production</span><span class="p">:</span> <span class="kp">false</span>
<span class="ss">timezone</span><span class="p">:</span> <span class="s2">&quot;America/New_York&quot;</span>

<span class="c1"># In _config_production.yml</span>
<span class="ss">production</span><span class="p">:</span> <span class="kp">true</span>
<span class="ss">timezone</span><span class="p">:</span> <span class="s2">&quot;America/New_York&quot;</span>
</code></pre></div>
<p>Here we have the default <code>_config.yml</code> acting as our default development configuration. It sets the production site variable to false while the <code>_config_production.yml</code> sets it to true. Remember the <code>deploy</code> task I mentioned above? This is a great place to pass down the <code>--config</code> argument to your own jekyll task. Here is a partial example of a deploy task.</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> -e

./tasks/jekyll --config _config_production.yml
</code></pre></div>
<p>Now you can write code like the following examples in your layouts or includes. Jekyll will automatically take any additional top level configurations and turn them into properties on the <code>site</code> object.</p>
<div class="highlight"><pre><code class="html language-html" data-lang="html"><span class="c">&lt;!-- Only show DISQUS comments in production. --&gt;</span>
{% if site.production %}
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
  <span class="kd">var</span> <span class="nx">disqus_shortname</span> <span class="o">=</span> <span class="s1">&#39;...&#39;</span><span class="p">;</span>
  <span class="p">...</span>
<span class="nt">&lt;/script&gt;</span>
{% endif %}

<span class="c">&lt;!-- Developing a local only feature not ready for production. --&gt;</span>
{% unless site.production %}
<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;promotion&quot;</span><span class="nt">&gt;</span>
  <span class="nt">&lt;header&gt;</span>T-SHIRT FUNDRAISER!<span class="nt">&lt;/header&gt;</span>
  ...
<span class="nt">&lt;/section&gt;</span>
{% endunless %}
</code></pre></div>
<h2 id="toc_2">Use The Asset Pipeline</h2>

<p>If you have written Jekyll sites prior to the v1.0 release you have likely concocted up your own scripts to use <a href="http://coffeescript.org">CoffeeScript</a>, <a href="http://sass-lang.com">Sass</a> or both. Love it or hate it, as Ruby developers we got it good with Sprockets.</p>

<p>But now Jekyll has the power of the asset pipeline too. Just install the <a href="https://github.com/ixti/jekyll-assets">jekyll-assets</a> gem. Here are a few tips to get you up and running faster. </p>

<p>First, remember that Sprockets is built on top of a gem named Tilt which is a generic interface to multiple template engines. Installing tilt does not install template engines, so make sure to install the ones you want to work with by explicitly declaring them in your Gemfile.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;jekyll-assets&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;coffee-script&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;compass&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;sass&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span>
</code></pre></div>
<p>I found the default configuration for jekyll-assets very confusing. It mimicked a production environment Rails setting. All the files used the digest as part of the file name and compression was on by default. This made it really hard to debug. So to make jekyll-assets more like Rails defaults. Use these configurations for each jekyll environment.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In _config.yml</span>
<span class="ss">assets</span><span class="p">:</span>
  <span class="n">js_compressor</span><span class="p">:</span> 
  <span class="n">css_compressor</span><span class="p">:</span> 
  <span class="ss">cache</span><span class="p">:</span> 
  <span class="ss">cachebust</span><span class="p">:</span> <span class="n">none</span>

<span class="c1"># In _config_production.yml</span>
<span class="ss">assets</span><span class="p">:</span>
  <span class="n">js_compressor</span><span class="p">:</span> <span class="n">uglifier</span>
  <span class="n">css_compressor</span><span class="p">:</span> <span class="n">sass</span>
  <span class="ss">cache</span><span class="p">:</span> <span class="n">_cache</span><span class="o">/</span><span class="n">assets</span>
  <span class="ss">cachebust</span><span class="p">:</span> <span class="n">hard</span>
</code></pre></div>
<h2 id="toc_3">Pow It Up</h2>

<p>Sure the new jekyll release has a <code>serve</code> option to boot up a web server. But like good software developers, we should be too lazy for such things. If you develop on a Mac and use <a href="http://pow.cx">Pow</a> already for your Rails applications, why not just hook it up to serve your Jekyll site(s) too. Here are the steps.</p>

<p>First, add both rack and rack-rewrite to your <code>Gemfile</code>.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;rack&#39;</span>
<span class="n">gem</span> <span class="s1">&#39;rack-rewrite&#39;</span>
</code></pre></div>
<p>Now create a <code>config.ru</code> file at the root of your project with the following contents.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;rack-rewrite&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;rack/rewrite&#39;</span>

<span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Rewrite</span> <span class="k">do</span>
  <span class="n">r301</span> <span class="sr">%r{^([^\.]*[^\/])$}</span><span class="p">,</span> <span class="s1">&#39;$1/&#39;</span> 
  <span class="n">r301</span> <span class="sr">%r{^(.*\/)$}</span><span class="p">,</span> <span class="s1">&#39;$1index.html&#39;</span>
<span class="k">end</span>
</code></pre></div>
<p>Lastly, sym link the <code>_site</code> directory of your Jekyll project to the <code>public</code>. Then symlink your Jekyll project directory to Pow as you normally would do any Rails or Rack app.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">$ ln -s _site public
$ cd ~/.pow
$ ln -s /path/to/myjekyllapp
</code></pre></div>
<p>You can now access your generated site at <code>http://myjekyllapp.dev</code> via Pow.</p>

<p><aside class="flash_warn">
  Remember to add both config.ru and the public directory to jekyll&#39;s exclude array in your config file(s).
</aside></p>

<h2 id="toc_4">Live Reloads</h2>

<p>I love <a href="http://livereload.com">LiveReload</a> and have purchased the native OS X client for $9 from the <a href="http://itunes.apple.com/us/app/livereload/id482898991?mt=12">Mac App Store</a>. Personally, I could never get the guard-livereload gem working and just opted for the GUI client. So this tip will only focus on using the native Mac app.</p>

<p>It solves a few problems. First, it overcomes LiveReload&#39;s lack of <a href="https://github.com/sstephenson/rbenv">rbenv</a> support. It also assumes that your jekyll site is rather large and takes several seconds to build. Finally, assuming that you are working on your latest post and all you need to do is build a single page over and over again.</p>

<p>Setup LiveReload like you normally would by dragging your project&#39;s folder to their setup window. From here we want to configure your jekyll project to &quot;Run a custom command...&quot;. Click on &quot;Options...&quot; and add the full path to your <code>jekyll-livereload</code> task script.</p>

<div class="center">
  <span class="photofancy">
    <img src="/assets/livereload_custom_command1.png" alt="LiveReload Run Custom Command" width="400" />
  </span>
  <span class="photofancy center">
  <img src="/assets/livereload_custom_command2.png" alt="LiveReload Run Custom Command" width="400" />
</span>
</div>

<p><span class="photofancy floatr ml20">
  <img src="/assets/livereload_exclude.png" alt="LiveReload Exclude Directories" width="200" />
</span>
Also, make sure to exclude any directories that you do not want LiveReload to monitor. One critical folder is the jekyll <code>_site</code> directory. Watching this directly usually results in a indefinite LiveReload loop. Not good.</p>

<p>Your mileage may vary, but here is what I have found works for me in my <code>jekyll-livereload</code> script. This forces the LiveReload sub shell script to load up rbenv again. It then uses the <code>--limit_posts</code> argument to build just the last post. I have found this quickly refreshes the browser page automatically for me while working on my latest Jekyll post in markdown.</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> -e

<span class="nb">export </span><span class="nv">LANG</span><span class="o">=</span><span class="s2">&quot;en_US.UTF-8&quot;</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;$HOME/.rbenv/shims:$HOME/.rbenv/bin:$HOME/.rbenv/plugins/ruby-build/bin:$PATH&quot;</span>
<span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>

jekyll build --limit_posts 1
</code></pre></div>
<p><aside class="flash_warn">
  Remember turn off LiveReload while you are deploying!
</aside></p>

<h2 id="toc_5">Resources</h2>

<ul>
<li><a href="http://757rb.org?utm_source=metaskills&amp;utm_medium=site">757RB.org</a></li>
<li><a href="http://jekyllrb.com">Jekyll - Simple, blog-aware, static sites.</a></li>
<li><a href="https://github.com/ixti/jekyll-assets">jekyll-assets - Asset pipeline for Jekyll.</a></li>
<li><a href="http://pow.cx">Pow - A zero-config Rack server for OS X.</a></li>
<li><a href="http://livereload.com">LiveReload</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>In Loving Memory of Kenneth Earle Collins</title>
   <link href="http://metaskills.net/2013/01/05/in-loving-memory-kenneth-earle-collins"/>
   <updated>2013-01-05T00:00:00-05:00</updated>
   <id>http://metaskills.net/2013/01/05/in-loving-memory-kenneth-earle-collins</id>
   <content type="html">
     <![CDATA[<h4 id="toc_0">Kenneth Earle Collins, 66, of Chesapeake, Virginia, passed away January 5th, 2013.</h4>

<p><span class="photofancy floatl mr20 mb10">
  <img src="/assets/dad-sheriff.jpg" alt="Kenneth Earle Collins - Master Deputy Sheriff" width="173" height="258" />
</span>
My father, known to his friends and family as Kenny, was born in Logan, West Virginia and was the son of the late Edgar and Frances Collins. He was a retired Master Deputy with the Chesapeake Sheriff&#39;s Department. Kenny is survived by his beloved wife of 7 years, Lois V. Collins; a sister, Lanna DeVites and husband John of Zuni, VA; 4 sons, Benjamin M. Collins and fiancée Samantha of Williamsburg, VA, Kenneth Collins and wife Kelly of Portsmouth, VA, Brian Seabold and wife Kelly of Chesapeake, VA, and George Seabold and wife Terri of Elizabeth City, North Carolina; a daughter, Lisa Berger and husband Keith Berger of VA Beach, VA; and 6 grandchildren, Marcus, Zachery, Grayson, Bryson, Jacob, and Trey.</p>

<h2 id="toc_1">Service</h2>

<p><span class="photofancy floatr ml20 mb10">
  <img src="/assets/dad-bootcamp-fort-jackson.jpg" alt="Kenneth Earle Collins - Fort Jackson, South Carolina" width="210" height="137" />
</span>
I am not sure when my father&#39;s parents moved from West Virginia, but my Dad did grow up here locally in the Hodges Manor section of Portsmouth, Virginia - right next to Elizabeth Manor Golf &amp; Country Club. Dad graduated from Portsmouth High School with the class of 1965. He was drafted into the US Army and trained at Fort Jackson, South Carolina. </p>

<p><span class="photofancy floatl mr20 mb0">
  <img src="/assets/dad-army-vietnam.jpg" alt="Kenneth Earle Collins - Vietnam" width="134" height="200" />
</span>
Dad, served two years in Vietnam from 1966 to 1968. Like most veterans, he never talked about his service. After he passed, I decided to use DD 214 to order replacement decorations. Thankfully, the Medals Of America company put in a rush order for me so we could decorate his uniform for the memorial service. He also saved his short-timers stick and jacket with hand sew patches and lettering. The text on the back of the jacket says &quot;I am certain to go to Heaven because I spent my time in Hell.&quot; </p>

<p>Below is a list of his decorations:</p>

<ul>
<li>National Defense Service Medal</li>
<li>Vietnam Service Medal</li>
<li>Republic of Vietnam Campaign Medal w/60 Device</li>
<li>Good Conduct Medal</li>
<li>Expert Badge (M-14 Rifle)</li>
</ul>

<p>Shortly after serving in the Army, my Dad joined the Portsmouth Police Department where he served till mid 1974, a few years after I was born. During his time there he became a Detective, State Arson investigator, and served on the bomb squad. His detective work focused on the narcotics division and he served much of that time undercover. <span class="photofancy floatr mt10 mb5 ml20"><img src="/assets/dad-point-elizabeth-home.jpg" alt="Kenneth Earle Collins - With Ken and Ben At Our New Point Elizabeth Home" width="231" height="225" /></span>I have numerous family photos with my Dad sporting pot leafs on his shirt or a nice Budweiser cap. After he passed, I finally found a copy of his resignation letter with the force where he quoted salary and the need to be more of a &quot;family man&quot;. </p>

<p>After resigning from the force, Dad started a private investigation company with a long time friend, Ken Riddleberger. It was aptly named Double K Incorporated and they primarily handled arson and insurance fraud cases. Dad did this till the late 80&#39;s. I really believe he thought of himself as Magnum PI. Often he would wake up in the morning and drive around calling out on the CB Radio till his partner Ken Riddleberger woke up and did the same. They would promptly head towards a local Texaco station where they would play Ms. PacMan while they discussed their case load.</p>

<p>Because investigation work often required a lot of travel, Dad eventually got a desk job as head of security at the Portsmouth Naval Base and eventually came back to law enforcement with the Chesapeake Sheriff&#39;s office. I am very proud of my father&#39;s service and work. Below are some shadow boxes I made to commemorate his service.</p>

<div class="center">
  <img src="/assets/dad-shadow-boxes.png" alt="Kenneth Earle Collins - Shadow Boxes" width="483" height="215" />
</div>

<h2 id="toc_2">Lifestyle</h2>

<p><span class="photofancy floatr ml20">
  <img src="/assets/dad-golfing-with-ben.jpg" alt="Kenneth Earle Collins - Golfing With Ben Collins" width="136" height="207" />
</span>
Dad was an avid golfer! I mean really, he played every spare moment he could and passed the love of the game to both my brother and myself. We owned our first set of clubs at the age of 9 after Dad won a tournament at Bide-A-Wee golf course. Dad loved the game so much, the family opened up a small golf shop in Chesapeake called Links Golf Shop. Ben and I even attended the GolfWorks school for club manufacture and repair in Newark, OH. </p>

<p>Golf was not our only sport. For some reason Dad made me and my brother try our luck with many others. We played basketball, football, and baseball. Most years we played baseball and even though we both sucked and never had more than a 0 batting average, Dad was there for us and helped coach all of our teams.</p>

<p><span class="photofancy floatl mr20">
  <img src="/assets/dad-with-lois.jpg" alt="Kenneth Earle Collins - With Wife Lois Collins At My Wedding" width="227" height="170" />
</span>
After getting divorced in 1991, my Dad eventually remarried in July 2006 to Lois V. Collins. Dad and Lois met at a Parents Without Partners (PWP) group and dated for some time. Lois is a real class act and took care of my Dad during his last few years while battling lung cancer. I can not count the number of times she would drive them both to his favorite destinations or other out of state trips. Lois will always be a Collins and is family to me. I love her dearly.</p>

<h2 id="toc_3">Stories</h2>

<p><span class="photofancy floatr ml20">
  <img src="/assets/dad-and-linda.jpg" alt="Kenneth Earle Collins - With My Mom, Linda Collins" width="134" height="139" />
</span>
My Mom, Linda Campbell - now remarried, recently told this story to my Brother and myself and I hope she does not mind sharing it here.</p>

<blockquote>
<p>Your Dad and I must have been in junior high school, you know the age where you are scared and everything embarrasses you and you know if you do anything, it will be wrong? I remember feeling especially confident though because I had on an ironed white shirt and a brand new pair of Bermuda shorts that my mom had sewn for me. I was Sandra Dee and – well, we didn&#39;t really know each other or hang out at the time but we were with a bunch of neighborhood kids all hanging around on a hot summer day with nothing to do. </p>

<p>As it was back then, kids didn&#39;t hang out inside so we were all standing and sitting on a friends chain link fence and being shy about the opposite sex. I was one of the kids on the fence, don&#39;t know why, because the wire went above the top pipe bar and was not very comfortable at all to sit on. The kids generally agree to go beg something cold to drink from one of the mothers – mothers were always home back then, just like June Cleaver. So, I jumped down from the fence. </p>

<p>Uh-oh, my feet hit the ground, but most of my brand new Bermuda shorts were still attached to the wicked fence. Standing there in my white cotton undies and very little of my shorts, I wanted to crawl under the fence. Everyone was laughing and making fun – everyone but your Dad. He calmly went to the clothes line and pulled down an ironing board cover that had dried in the sunlight and approached me with his head turned sideways, and his arms spread wide, holding the ironing board cover for me like a mother holding a towel for a wet toddler emerging from the bathtub.</p>

<p>We didn&#39;t cross paths again until after graduation, when he worked at James&#39; Texaco. I had just gotten my new spiffy, metallic blue Corvair with 4 in the floor and was gassing up at his station, trying to look prim and proper. He never mentioned the shorts eating fence until later but when he asked me on a date, I remembered his gallantry from many years earlier.</p>
</blockquote>

<!--
* Made pottery (as trays) in 1st grade and he kept all of them.
* Leaf report at coleman's nursury.
* Gather up other stories.
-->

<h2 id="toc_4">In Closing</h2>

<p>The Collins family has always been close, despite long durations without seeing one another. Often times I went weeks without checking in on my immediate family. The great part about family is that you can always pick up right where you left off. Time has no meaning. But with my Dad&#39;s passing, I will really miss that next time when I want to call and talk to him.</p>

<h2 id="toc_5">Other Links</h2>

<ul>
<li><a href="http://www.hollomon-brown.com/obituary/Kenneth-Earle-Collins/Chesapeake-VA/1158699">Hollomon-Brown Obituary</a></li>
<li><a href="http://www.medalsofamerica.com">Medals Of America</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>HolyGrailHarness</title>
   <link href="http://metaskills.net/2012/12/05/holygrailharness"/>
   <updated>2012-12-05T00:00:00-05:00</updated>
   <id>http://metaskills.net/2012/12/05/holygrailharness</id>
   <content type="html">
     <![CDATA[<p><aside class="flash_info">
  <a href="http://raw.github.com/metaskills/holy_grail_harness">The latest README for HolyGrailHarness will always be on the Github project page.</a>
</aside></p>

<p><img src="https://raw.github.com/metaskills/holy_grail_harness/master/app/assets/images/holy_grail_harness.png" height="435" width="268" style="float:right; margin:0 0 10px 20px;"/></p>

<p>A curated Rails application prototype that focuses on simple test patterns for Ruby &amp; JavaScript!</p>

<p>Unlike normal <a href="http://guides.rubyonrails.org/rails_application_templates.html">Rails Application Templates</a> or more modern Rails application generators like <a href="http://railsapps.github.com/rails-composer/">Rails Composer</a>, the HolyGrailHarness is a basic Rails application that can be considered a prototype and customized via a simple setup script. It is also somewhat opinionated in that it promotes simple and powerful testing choices and focuses on using Ruby 1.9 and up, MiniTest::Spec, Capybara, Poltergeist/PhantomJS, and Konacha. More details on each component and what HolyGrailHarness provides are below.</p>

<p>The HolyGrailHarness is perfect for any of the following:</p>

<ul>
<li>Bootstrapping your next Rails application.</li>
<li>Learning and promoting MiniTest::Spec</li>
<li>Modern JavaScript testing setups.</li>
<li>Teaching Rails and/or JavaScript at your next meetup.</li>
</ul>

<h1 id="toc_0">Usage</h1>

<ul>
<li><a href="https://github.com/metaskills/holy_grail_harness/archive/master.zip">Download</a> the project.</li>
<li>Now from the root of &quot;holy_grail_harness&quot; directory.</li>
</ul>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&quot;This code will be highlighted&quot;</span>
</code></pre></div>
<p>Make sure to replace <code>my_app_name</code> above with the name of your new Rails application. The setup script has a few options, but the end result will be a new Rails application all ready to go. <strong>So why not a normal Rails application template?</strong> Although, Rails application templates provide a really nice feature set. It was much easier to bootstrap a new Rails application using this prototype method. The end result is a cleaner Gemfile and application setup that can be vetted and tested from within HolyGrailHarness itself.</p>

<p>The script will rename your directory and prompt you to <code>cd</code> to that directory. Once you do that, run <code>rake test:all</code> to see that everything is working.</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="nv">$ </span><span class="nb">cd</span> ../my_app_name
<span class="nv">$ </span>bundle <span class="nb">exec </span>rake <span class="nb">test</span>:all
</code></pre></div>
<h1 id="toc_1">Rails 3</h1>

<p>This application prototype will focus on the latest Rails version. At this time, the bundle is locked down to v3.2.9. As Rails updates and is compatible with each component, so will this prototype application be updated. The bundle includes:</p>

<ul>
<li><a href="https://github.com/evrone/quiet_assets">QuietAssets</a> gem for silent pipeline logging.</li>
<li><a href="https://github.com/macournoyer/thin/">Thin</a> webserver. Primarily to be automatically used by Konacha but also good for development if you are not using something like <a href="http://pow.cx">Pow</a>.</li>
</ul>

<h1 id="toc_2">Testing</h1>

<h3 id="toc_3">MiniTest::Spec All The Way Across The Sky!</h3>

<p>Don&#39;t wait for Rails 4 to use MiniTest::Spec! This application is using the <a href="https://github.com/metaskills/minitest-spec-rails">minitest-spec-rails</a> gem which forces <code>ActiveSupport::TestCase</code> to subclass <code>MiniTest::Spec</code>. This means that you can start using the MiniTest&#39;s Spec or Unit structure and assertions directly within the familiar Rails unit, functional, or integration directories. For full details, check out the <a href="https://github.com/metaskills/minitest-spec-rails">minitest-spec-rails</a> documentation or some of the <a href="https://github.com/metaskills/holy_grail_harness/blob/master/test/functional/application_controller_test.rb">test shims</a> within HolyGrailHarness. For example, a <code>test/unit/user_test.rb</code> might look like this.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;test_helper&#39;</span>

<span class="k">class</span> <span class="nc">UserTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:bob</span><span class="p">)</span>   <span class="p">{</span> <span class="n">users</span><span class="p">(</span><span class="ss">:bob</span><span class="p">)</span> <span class="p">}</span>
  <span class="n">let</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span> <span class="p">{</span> <span class="n">users</span><span class="p">(</span><span class="ss">:admin</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">&#39;must respond true to #admin? for administrators only&#39;</span> <span class="k">do</span>
    <span class="n">admin</span><span class="o">.</span><span class="n">must_be</span> <span class="ss">:admin?</span>
    <span class="n">bob</span><span class="o">.</span><span class="n">wont_be</span>   <span class="ss">:admin?</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<h3 id="toc_4">Capybara Integration Tests With Poltergeist Using PhantomJS</h3>

<p>You don&#39;t need Cucumber to write good integration tests. Instead use the basic <a href="https://github.com/jnicklas/capybara#the-dsl">Capybara DSL</a> directly within a Rails integration tests with the most bad ass driver available, <a href="https://github.com/jonleighton/poltergeist">Poltergeist</a>, which is built on top of <a href="http://phantomjs.org">PhantomJS</a>. Never again worry about installing Qt so you can compile capybara-webkit, just go download a <a href="http://phantomjs.org/download.html">pre-compiled PhantomJS binary</a> for your specific platform and enjoy 20% faster integration test runs vs capybara-webkit.</p>

<p>Integration tests are still within the <code>ActionDispatch::IntegrationTest</code> class and as promised, MiniTest::Spec is available here too. Each test file needs to require the <a href="https://github.com/metaskills/holy_grail_harness/blob/master/test/test_helper_integration.rb">test_helper_integration</a> which provides the following base features.</p>

<ul>
<li>Sets page size to that of a 13&quot; MacBook Air.</li>
<li>Resets Capybara sessions after each test.</li>
<li>Provides a <code>#save_and_open_page</code>, or <code>#page!</code> for short, screen shot method.</li>
<li>Ensures a single ActiveRecord DB connection for transactional test runs.</li>
<li>An <code>#execjs</code> helper for bridging Ruby and the JavaScript under test.</li>
</ul>

<p>HolyGrailHarness comes with a integration test example in the <a href="https://github.com/metaskills/holy_grail_harness/blob/master/test/integration/application_test.rb">test/integration/application_test.rb</a> file. An integration test might look something like this.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;test_helper_integration&#39;</span>

<span class="k">class</span> <span class="nc">ApplicationTest</span> <span class="o">&lt;</span> <span class="no">ActionDispatch</span><span class="o">::</span><span class="no">IntegrationTest</span>

  <span class="n">before</span> <span class="p">{</span> <span class="n">visit</span> <span class="n">root_path</span> <span class="p">}</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:h1</span><span class="p">)</span> <span class="p">{</span> <span class="n">find</span> <span class="s1">&#39;h1&#39;</span> <span class="p">}</span>

  <span class="n">it</span> <span class="s1">&#39;renders&#39;</span> <span class="k">do</span>
    <span class="n">h1</span><span class="o">.</span><span class="n">must_be</span> <span class="ss">:present?</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<h3 id="toc_5">Konacha JavaScript Tests Using PhantomJS</h3>

<p>Move over Jasmine(rice), <a href="https://github.com/jfirebaugh/konacha">Konacha</a> is the way to test your JavaScript now. Konacha is a Rails engine that allows you to test your JavaScript with the <a href="http://visionmedia.github.com/mocha/">Mocha</a> test framework and <a href="http://chaijs.com">Chai</a> assertion library. Konacha&#39;s killer feature is a sandboxed <code>&lt;iframe&gt;</code> for each test spec to run within as well as full Rails asset pipeline integration. The HolyGrailHarness does all the work to get your Konacha <a href="https://github.com/metaskills/holy_grail_harness/tree/master/spec/javascripts"><code>spec/javascripts</code></a> directory all setup and ready to go. Highlights include:</p>

<ul>
<li>An <a href="https://github.com/metaskills/holy_grail_harness/blob/master/config/initializers/konacha.rb">initializer</a> that sets up Poltergeist as the Capybara driver.</li>
<li>A directory structure for model, view, and controller specs.</li>
<li>A <a href="https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper.js.coffee"><code>spec_helper.js.coffee</code></a> for your specs to require. Provides global setup, configurations and vendor requires.</li>
</ul>

<p>HolyGrailHarness also has a <a href="https://github.com/metaskills/holy_grail_harness/tree/master/spec/javascripts/spec_helper"><code>spec/javascripts/spec_helper</code></a> directory meant for helpers and extensions that should be available to all specs. We have included a <a href="https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper/fixtures.js.coffee"><code>fixtures.js.coffee</code></a> file that demonstrates how to setup JSON data fixtures for use from anything to stubbing requests to instantiating new model objects. We also have a <a href="https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper/helpers.js.coffee"><code>helpers.js.coffee</code></a> file that exposes a few top level functions that make debugging your JavaScript easy. Below are the vendored JavaScript libraries that are required by the <code>spec_helper</code>.</p>

<ul>
<li><a href="http://sinonjs.org">Sinon.JS</a> - For spies, stubs, faking time, etc.</li>
<li><a href="https://github.com/appendto/jquery-mockjax">jQuery Mockjax</a> - Best way to mock jQuery&#39;s AJAX functions.</li>
<li><a href="https://github.com/chaijs/chai-jquery">Chai jQuery</a> - Chai assertions for jQuery.</li>
<li><a href="http://github.com/NV/jsDump">jsDump</a> - Used by the <code>myLog()</code> helper.</li>
</ul>

<p>Because your CI system should run all your tests, the HolyGrailHarness has added a Rake task to the test namespace that runs the default rails test task (units, functional, integrations) then your Konacha tests.</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="nv">$ </span>rake <span class="nb">test</span>:all     <span class="c"># Runs all Rails tests, then Konacha tests.</span>
</code></pre></div>
<h3 id="toc_6">Guard</h3>

<p>TDD in style and run your tests when you hit save! Both <a href="https://github.com/guard/guard-minitest">guard-minitest</a> and <a href="https://github.com/alexgb/guard-konacha">guard-konacha</a> are bundled and ready to go. A basic <code>Guardfile</code> is already setup too. Unlike most, this one is split into two groups <code>:ruby</code> or <code>:js</code>. This lets you focus on either everything or a specific language for your tests.</p>
<div class="highlight"><pre><code class="bash language-bash" data-lang="bash"><span class="nv">$ </span>guard             <span class="c"># Monitor both Ruby and JavaScript tests.</span>
<span class="nv">$ </span>guard -g ruby     <span class="c"># Monitor Ruby tests.</span>
<span class="nv">$ </span>guard -g js       <span class="c"># Monitor JavaScript tests.</span>
</code></pre></div>
<p>The Guardfile assumes you are running OS X and wish to use the Ruby GNTP (Growl Notification Transport Protocol). If this is not the case, consult the Guard documentation on different <a href="https://github.com/guard/guard#system-notifications">system notification</a> alternatives.</p>

<h3 id="toc_7">Factories And Fixtures</h3>

<p>ActiveRecord YAML fixtures suck, but so do slow tests that rely on an empty database with excessive setups based on factories. The answer? Take advantage of the best each has to offer. Use factories to populate fixtures into the test database while leveraging database transactions during your test runs. The end result is a known factory story with the ability to create more test data as needed using the same factories. Allowing factories to properly hook into model logic means no more decomposing business logic into YAML text files. How?</p>

<p>The HolyGrailHarness bundles the <a href="https://github.com/metaskills/named_seeds">named_seeds</a> gem along with the <a href="https://github.com/thoughtbot/factory_girl">factory_girl</a> gem. The NamedSeeds library checks for the existence of a <a href="https://github.com/metaskills/holy_grail_harness/blob/master/db/test/seeds.rb"><code>db/test/seeds.rb</code></a> file and if present, loads that file. Just like Rails&#39; own <code>db/seeds.rb</code> anything in this file goes. The only difference is that this seed file is populated right before you tests are run so they persist between transactions. You also get the benefit of using this same seed data in development as part of the normal Rails <code>db:setup</code> process. Read the <a href="https://github.com/metaskills/named_seeds#namedseeds">full documentationn</a> on their site on how to use it. Below is a brief example.</p>

<p>Create factories in the <code>test/factories</code> directory. Note, factories are best when they make <code>valid garbage™</code>, so the HolyGrailHarness also requires the <a href="https://github.com/sevenwire/forgery">forgery</a> gem to help with that.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In test/factories/user_factory.rb</span>

<span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>

  <span class="n">factory</span> <span class="ss">:user</span> <span class="k">do</span>
    <span class="n">email</span>      <span class="p">{</span> <span class="no">Forgery</span><span class="o">::</span><span class="no">Email</span><span class="o">.</span><span class="n">address</span> <span class="p">}</span>
    <span class="n">first_name</span> <span class="p">{</span> <span class="no">Forgery</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">first_name</span> <span class="p">}</span>
    <span class="n">last_name</span>  <span class="p">{</span> <span class="no">Forgery</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">first_name</span> <span class="p">}</span>
    <span class="n">password</span>   <span class="s1">&#39;test&#39;</span>  
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<p>When making seed data, be explicit with your attributes that may be forged in the factory, database seeds should be consistent and have meaningful attributes. In this example we are creating an admin user. Note too how we are using <code>NamedSeeds.identify</code> which mimics AcctiveRecord&#39;s fixture identity. This gives us a handle to the fixture within our tests. We also create the <code>@admin</code> instance variable because we might want to use that user later on in the fixture story.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In db/test/seeds.rb</span>

<span class="nb">require</span> <span class="s1">&#39;factory_girl&#39;</span>
<span class="no">FactoryGirl</span><span class="o">.</span><span class="n">find_definitions</span> <span class="k">rescue</span> <span class="kp">true</span>
<span class="kp">include</span> <span class="no">FactoryGirl</span><span class="o">::</span><span class="no">Syntax</span><span class="o">::</span><span class="no">Methods</span>

<span class="vi">@admin</span> <span class="o">=</span> <span class="n">create</span> <span class="ss">:user</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="no">NamedSeeds</span><span class="o">.</span><span class="n">identify</span><span class="p">(</span><span class="ss">:admin</span><span class="p">),</span> 
                       <span class="n">first_name</span><span class="p">:</span> <span class="s1">&#39;Admin&#39;</span><span class="p">,</span> <span class="n">last_name</span><span class="p">:</span> <span class="s1">&#39;User&#39;</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;admin@test.com&#39;</span>
</code></pre></div>
<p>Lastly, in your <a href="https://github.com/metaskills/holy_grail_harness/blob/master/test/test_helper.rb"><code>test/test_helper.rb</code></a> file, declare that you have a named seed to the users model. This will allow your tests to act just like those with ActiveRecord fixtures and use the <code>users(:admin)</code> helper to get to that seeded fixture.</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In test/test_helper.rb</span>

<span class="k">class</span> <span class="nc">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="n">named_seeds</span> <span class="ss">:users</span>

<span class="k">end</span>
</code></pre></div>
<h1 id="toc_8">MVC JavaScript</h1>

<p>The HolyGrailHarness wants you to use some type MV* structure for your JavaScript. The setup script supports <a href="http://spinejs.com">Spine.js</a> as an option, however you can decline and all traces of Spine.js will be removed. If so, the following features will still remain. </p>

<p>A single JavaScript <a href="https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/lib/namespaces.js.coffee">namespace</a> on the window object. This namespace creates a model, view, controller object structure that direly matches to the <a href="https://github.com/metaskills/holy_grail_harness/tree/master/app/assets/javascripts/holy_grail_harness"><code>app/assets/javascripts/#{my_app_name}/(model|view|controller)</code></a> directory structure within the Rails asset pipeline. This JavaScript namespace and matching directories will be changed to your new application name as part of the setup task. Here is an example of a User model whose corresponding file would be found in the <code>app/assets/javascripts/my_app_name/models/user.js.coffee</code> file.</p>
<div class="highlight"><pre><code class="coffeescript language-coffeescript" data-lang="coffeescript"><span class="k">class</span> <span class="nx">@MyAppName</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">User</span> <span class="k">extends</span> <span class="nx">View</span>  
  <span class="nx">@configure</span> <span class="s">&#39;User&#39;</span><span class="p">,</span> <span class="s">&#39;id&#39;</span><span class="p">,</span> <span class="s">&#39;email&#39;</span>
</code></pre></div>
<p>The main <a href="https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/application.js"><code>application.js</code></a> file requires all vendor frameworks, then the <a href="https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/index.js.coffee"><code>index.js.coffee</code></a> within your application name directory. Use this file to boot your JavaScript application and/or setup your root view controller.</p>

<p>Also included is the <a href="https://github.com/nathansobo/space-pen">SpacePen</a> view framework. SpacePen is a powerful and minimalist client-side view framework authored in CoffeeScript. It is actually a jQuery subclass which makes your views really easy to traverse and respond to controller events. Read my <a href="http://metaskills.net/2012/05/22/view-controller-patterns-with-spine-js-and-spacepen/"><em>View Controller Patterns With Spine.js &amp; SpacePen</em></a> article to learn why views should not be dumb and how you can take advantage of SpacePen no matter what JavaScript MV* framework you use.</p>

<h3 id="toc_9">With Spine.js</h3>

<p>If you choose to use Spine.js as your JavaScript MVC structure, the setup script will create a git submodule to the Spine repository to the <code>vendor/assets/javascripts/spine</code> directory. This allows your project to use the the source CoffeeScript files, which makes for a wonderful <a href="http://metaskills.net/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">learning experience</a> to both Spine.js and idomatic CoffeeScript. </p>

<p>By default the <a href="https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/index.js.coffee"><code>index.js.coffee</code></a> will require all Spine components. This includes manager (stacks), ajax, route, and relation. Remove anything that you do not need. This file also defines the root view controller along with a <code>MyAppName.App.Index.init()</code> class level initialization function. This is called in the main <a href="https://github.com/metaskills/holy_grail_harness/blob/master/app/views/layouts/application.html.erb"><code>application.html.erb</code></a> layout file for you too. Likewise, the application init is done in the Mocha before filters mentioned above in both the <a href="https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper.js.coffee"><code>spec_helper.js.coffee</code></a> and <a href="https://github.com/metaskills/holy_grail_harness/blob/master/spec/javascripts/spec_helper/fixtures.js.coffee"><code>fixtures.js.coffee</code></a> files. If you examine these files closely, you will see how they make use of Mocha&#39;s <code>done()</code> callback so that you can cleanly abstract AJAX mocks and anything else related to your JavaScript application&#39;s boot process. Here is an example of how you might setup your <code>initApplication()</code>.</p>
<div class="highlight"><pre><code class="coffeescript language-coffeescript" data-lang="coffeescript"><span class="vi">@initApplication = </span><span class="nf">(callback) =&gt;</span>
  <span class="nv">bob = </span><span class="nx">MyAppName</span><span class="p">.</span><span class="nx">Test</span><span class="p">.</span><span class="nx">Seeds</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">bob</span>
  <span class="nx">$</span><span class="p">.</span><span class="nx">mockjax</span> <span class="nv">url: </span><span class="s">&quot;/users/</span><span class="si">#{</span><span class="nx">bob</span><span class="p">.</span><span class="nx">id</span><span class="si">}</span><span class="s">&quot;</span><span class="p">,</span> <span class="nv">responseText: </span><span class="nx">MyAppName</span><span class="p">.</span><span class="nx">Test</span><span class="p">.</span><span class="nx">Response</span><span class="p">.</span><span class="nx">bobInitial</span><span class="p">.</span><span class="nx">responseText</span>
  <span class="nx">MyAppName</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">fetch</span> <span class="nv">id: </span><span class="nx">bob</span><span class="p">.</span><span class="nx">id</span>
  <span class="nx">MyAppName</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">one</span> <span class="s">&#39;refresh&#39;</span><span class="p">,</span> <span class="nx">callback</span>
</code></pre></div>
<p>No JavaScript project should be without a local notification system to help keep disparate components up to date. Thankfully, Spine&#39;s event module makes a local PubSub system a breeze. The HolyGrailHarness has a <a href="https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/javascripts/holy_grail_harness/lib/notifications.js.coffee"><code>notifications.js.coffee</code></a> that exposes a class level <code>bind()</code> and <code>trigger()</code> to any event string/namespace you want. To make more simple, we recommend creating class level functions that expose the event name as the function name and pass the args to the <code>handle()</code> function. We have done this for the <code>MyAppName.Notifications.appReady()</code> to demonstrate. Calling this function will trigger the <code>app.ready</code> event and passing a function to this function will bind that function to the same event name.</p>

<h1 id="toc_10">Sass &amp; Compass</h1>

<p><a href="http://sass-lang.com">Sass</a> is the only way to write CSS for today&#39;s modern web applications. <a href="http://compass-style.org">Compass</a> is the CSS framework that no Sass user should go without. Together they provide a foundation for writing beautiful CSS using pre-built time saving functions. The HolyGrailHarness includes both the <a href="https://github.com/rails/sass-rails">sass-rails</a> and <a href="https://github.com/Compass/compass-rails">compass-rails</a> gems.</p>

<p>To get you started on the right path, we have also created a basic structure within the <code>app/assets/stylesheets</code> asset pipeline directory to help you organize your Sass files. Here is the directory structure below.</p>
<div class="highlight"><pre><code class="text language-text" data-lang="text">├── application.css
├── application
│   ├── _layout.scss
│   ├── index.scss
│   ├── components
│   │   └── _foo.scss
└── shared
    ├── _animations.scss
    ├── _fonts.scss
    ├── _mixins.scss
    ├── _placeholders.scss
    ├── _variables.scss
    └── base.scss
</code></pre></div>
<h3 id="toc_11">The application.css file.</h3>

<p>Never write CSS in <code>application.css</code>. Say what? I know right, but trust me. Just consider this file a top level bundle dependency that only requires other top level bundle assets. Here is the contents of that file. Notice how it requires a bundle called twitter and an index. One is for twitter bootstrap, see section below, and the other is the index to your own Sass framework.</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="c">/*</span>
<span class="c"> *= require application/twitter</span>
<span class="c"> *= require application/index</span>
<span class="c">*/</span>
</code></pre></div>
<h3 id="toc_12">The shared directory.</h3>

<p>Think of this as your own Compass framework. The <a href="https://github.com/metaskills/holy_grail_harness/blob/master/app/assets/stylesheets/shared/base.scss"><code>base.scss</code></a> is your single file to <code>@import</code> to get everything loaded and ready to go. <strong>Nothing in any of the shared files should generate CSS!</strong> Importing <code>shared/base</code> should act just like importing <code>compass</code>. Use these files for setting your own variables and creating misc helper functions &amp; mixins. There is a variables file for... variables! Another for animations, fonts and mixins too.</p>

<p>Pay special attention to the <code>_placeholders.scss</code> file. If you do not know about Sass 3.2&#39;s placeholder selectors (silent classes) and how they make presentational classes efficiently extended by semantic ones, then I highly suggest you read Dale Sande&#39;s presentation titled <a href="https://speakerdeck.com/anotheruiguy/sass-32-silent-classes">Sass 3.2 Silent Classes</a> on Speaker Deck.</p>

<p>Below is the contents of the <code>base.scss</code> file, take note of the order. See too how we import the entire Compass framework. This means that all of your Sass code in any of the shared files can take full advantage of both Bootstrap and Compass&#39; variables and mixins. Epic win!</p>
<div class="highlight"><pre><code class="sass language-sass" data-lang="sass"><span class="c1">// Think of this file as your own compass. Importing the base, never generates CSS.</span>

<span class="k">@import</span> <span class="s">&quot;shared/variables&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;bootstrap/mixins&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;compass&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;compass/layout&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;compass/css3/user-interface&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;shared/fonts&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;shared/mixins&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;shared/animations&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;shared/placeholders&quot;;</span>
</code></pre></div>
<h3 id="toc_13">The application directory.</h3>

<p>Organize this as you see fit. We have started you off by creating a <code>_layout.scss</code> file for your general layout/structure styles. There is also a <code>components</code> directory which all sub files are imported via a glob. The idea is that components are not dependent upon another. Files that might go in here are things like datepicker, navigation, and general files named after components or widgets. Below is what the <code>application/index.scss</code> looks like.</p>
<div class="highlight"><pre><code class="sass language-sass" data-lang="sass"><span class="k">@import</span> <span class="s">&quot;shared/base&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;./layout&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;components/*&quot;;</span>
</code></pre></div>
<p>If you are more advanced with your CSS and like the idea of style guides, take a looks a the <a href="https://github.com/Anotheruiguy/toadstool">Toadstool</a> style guide framework.</p>

<h1 id="toc_14">Twitter Bootstrap</h1>

<p><a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a> is awesome, but <a href="http://metaskills.net/2012/02/27/too-less-should-you-be-using-sass/">LESS is not</a>. That is why the HolyGrailHarness uses the <a href="https://github.com/thomas-mcdonald/bootstrap-sass">bootstrap-sass</a> gem that converts all the Bootstrap LESS files to Sass. Making them ready to import via the Rails asset pipeline.</p>

<p>As shown above in the Sass section, we require the <code>application/twitter.scss</code> bundle asset from the top level <code>application.css</code> bundle file. This twitter bundle file, contents below, take advantage of your shared variables before importing bootstrap from the gem. In this way you can define variables that tweak bootstrap. A good example would be button colors, column widths, etc. Later on in the file you can extend bootstrap styles to your liking. For instance, add more padding to buttons.</p>
<div class="highlight"><pre><code class="sass language-sass" data-lang="sass"><span class="k">@import</span> <span class="s">&quot;shared/variables&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;bootstrap&quot;;</span>
<span class="k">@import</span> <span class="s">&quot;font-awesome&quot;;</span>

<span class="c1">// Tweak or redefine Twitter classes below.</span>
</code></pre></div>
<h3 id="toc_15">Font Awesome</h3>

<p>The glyph icons included in Twitter Bootstrap are horrible for hi-resolution &quot;retina&quot; displays typically found on mobile devices. Thankfully the <a href="http://fortawesome.github.com/Font-Awesome/">Font Awesome</a> project provides a drop in replacement that instead uses icon fonts vs raster images. </p>

<p>The HolyGrailHarness vendors these font files and the needed <code>font-awesome.scss</code> file and requires them as part of the Twitter Bootstrap bundle shown above. More advanced users may prefer to only include the icon fonts needed in their application or a few custom icons. If that is the case, check out <a href="http://endtwist.github.com/fontcustom/">Font Custom</a>, webfonts from the comfort of the command line.</p>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Synchronized Times In Ruby &amp;amp; JavaScript Acceptance Tests Using Capybara, Timecop &amp;amp; Sinon.JS</title>
   <link href="http://metaskills.net/2012/08/07/synchronized-times-in-ruby-and-javascript-acceptance-tests-using-capybara-timecop-and-sinon.js"/>
   <updated>2012-08-07T00:00:00-04:00</updated>
   <id>http://metaskills.net/2012/08/07/synchronized-times-in-ruby-and-javascript-acceptance-tests-using-capybara-timecop-and-sinon.js</id>
   <content type="html">
     <![CDATA[<p>
  Any good Ruby developer that tests time-dependent code has used the <a href="http://github.com/jtrupiano/timecop">Timecop</a> gem. Timecop provides dead simple time travel and freezing capabilities to Ruby's standard library. But what if you are working on a rich JavaScript application that is backed and tested by something like a Rails application and you want to alter the test browser's clock as well? The answer is pretty simple, but let's first examine all the parts at play here.
</p>

<h2>Rails &amp; Capybara</h2>

<p>
  My examples leverage a very simple Rails integration test setup using <a href="http://github.com/jnicklas/capybara/#the-dsl">Capybara's DSL</a> within a basic Rails integration test case. Much like <a href="http://techiferous.com/2010/04/using-capybara-in-rails-3/">Wyatt has described here</a> and I have shown in a <a href="http://github.com/metaskills/holygrail_rails31">demo project on github</a>. So if your integration test setup is different, transpose my code to fit your needs. Also, there are a few drivers for Capybara that support full JavaScript integration, most notably capybara-webkit. But the latest on the scene is <a href="http://github.com/jonleighton/poltergeist">Poltergeist</a> which uses the badass PhantomJS project. I highly recommend you switch to this driver! That said, any Capybara driver that fully supports Capybara's <code>#execute_script</code> should work just fine.
</p>

<h2>Ruby &amp; JavaScript Times</h2>

<p>
  JavaScript date values represent time in milliseconds since Unix Epoch. Many 3rd-party JavaScript date libraries use millisecond integers for both instantiating and altering these objects. Ruby on the other hand has a much higher precision and thanks to ActiveSupport's core extensions to Ruby's date and time classes we can easily represent these values for JavaScript. Specifically, ActiveSupport adds a <code>#to_i</code> method that returns an integer which represents that date or time in seconds since Unix Epoch. In my example code, you will see that I multiple this by 1000 to get the millisecond representation.
</p>

<p>
  ActiveSupport also provides an <code>#advance</code> core extension to all date and time classes. This method is Valuable As Fuck&trade; since it returns a new time instance that has moved backwards or forwards given a hash of options. For example, returning a time instance moved forward by 20 minutes would look like this <code>@time.advance(minutes:20)</code>. See the <a href="http://api.rubyonrails.org/classes/Time.html#method-i-advance">documentation</a> for all the options and remember, you can provide negative values to move backward. In short, the advance method is awesome!
</p>

<h2>Faking Time With Sinon.JS</h2>

<p><aside class="flash_info">
  <a href="http://pivotal.github.com/jasmine/#section-Mocking_the_JavaScript_Clock">Jasmine 1.2 now has a similiar mocking technique for the JavaScript clock.</a>
</aside></p>

<p>
  <a href="http://sinonjs.org">Sinon.JS</a> is a small stand-alone library that provides spies, stubs and mocks for your JavaScript. To be honest, I use Jasmine and supporting extensions for most of these features. However, Sinon.JS has one killer feature, faking time! Yup, it allows you to freeze JavaScript's clock to a specific time and tick it forward as needed. I want you to ponder the benefits of that for awhile. Imagine you have time sensitive JavaScript code that uses <code>setInterval()</code> or the like. Sinon.JS will actually allow you to tick time forward and still maintain compatibility with that code's behavior! Basically Sinon.JS is equal to our Ruby Timecop gem and then some! Check out their <a href="http://sinonjs.org/docs/#clock-api">clock API</a> or read the code if you want to learn more. Remember, it is safe to include Sinon.JS in any existing JavaScript project since it will not do anything unless you ask it too. So no fear in it clashing with your other JavaScript test setup.
</p>

<h2>Putting It All Together</h2>

<p>
  So now the fun part, some code examples. First, you need to get Sinon.JS in your Rails JavaScript manifest. If you are smart, you have already setup a system where you can specify top level asset manifests for your JavaScript application per test environment. If not, you might want to take a look at two posts I previously published on setting up Jasminerice for testing Spine.JS applications.
</p>

<ul>
  <li><a href="/2012/01/16/rails-and-spine-js-jasmine-testing-part-1/">Rails &amp; Spine.JS - Jasmine Testing Part 1</a></li>
  <li><a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">Rails &amp; Spine.JS - Jasmine Testing Part 2</a></li>
</ul>

<p>
  These file snippets below assume you have an <code>integration.js</code> manifest which includes both a vendored Sinon.JS then a sub file which actually initializes Sinon.JS for our integration test run. In this case below, we are first processing a CoffeeScript file with ERB and then initializing Sinon.JS' fake timers to a default time. In my case, this is 8:30am central standard time. Now we can assure that Capybara's browser engine will be frozen at that time and ready to move forward for each test.
</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript"><span class="c1">// File app/assets/javascripts/integration.js</span>

<span class="c1">//= require sinon-1.4.2</span>
<span class="c1">//= require integration/sinon</span>
<span class="c1">//= require application</span>
</code></pre></div><div class="highlight"><pre><code class="coffeescript language-coffeescript" data-lang="coffeescript"><span class="c1"># File app/assets/javascripts/integration/sinon.js.coffee.erb</span>

<span class="o">&lt;%</span> <span class="nv">central = </span><span class="nx">ActiveSupport</span><span class="o">::</span><span class="nx">TimeZone</span><span class="p">[</span><span class="s">&#39;Central Time (US &amp; Canada)&#39;</span><span class="p">]</span> <span class="o">%&gt;</span>
<span class="o">&lt;%</span> <span class="nv">today = </span><span class="nx">central</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s">&#39;8:30am&#39;</span><span class="p">).</span><span class="nx">to_i</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">%&gt;</span>

<span class="nb">window</span><span class="p">.</span><span class="nv">clock = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">useFakeTimers</span> <span class="o">&lt;%=</span> <span class="nx">today</span> <span class="o">%&gt;</span>
</code></pre></div>
<p>
  Now, the Ruby code. Here is slimmed down version of my base integration test case which <a href="/2011/03/26/using-minitest-spec-with-rails/">uses MiniTest::Spec</a> to drive Capybara tests. The first thing I do before any integration test is use Timecop to travel to 8:30am. This means that both Ruby and JavaScript are synced to the exact millisecond in time. Any test that needs to move time forward must call the <code>#advance_time</code> test helper. This method takes a hash of options which is passed directly to the <code>#advance</code> method I previously talked about. It measures the milliseconds between now and the advancement and sends that directly to Sinon.JS' fake timers using Capybara's <code>#execute_script</code> method. So calling <code>advance_time(seconds:20)</code> in Ruby now moves time forward in both Ruby and JavaScript. Epic win!!!
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># File test/test_helper_integration.rb</span>

<span class="nb">require</span> <span class="s2">&quot;test_helper&quot;</span>
<span class="nb">require</span> <span class="s2">&quot;capybara/rails&quot;</span>

<span class="k">module</span> <span class="nn">ActionDispatch</span>
  <span class="k">class</span> <span class="nc">IntegrationTest</span>

  <span class="kp">include</span> <span class="no">Capybara</span><span class="o">::</span><span class="no">DSL</span>

  <span class="n">before</span> <span class="p">{</span> <span class="n">travel</span> <span class="s1">&#39;8:30am&#39;</span> <span class="p">}</span>
  <span class="n">after</span>  <span class="p">{</span> <span class="no">Capybara</span><span class="o">.</span><span class="n">reset_sessions!</span> <span class="p">}</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">travel</span><span class="p">(</span><span class="n">parseable_time</span><span class="p">)</span>
    <span class="no">Timecop</span><span class="o">.</span><span class="n">return</span>
    <span class="no">Timecop</span><span class="o">.</span><span class="n">travel</span> <span class="n">parse_time</span><span class="p">(</span><span class="n">parseable_time</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">parse_time</span><span class="p">(</span><span class="n">time</span><span class="p">)</span>
    <span class="n">time</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span> <span class="p">?</span> <span class="no">Chronic</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">time</span><span class="p">)</span> <span class="p">:</span> <span class="n">time</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">advance_time</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
    <span class="n">now_ms</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">to_i</span> <span class="o">*</span> <span class="mi">1000</span>
    <span class="no">Timecop</span><span class="o">.</span><span class="n">travel</span> <span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">advance</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
    <span class="n">traveled_ms</span> <span class="o">=</span> <span class="p">(</span><span class="no">Time</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">to_i</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">-</span> <span class="n">now_ms</span>
    <span class="n">advance_sinon</span> <span class="n">traveled_ms</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">advance_sinon</span><span class="p">(</span><span class="n">ms</span><span class="p">)</span>
    <span class="n">page</span><span class="o">.</span><span class="n">execute_script</span> <span class="s2">&quot;if (window.clock) { window.clock.tick(</span><span class="si">#{</span><span class="n">ms</span><span class="si">}</span><span class="s2">); }&quot;</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<p>
  I have found the following technique critical to fully testing a recent time based JavaScript application I have developed. I hope you find this technique useful as well and as always, please contribute your thoughts or questions below. Cheers!
</p>

<h2>Resources</h2>

<ul>
  <li><a href="http://github.com/jtrupiano/timecop">Timecop - A gem providing "time travel" and "time freezing" capabilities, making it dead simple to test time-dependent code.</a></li>
  <li><a href="http://github.com/jnicklas/capybara/">Capybara - Acceptance test framework for web applications.</a></li>
  <li><a href="http://github.com/jonleighton/poltergeist">Poltergeist - A PhantomJS driver for Capybara.</a></li>
  <li><a href="http://sinonjs.org">Sinon.JS - Standalone test spies, stubs and mocks for JavaScript.</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Rails, Moment.js And Time Zones</title>
   <link href="http://metaskills.net/2012/08/05/rails-moment-js-and-time-zones"/>
   <updated>2012-08-05T00:00:00-04:00</updated>
   <id>http://metaskills.net/2012/08/05/rails-moment-js-and-time-zones</id>
   <content type="html">
     <![CDATA[<p>
  Here are a few quick tips for the time zone aware Rails developer that finds themselves deep into JavaScript date objects. First, use the <a href="http://momentjs.com">Moment.js</a> JavaScrpt date library! Moment.js has a very <a href="http://momentjs.com/docs/">rich API for parsing and working with times</a>, very similiar to ActiveSupport's extensions. However, it does not have a solid way of moving times across zones. Especially if those zones may or may not observer daylight savings time (DST).
</p>

<p>
  Many JavaScript time zone libraries require a huge set of geographic data to both identify zones and their observance of DST. These data files can add a significant overhead to JavaScript. But wouldn't it be great if there was a simple way of leveraging your Rails model's time zone settings? There is, but first we need to serialize an <code>ActiveSupport::TimeZone</code> object in JSON. Easy, just define an <code>#as_json</code> method like the one below. I suggest adding this to an initializer in your Rails <code>config/initializers/active_support.rb</code> directory. The key attribute here is the <code>utc_total_offset</code>. This will be a number in minutes that properly observes DST.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">ActiveSupport</span>
  <span class="k">class</span> <span class="nc">TimeZone</span>

    <span class="k">def</span> <span class="nf">as_json</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
      <span class="p">{</span> <span class="ss">:name</span>                <span class="o">=&gt;</span> <span class="nb">name</span><span class="p">,</span> 
        <span class="ss">:identifier</span>          <span class="o">=&gt;</span> <span class="n">tzinfo</span><span class="o">.</span><span class="n">identifier</span><span class="p">,</span>
        <span class="ss">:friendly_identifier</span> <span class="o">=&gt;</span> <span class="n">tzinfo</span><span class="o">.</span><span class="n">friendly_identifier</span><span class="p">,</span>
        <span class="ss">:utc_offset</span>          <span class="o">=&gt;</span> <span class="n">utc_offset</span><span class="p">,</span>
        <span class="ss">:utc_total_offset</span>    <span class="o">=&gt;</span> <span class="n">tzinfo</span><span class="o">.</span><span class="n">current_period</span><span class="o">.</span><span class="n">utc_total_offset</span> <span class="p">}</span>
    <span class="k">end</span>

  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>
  Now assuming you have serialized a models time zone attribute using the full <code>ActiveSupport::TimeZone</code> object, we can easily use this information client side via a quick extension to Moment.js' prototype. Here is a <code>moment.js.coffee</code> file I have required in my Rails applications.
</p>
<div class="highlight"><pre><code class="coffeescript language-coffeescript" data-lang="coffeescript"><span class="nv">moment.fn.forTimeZone = </span><span class="nf">(timeZone) -&gt;</span>
  <span class="nv">currentOffset = </span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">zone</span><span class="p">()</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span> <span class="o">*</span> <span class="o">-</span><span class="mi">1</span>
  <span class="nv">adjustedOfffset = </span><span class="k">if</span> <span class="nx">currentOffset</span> <span class="o">&gt;</span> <span class="nx">timeZone</span><span class="p">.</span><span class="nx">utc_total_offset</span> 
                      <span class="nx">timeZone</span><span class="p">.</span><span class="nx">utc_total_offset</span> <span class="o">-</span> <span class="nx">currentOffset</span> 
                    <span class="k">else</span> 
                      <span class="nx">currentOffset</span> <span class="o">-</span> <span class="nx">timeZone</span><span class="p">.</span><span class="nx">utc_total_offset</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">add</span> <span class="s">&#39;seconds&#39;</span><span class="p">,</span> <span class="nx">adjustedOfffset</span>
</code></pre></div>
<p>
  So we let Ruby do all the hard work of telling us what time zones are observing DST without all the bloat to our JavaScript for parsing zone identifiers. Some sample output.
</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript"><span class="nx">eastern</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">friendly_identifier</span><span class="o">:</span> <span class="s2">&quot;America - New York&quot;</span><span class="p">,</span>
  <span class="nx">identifier</span><span class="o">:</span> <span class="s2">&quot;America/New_York&quot;</span><span class="p">,</span>
  <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;Eastern Time (US &amp; Canada)&quot;</span><span class="p">,</span>
  <span class="nx">utc_offset</span><span class="o">:</span> <span class="o">-</span><span class="mi">18000</span><span class="p">,</span>
  <span class="nx">utc_total_offset</span><span class="o">:</span> <span class="o">-</span><span class="mi">14400</span>
<span class="p">}</span>

<span class="nx">noonPacific</span> <span class="o">=</span> <span class="mi">1344279600000</span> <span class="c1">// &quot;2012-08-06T12:00:00-07:00&quot;</span>
<span class="nx">format</span> <span class="o">=</span> <span class="s1">&#39;MMMM Do, YYYY \\at h:mma&#39;</span>

<span class="nx">moment</span><span class="p">(</span><span class="nx">noonPacific</span><span class="p">).</span><span class="nx">format</span><span class="p">(</span><span class="nx">format</span><span class="p">)</span>
<span class="c1">// &quot;August 6th, 2012 at 12:00pm&quot;</span>

<span class="nx">moment</span><span class="p">(</span><span class="nx">noonPacific</span><span class="p">).</span><span class="nx">forTimeZone</span><span class="p">(</span><span class="nx">eastern</span><span class="p">).</span><span class="nx">format</span><span class="p">(</span><span class="nx">format</span><span class="p">)</span>
<span class="c1">// &quot;August 6th, 2012 at 3:00pm&quot;</span>
</code></pre></div>
<h2>Resources</h2>

<ul>
  <li><a href="http://momentjs.com">Moment.js - A lightweight JavaScript date library.</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>View Controller Patterns With Spine.JS &amp;amp; SpacePen</title>
   <link href="http://metaskills.net/2012/05/22/view-controller-patterns-with-spine-js-and-spacepen"/>
   <updated>2012-05-22T00:00:00-04:00</updated>
   <id>http://metaskills.net/2012/05/22/view-controller-patterns-with-spine-js-and-spacepen</id>
   <content type="html">
     <![CDATA[<h2>The VC in 'MVC'</h2>

<p>
  As Addy Osmani points out in his <a href="http://speakerdeck.com/u/addyosmani/p/scaling-your-javascript-applications">Scaling Your JavaScript Applications</a> presentation, all JavaScript 'MVC' frameworks interpret MVC differently. These differences are an academic rabbit hole and if you are really interested about them, I recommend reading some of the resource links at the bottom of this post. One in particular by Jonas Nicklas really outlined how I think client side JavaScript applications should be developed. It is titled <a href="http://elabs.se/blog/33-why-serenade-js">Why Serenade.js</a> and in it, Jonas describes his reasons for yet another JavaScript MVC framework. In doing so, he outlines the responsibilities of the MVC triad as follows:
</p>

<p>
  <strong>Views:</strong> Present data from the model and update it if it changes, notify controllers of user interaction events. <strong>Controllers:</strong> React to user interaction events by instructing the model to perform certain actions. <strong>Models:</strong> Handle business logic and persistence, notify the view of any changes to the data.
</p>

<p>
  <!--<span class="floatr" style="margin:0 0 15px 15px; -moz-box-shadow: 5px 5px 5px rgba(0,0,0,0.5); -webkit-box-shadow: 5px 5px 5px rgba(0,0,0,0.5); box-shadow: 5px 5px 5px rgba(0,0,0,0.5); -moz-transform: rotate(-2deg); -webkit-transform: rotate(-2deg); transform: rotate(-2deg);">
    <img src="/assets/todomvc.png" alt="TodoMVC JavaScript Frameworks" width="354" height="263" />
  </span>-->
  Seems straight forward right? In actuality it is easy to stray from and there is a lot of wiggle room for both the MV* framework authors and their developers to re-interpret one or all of these components. The two that I think are most open for debate are the View and the Controller stacks. For example, how many <a href="http://addyosmani.github.com/todomvc/">JavaScript frameworks</a> do you know allow you to choose your own view framework? How many times have you heard too that views should be "logic-less" and how does each of these play into helping newcomers understand the proper way to code these precious views and controllers together? My answer, ask Apple!
</p>

<h2>Apple's View Controller Programming Guide</h2>

<p>
  Some might be surprised that JavaScript applications for the browser can and should be coded much like modern desktop applications. Having developed iOS applications before, many of the same MVC principals and application structure apply. Apple has tons of documentation about general application design and one of my favorites is their <a href="http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/Introduction/Introduction.html">View Controller Programming Guide</a>. I highly recommend anyone developing MVC JavaScript applications to read this guide. I'll paraphrase a few points:
</p>

<blockquote style="margin-left: 95px; margin-right: 95px;">
  A view controller manages a discrete portion of your app’s user interface. Often that view is the root view for a more complex hierarchy of other views. View controllers typically fall in one of two categories, either content or container. Content view controllers are great for things like lists and images. Container view controllers coordinate with other view controllers like tab view controllers or navigation controllers.
</blockquote>

<p>
  It is also worth reading both the <a href="https://developer.apple.com/library/ios/#documentation/uikit/reference/UIViewController_Class/Reference/Reference.html">UIViewController</a> and <a href="https://developer.apple.com/library/ios/#documentation/uikit/reference/uiview_class/UIView/UIView.html">UIView</a> class references too. So what should be your major take away from reading those? The first is that every controller in your JavaScript application manages a view. That view is going to be a DOM node that will most likely have a complex hierarchy of other views possibly managed by other controllers which themselves champion a node with a specific application concern. Second is that views are themselves valid objects built by classes with their own methods. It's best to think of UIViews as an instance of a jQuery object. Views should not be dumb either. They sometimes have handles back to model objects so they can establish bindings for updates. Views can also expose an interface that canonize how controllers should work with them and most often will have helper methods that break up their complexity. All of this is a good thing. If you disagree, stop reading now!
</p>

<h2>SpacePen - Markup On The Final Frontier</h2>

<p>
  I found the <a href="https://github.com/nathansobo/space-pen">SpacePen project on github</a> a few months ago and I have never looked at another templating solution since. For the first time my JavaScript application's view and controller stacks feel natural. No longer do I find myself writing any view related code in my controllers. SpacePen allows me to write view objects that encapsulate their concerns, stay DRY and build Spine.JS web applications that hit the MVC mark. So what is SpacePen? Basically a CoffeeScript subclass of a jQuery object.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">SpacePort</span> <span class="n">extends</span> <span class="no">View</span>

  <span class="vi">@content</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="vi">@div</span> <span class="o">=&gt;</span>
      <span class="vi">@h1</span> <span class="s2">&quot;Space Ships&quot;</span>
      <span class="vi">@ol</span> <span class="o">=&gt;</span>
        <span class="vi">@li</span> <span class="s2">&quot;Apollo&quot;</span>
        <span class="vi">@li</span> <span class="s2">&quot;Soyuz&quot;</span>
        <span class="vi">@li</span> <span class="s2">&quot;Space Shuttle&quot;</span>
</code></pre></div><div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">view</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">SpacePort</span>
<span class="n">view</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s1">&#39;ol&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;Star Destroyer&lt;/li&gt;&#39;</span><span class="p">)</span>

<span class="n">view</span><span class="o">.</span><span class="n">click</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
  <span class="n">alert</span> <span class="s2">&quot;You clicked on </span><span class="si">#{</span><span class="err">$</span><span class="p">(</span><span class="n">this</span><span class="p">)</span><span class="o">.</span><span class="n">text</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span>
</code></pre></div>
<p>
  This simple example shows how your SpacePen view class defines its markup in a <code>@content</code> class function. This function yields a builder syntax where you can easily add attributes and values. My advice is to do basic structure only in your <code>@content</code> function and rarely take advantage of the fact that it also takes the same parameters argument passed to your constructor. I will explain more on that advice later. But first, I did say that views should expose interfaces to controllers and are first class code citizens that champion their own concerns right? Let's look at a common pattern, views building new nodes within itself.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">SpacePort</span> <span class="n">extends</span> <span class="no">View</span>

  <span class="vi">@content</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="vi">@div</span> <span class="o">=&gt;</span>
      <span class="vi">@h1</span> <span class="s2">&quot;SpacePort&quot;</span>
      <span class="vi">@ol</span> <span class="ss">outlet</span><span class="p">:</span> <span class="s1">&#39;shipList&#39;</span>

  <span class="ss">addShip</span><span class="p">:</span> <span class="p">(</span><span class="n">ship</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@shipList</span><span class="o">.</span><span class="n">append</span> <span class="s2">&quot;&lt;li&gt;</span><span class="si">#{</span><span class="n">ship</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&lt;/li&gt;&quot;</span>
</code></pre></div><div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">view</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">SpacePort</span>
<span class="n">view</span><span class="o">.</span><span class="n">addShip</span> <span class="s2">&quot;Enterprise&quot;</span>
</code></pre></div>
<p>
  The example has been changed slightly so that the view now exposes a public function called <code>addShip()</code> which takes an object to add to the view. It can easily implement this because I have declared the ordered list to be an outlet called <code>shipList</code> which will automatically be assigned as a property on each view instance. Calling append on that node is possible because like the view object itself, any outlet is a jQuery object as well.
</p>

<p>
  Though contrived, this example illustrates a powerful technique. If the view was refactored to some other structure besides an ordered list with items, the controller interface would stay the same. Pulling the thread, it is easy to see how a complex view hierarchy could have views building and managing messages to their subviews too. This is the crux of my article, but first, lets talk about controllers.
</p>

<h2>Spine.JS Controllers</h2>

<p>
  Spine.JS is my goto JavaScript MVC framework and if you are unfamiliar with it, check out their <a href="http://spinejs.com/docs/introduction">introduction</a> or read <a href="http://destroytoday.com/blog/reasons-for-spinejs/">why others</a> have chosen to use it. The main reasons I love Spine.JS can be summed up like so. First, it is authored in CoffeeScript, which means I can read the code to learn it. Second, all model instances will reflect changes by any other instance. Lastly, the controllers are minimally implemented and nicely abstract managing a view and the way controllers respond to events that bubble up to it.
</p>

<p>
  A Spine.JS controller always has an element associated to it which can be accessed via the <code>el</code> property. This element represents the view that controller manages. It will either be created for you or it can be assigned via the constructor. Many patterns in Spine.JS rely on appending elements to a controller and most of the functions for adding these subviews either take an element or an object that has an <code>el</code> property. This means building complex view/controller hierarchies by stacking Spine.JS controllers is both idiomatic and almost identical to how iOS view controllers work.
</p>

<h2>Using SpacePen Views With Spine.JS Controllers</h2>

<p>
  With the overview of these components out of the way, let's jump right into how they can work together to punch the VC up a notch in your next JavaScript MVC application. These examples below are pared down version of a scheduler application I just completed. The model is similar to an iCal day interface for calendar events. In such, there would be a view controller that manages the presentation of your schedule "by day". This controller's view would have a header for the current day and a set of controls for going to the previous day, today and the next day. This controller would act as a navigation controller and correlate to Apple's notion of a "container" view controller. When needed, it would find or create a day controller and append it to one of its subviews. The code for that container controller and view is out of the scope of this article, but its one of many day "content" controllers and view are perfect examples. Here we go!
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In app/assets/javascripts/app/controller/day.js.coffee</span>

<span class="k">class</span> <span class="nc">App</span><span class="o">.</span><span class="n">Controllers</span><span class="o">.</span><span class="n">Day</span> <span class="n">extends</span> <span class="no">Spine</span><span class="o">.</span><span class="n">Controller</span>

  <span class="ss">constructor</span><span class="p">:</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@view</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">App</span><span class="o">.</span><span class="n">Views</span><span class="o">.</span><span class="n">Day</span>
    <span class="k">super</span> <span class="ss">el</span><span class="p">:</span> <span class="vi">@view</span>
</code></pre></div><div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In app/assets/javascripts/app/views/day.js.coffee</span>

<span class="k">class</span> <span class="nc">App</span><span class="o">.</span><span class="n">Views</span><span class="o">.</span><span class="n">Day</span> <span class="n">extends</span> <span class="no">View</span>

  <span class="vi">@content</span><span class="p">:</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@div</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;day&#39;</span><span class="p">,</span> <span class="o">=&gt;</span>
      <span class="c1"># ...</span>

  <span class="kp">initialize</span><span class="p">:</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@attr</span> <span class="s1">&#39;data-date&#39;</span><span class="p">,</span> <span class="n">params</span><span class="o">.</span><span class="n">moment</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span>
</code></pre></div>
<p>
  So rule number one, always create an instance of a SpacePen view and assign that to the <code>@view</code> property of every Spine.JS controller. That <code>@view</code> will be assigned to the controller's <code>@el</code> property when it supers up. 
</p>

<p>
  Rule number two, keep the <code>@content</code> function for your views concerned with building the structure only. In my example, I set the date for the event using the <code>initialize</code> hook provided by SpacePen. This rule is important when you want to bind views to model events and update that view accordingly. All customization of the view to a model object should be done in a set/update helper of that view.
</p>

<h2>In Greater Detail</h2>

<p>
  Here is the same controller and view example with a bit more detail. First up, the view. This day view CoffeeScript file has a public <code>App.Views.Day</code> view and a private <code>EventView</code> that represents a subview and would be bound to a model instance. This public day view exposes a few public functions for a controller to hook into. The <code>addEvent</code> function will actually build a new SpacePen views for the passed model and append it as a subview. Notice too the <code>findEvent</code> helper function which can find the DOM element for a model object and then use the <code>view()</code> function provided by SpacePen to get to the SpacePen instance for this node.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">App</span><span class="o">.</span><span class="n">Views</span><span class="o">.</span><span class="n">Day</span> <span class="n">extends</span> <span class="no">View</span>

  <span class="vi">@content</span><span class="p">:</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@div</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;day&#39;</span><span class="p">,</span> <span class="o">=&gt;</span>
      <span class="c1"># ...</span>
      <span class="vi">@div</span> <span class="ss">outlet</span><span class="p">:</span> <span class="s1">&#39;events&#39;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;events&#39;</span>
      <span class="c1"># ...</span>

  <span class="kp">initialize</span><span class="p">:</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@date</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">moment</span><span class="o">.</span><span class="n">clone</span><span class="p">()</span>
    <span class="vi">@attr</span> <span class="s1">&#39;data-date&#39;</span><span class="p">,</span> <span class="vi">@date</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s1">&#39;YYYY-MM-DD&#39;</span><span class="p">)</span>

  <span class="ss">addEvent</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">view</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">EventView</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
    <span class="vi">@events</span><span class="o">.</span><span class="n">append</span>

  <span class="ss">updateEvent</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@findEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)?</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

  <span class="ss">removeEvent</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@findEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)?</span><span class="o">.</span><span class="n">remove</span><span class="p">()</span>

  <span class="c1"># Private</span>

  <span class="ss">findEvent</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="n">selector</span> <span class="o">=</span> <span class="s2">&quot;.event[data-event-id=&#39;</span><span class="si">#{</span><span class="n">event</span><span class="o">.</span><span class="n">startsAtFormat</span><span class="p">()</span><span class="si">}</span><span class="s2">&#39;]&quot;</span>
    <span class="vi">@events</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>

  <span class="ss">afterAttach</span><span class="p">:</span> <span class="o">-&gt;</span> 
    <span class="vi">@startSpinner</span><span class="p">()</span>
    <span class="vi">@loadEvents</span><span class="p">()</span>

  <span class="c1"># ...</span>

<span class="k">class</span> <span class="nc">EventView</span> <span class="n">extends</span> <span class="no">View</span>

  <span class="vi">@content</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@div</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;.event&#39;</span><span class="p">,</span> <span class="s1">&#39;data-event-id&#39;</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">id</span> <span class="o">=&gt;</span>
      <span class="vi">@div</span> <span class="ss">outlet</span><span class="p">:</span> <span class="s1">&#39;description&#39;</span>
      <span class="vi">@div</span> <span class="ss">outlet</span><span class="p">:</span> <span class="s1">&#39;duration&#39;</span>

  <span class="kp">initialize</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@update</span> <span class="n">event</span>

  <span class="ss">update</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@attr</span> <span class="s1">&#39;data-starts-at&#39;</span><span class="p">,</span> <span class="n">event</span><span class="o">.</span><span class="n">startsAtFormat</span><span class="p">()</span>
    <span class="vi">@description</span><span class="o">.</span><span class="n">text</span> <span class="n">event</span><span class="o">.</span><span class="n">description</span>
    <span class="vi">@duration</span><span class="o">.</span><span class="n">text</span> <span class="n">event</span><span class="o">.</span><span class="n">duration</span>
</code></pre></div>
<p>
  Next up, the expanded day controller example that manages the view above. In this example we bind to two of the the Spine.JS <code>CalendarEvent</code> model events. One for update and one for destroy. These events are then pushed down to the view and will do any work necessary. Just in case this controller is ever discarded for performance reasons, we hook into the <code>release()</code> function provided by Spine.JS controllers to remove the event listeners.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">App</span><span class="o">.</span><span class="n">Controllers</span><span class="o">.</span><span class="n">Day</span> <span class="n">extends</span> <span class="no">Spine</span><span class="o">.</span><span class="n">Controller</span>

  <span class="vi">@events</span><span class="p">:</span> 
    <span class="s1">&#39;click .event&#39;</span><span class="p">:</span> <span class="s1">&#39;selectEvent&#39;</span>

  <span class="ss">constructor</span><span class="p">:</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@date</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">moment</span>
    <span class="vi">@view</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">App</span><span class="o">.</span><span class="n">Views</span><span class="o">.</span><span class="n">Day</span> <span class="ss">moment</span><span class="p">:</span> <span class="vi">@date</span>
    <span class="k">super</span> <span class="ss">el</span><span class="p">:</span> <span class="vi">@view</span>
    <span class="no">CalendarEvent</span><span class="o">.</span><span class="n">bind</span> <span class="s1">&#39;update&#39;</span><span class="p">,</span> <span class="vi">@updateEvent</span>
    <span class="no">CalendarEvent</span><span class="o">.</span><span class="n">bind</span> <span class="s1">&#39;beforeDestroy&#39;</span><span class="p">,</span> <span class="vi">@destroyEvent</span>

  <span class="ss">release</span><span class="p">:</span>
    <span class="no">CalendarEvent</span><span class="o">.</span><span class="n">unbind</span> <span class="s1">&#39;update&#39;</span><span class="p">,</span> <span class="vi">@updateEvent</span>
    <span class="no">CalendarEvent</span><span class="o">.</span><span class="n">unbind</span> <span class="s1">&#39;beforeDestroy&#39;</span><span class="p">,</span> <span class="vi">@removeEvent</span>
    <span class="k">super</span>

  <span class="c1"># Private</span>

  <span class="ss">selectEvent</span><span class="p">:</span> <span class="o">-&gt;</span>
    <span class="c1"># ...</span>

  <span class="ss">updateEvent</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@view</span><span class="o">.</span><span class="n">updateEvent</span> <span class="n">event</span>
    <span class="c1"># ...</span>

  <span class="ss">removeEvent</span><span class="p">:</span> <span class="p">(</span><span class="n">event</span><span class="p">)</span> <span class="o">-&gt;</span>
    <span class="vi">@view</span><span class="o">.</span><span class="n">removeEvent</span> <span class="n">event</span>
    <span class="c1"># ...</span>
</code></pre></div>
<p>
  Hope you found this mini introduction to SpacePen and Spine.JS controllers useful. There is literally tons of ways you can use these tools together to make your controllers and views fun to build and maintainable. Be excellent and let me know what works for you!
</p>

<h2>Resources</h2>

<ul>
  <li><a href="http://elabs.se/blog/33-why-serenade-js">Why Serenade.js</a></li>
  <li><a href="http://addyosmani.com/blog/understanding-mvvm-a-guide-for-javascript-developers/">Understanding MVVM - A Guide For JavaScript Developers</a></li>
  <li><a href="http://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/">Understanding MVC And MVP (For JavaScript And Backbone Developers)</a></li>
  <li><a href="http://developer.apple.com/library/ios/#featuredarticles/ViewControllerPGforiPhoneOS/Introduction/Introduction.html">View Controller Programming Guide for iOS</a></li>
  <li><a href="https://github.com/nathansobo/space-pen">SpacePen - Markup On The Final Frontier</a></li>
  <li><a href="http://spinejs.com/docs/introduction">An Introduction To Spine.JS</a></li>
  <li><a href="http://destroytoday.com/blog/reasons-for-spinejs/">10 Reasons Why I Switched To Spine.JS</a></li>
  <li><a href="/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">Rails &amp; Spine.JS - Using The CoffeeScript Source</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>StoreConfigurable - A Lesson In Recursion In Ruby</title>
   <link href="http://metaskills.net/2012/03/12/store-configurable-a-lesson-in-recursion-in-ruby"/>
   <updated>2012-03-12T00:00:00-04:00</updated>
   <id>http://metaskills.net/2012/03/12/store-configurable-a-lesson-in-recursion-in-ruby</id>
   <content type="html">
     <![CDATA[<p>
  When ActiveRecord 3.2 was released there was a small addition called <a href="http://api.rubyonrails.org/classes/ActiveRecord/Store.html">ActiveRecord::Store</a> which bills itself as a simple key/value store for your models. The code below is pulled right from their example usage.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">store</span> <span class="ss">:settings</span><span class="p">,</span> <span class="ss">accessors</span><span class="p">:</span> <span class="o">[</span><span class="ss">:color</span><span class="p">,</span> <span class="ss">:homepage</span><span class="o">]</span>
<span class="k">end</span>

<span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">color</span><span class="p">:</span> <span class="s1">&#39;black&#39;</span><span class="p">,</span> <span class="ss">homepage</span><span class="p">:</span> <span class="s1">&#39;37signals.com&#39;</span><span class="p">)</span>
<span class="vi">@user</span><span class="o">.</span><span class="n">color</span>            <span class="c1"># =&gt; &#39;black&#39;</span>
<span class="vi">@user</span><span class="o">.</span><span class="n">settings</span><span class="o">[</span><span class="ss">:color</span><span class="o">]</span> <span class="c1"># =&gt; &#39;black&#39;</span>
<span class="vi">@user</span><span class="o">.</span><span class="n">settings</span><span class="o">[</span><span class="ss">:remember_me</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</code></pre></div>
<p>
  Most people know that I love simple tools. But when I found myself considering <code>ActiveRecord::Store</code>, I found it seriously lacking for my particular use case. What I wanted was a config for a user class that could do the following:
</p>

<ul>
  <li>Interchange property dot notation with indifferent string/symbol lookup.</li>
  <li>Automatically grow as needed. For namespaces and nested organization.</li>
  <li>Report state changes to the model from any node.</li>
</ul>

<h2>StoreConfigurable</h2>

<p>
  <span class="photofancy floatr ml20 mb10">
    <img src="http://cdn.actionmoniker.com/share/recursive_kitty_small.jpg" width="220" height="136">
  </span>
  The lack of these features is why I set out to build a little gem I call <a href="https://github.com/metaskills/store_configurable">StoreConfigurable</a>. A zero-configuration recursive Hash for storing a tree of options in a serialized ActiveRecord column which includes self-aware hooks that delegate dirty/changed state to your configs owner. Perfect right? Here is a simple example of its usage below. If you want to learn more, checkout the <a href="https://github.com/metaskills/store_configurable">project on github</a> with the full README. 
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">store_configurable</span>
<span class="k">end</span>

<span class="vi">@user</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">remember_me</span> <span class="o">=</span> <span class="kp">true</span>
<span class="vi">@user</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">sortable_tables</span><span class="o">.</span><span class="n">column</span>    <span class="o">=</span> <span class="s1">&#39;created_at&#39;</span>
<span class="vi">@user</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">sortable_tables</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="s1">&#39;asc&#39;</span>
<span class="vi">@user</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">you</span><span class="o">.</span><span class="n">should</span><span class="o">.</span><span class="n">never</span><span class="o">.</span><span class="n">need</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">do</span><span class="o">.</span><span class="n">this</span><span class="o">.</span><span class="n">but</span><span class="o">.</span><span class="n">you</span><span class="o">.</span><span class="n">could</span><span class="o">.</span><span class="n">if</span><span class="o">.</span><span class="n">you</span><span class="o">.</span><span class="n">wanted</span><span class="o">.</span><span class="n">to</span> <span class="o">=</span> <span class="s1">&#39;deep_value&#39;</span>
<span class="vi">@user</span><span class="o">.</span><span class="n">config_changed?</span> <span class="c1"># =&gt; true</span>
</code></pre></div>
<p>
  Rather than talking about how StoreConfigurable might be a good fit for you, I would instead like to discuss how my first practical usage of recursion in Ruby is implemented in StoreConfigurable. That along with how to leverage default Hash values is the topic for this post.
</p>

<h2>Default Hash Values</h2>

<p>
  So first up, a little known feature of Ruby's <a href="http://www.ruby-doc.org/core-1.9.3/Hash.html">Hash</a> class is the ability for a default value to be returned when a key is missing. If you stop and think about this, the default is <code>nil</code>, which is a valid object in Ruby. But you can tell Hash objects to return other values when a key is missing. The first way to do this is to pass the default value as an argument to <code>Hash.new()</code>. The second is to pass a block to the new method which would return the default value. That block is passed in the current hash object and the key that is missing so you can do some fancy things if needed. Here are some quick examples of both techniques. 
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># Default value passed to new.</span>

<span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; {}</span>
<span class="nb">hash</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>                  <span class="c1"># =&gt; &quot;default&quot;</span>

<span class="c1"># Default value from new&#39;s block.</span>

<span class="nb">hash</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span> <span class="s2">&quot;Missing </span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2"> for hash with id </span><span class="si">#{</span><span class="nb">hash</span><span class="o">.</span><span class="n">object_id</span><span class="si">}</span><span class="s2">.&quot;</span> <span class="p">}</span>
<span class="nb">hash</span>                        <span class="c1"># =&gt; {}</span>
<span class="nb">hash</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>                  <span class="c1"># =&gt; &quot;Missing foo for hash with id 283829283.&quot;</span>
</code></pre></div>
<h2>Recursion</h2>

<p>
  Recurion in Ruby can take many forms. My solution for StoreConfigurable was to always make the hash returned by the proxy object self replicate itself for key misses. Here is a fundamental example to make your own Hash object return new instances of itself when keys are missing.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">RecursiveHash</span> <span class="o">&lt;</span> <span class="no">Hash</span>
  <span class="no">Recursive</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span> <span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="k">super</span><span class="p">(</span><span class="o">&amp;</span><span class="no">Recursive</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">hash</span> <span class="o">=</span> <span class="no">RecursiveHash</span><span class="o">.</span><span class="n">new</span>  <span class="c1"># =&gt; {}</span>
<span class="nb">hash</span><span class="o">.</span><span class="n">class</span>                <span class="c1"># =&gt; RecursiveHash</span>
<span class="nb">hash</span><span class="o">[</span><span class="ss">:foo</span><span class="o">]</span>                <span class="c1"># =&gt; {}</span>
<span class="nb">hash</span><span class="o">[</span><span class="ss">:foo</span><span class="o">].</span><span class="n">class</span>          <span class="c1"># =&gt; RecursiveHash</span>
<span class="nb">hash</span><span class="o">[</span><span class="ss">:a</span><span class="o">][</span><span class="ss">:b</span><span class="o">][</span><span class="ss">:c</span><span class="o">]</span>          <span class="c1"># =&gt; {}</span>
<span class="nb">hash</span>                      <span class="c1"># =&gt; {:foo=&gt;{}, :a=&gt;{:b=&gt;{:c=&gt;{}}}}</span>
</code></pre></div>
<p>
  In this example, I create a <a href="http://www.ruby-doc.org/core-1.9.3/Proc.html">Proc</a> object via the lambda keyword and I use this as the block argument when you create an instance of <code>RecursiveHash</code> via the super method. Here I am using the <code>&amp;</code> syntax to pass an existing Proc as a block. Hope I have not lost you so far :)
</p>

<p>
  So default hashes in Ruby and simple recursion techniques are what make up some of the key points of StoreConfigurable. I also use recursion when loading the hash values from the YAML stored in the database. Here is what that technique looks like.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">loader</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
  <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
    <span class="n">value</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">loader</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">hash</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">else</span>
    <span class="n">options</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">key</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">,</span> <span class="n">value</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">data</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">loader</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">config</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div>
<p>
  Hopefully this dive into Ruby or maybe StoreConfigurable is helpful!
</p>

<h2>Resources</h2>

<ul>
  <li><a href="https://github.com/metaskills/store_configurable">StoreConfigurable</a> - A zero-configuration recursive Hash for storing a tree of options in a serialized ActiveRecord column with self-aware hooks that delegate dirty/changed state to your configs owner.</li>
  <li><a href="http://api.rubyonrails.org/classes/ActiveRecord/Store.html">ActiveRecord::Store</a> - Simple key/value store for your models.</li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Too LESS? Should You Be Using Sass?</title>
   <link href="http://metaskills.net/2012/02/27/too-less-should-you-be-using-sass"/>
   <updated>2012-02-27T00:00:00-05:00</updated>
   <id>http://metaskills.net/2012/02/27/too-less-should-you-be-using-sass</id>
   <content type="html">
     <![CDATA[<p><aside class="flash_warn">
  Previously I had updated this article to say that this <a href="http://github.com/cloudhead/less.js/commit/93b23d2c24936d5bd829ba1f725ef442e9475747">commit</a> looked like it gives you real variable properties in LESS. I was wrong! So even in LESS v1.3 you are still screwed for doing metaprogramming and working with a real CSS preprocessor. That may change for LESS v1.4 and if you want to help make that happen. I suggst you put your weight behind <a href="https://github.com/cloudhead/less.js/pull/698">this github pull request</a>.
</aside></p>

<p>
  First, a little bit of background. A while back ago I took a great deal of my personal time to try out Twitter's Bootstrap project for a Rails application of mine. This meant that I was willing to throw away some of the work I had done in Sass and rewrite it using LESS. No problem I thought, at first glance LESS and Sass look almost identical in functionality. So after some weeks of improving the toolchain for LESS with Ruby and then Rails, I set out to do just that &ndash; and what a miserable failure it was. My goal is to share my experiences to anyone considering using LESS and why it might be wrong for your Rails project.
</p>

<h2>Why Should My Opinion Matter?</h2>

<p>
  For staters, I am the author of <a href="http://github.com/metaskills/less-rails">less-rails</a>, the gem that allows you to effectively use LESS in the Rails asset pipeline. This gem made other gems of mine like <a href="http://github.com/metaskills/less-rails-bootstrap">less-rails-bootstrap</a> possible. So now full LESS frameworks such as Twitter's Bootstrap could be leverage natively within the Rails ecosystem. Both of these gems greatly reduced the barrier to using LESS for the average Rails developer and I wrote them for one simple reason. I wanted to make sure LESS was as close to par with Sass in the Rails asset pipeline as possible. So before I rewrote one single line of Sass to LESS, it was going to have a fair shake. This was no small feat! Especially considering that LESS is the only JavaScript based CSS language to be extended with Rails' asset helpers like <code>asset-data-url()</code>. Meaning you can hook into assets from any other place in the pipeline directly from LESS, just as you would with Sass.
</p>

<p>
  Other qualifications? Well I fancy myself a CSS nut and put my skills slightly above average. Most know me as an ActiveRecord or database nerd. But I am just as comfortable doing client side JavaScript and design implementation, especially using HTML5 and CSS3. Very few people know of my <a href="/2011/09/11/revisiting-my-design-past/">design background</a> nor that I have been writing proper presentation layer CSS for over 9 years. Here in the past few years, I have learned to leverage both Sass and the Compass framework like a pro, <a href="/2010/12/27/let-it-go-moving-from-mephisto-to-jekyll/">even for this blog</a>. Here lately, in the project I intended to move to LESS, my Sass usage has become quite impressive. I have extended Sass' color objects to allow <a href="http://gist.github.com/1932866">HSV from RGB</a> conversions for presentation code parity with similar iOS CoreGraphics drawing code in my native iPhone applications. I have even learned to <a href="http://gist.github.com/1932882">write Sass mixins</a> using custom functions and tricks I picked up while reading the Compass source. All this placed the bar pretty high for me on how LESS could take the place of Sass in my little experiment.
</p>

<h2>What Went Wrong?</h2>

<p>
  So my bar was pretty high. I set out to not only rewrite my current Sass to LESS, but I fully expected to duplicate much of the things I learned to love about the Compass framework in LESS as well. And like a good open-source citizen, I even prepared a new project that I dubed <a href="http://github.com/metaskills/protractor">protractor</a> on github to share all my work. So what went wrong? Plenty! Every day, mixin by mixin, line by line, I felt MORE pain. LESS was fighting me and it was winning. 
</p>

<p>
  <span class="photofancy floatr ml20"><img src="/assets/less_variable_property.png" alt="Does LESS have property interpolation?" width="400" height="199" /></span>
  Some of the bugs I encountered were fixed, like parsing errors for CSS3 keyframes. Others had horrible workarounds that used more code while at the same time lowering legibility. Finally, I came across the one issue on the hundreds of those that exists on LESS' github page that stopped me cold. It was titled <a href="http://github.com/cloudhead/less.js/issues/36">variable property</a> and after learning about it, I decided to stop using LESS for my Rails projects. What are variable properties anyway. Let me show you a common pattern both I and Compass use in a basic contrived example. You may also want to read my comments in that github issue link too. Imagine I have some global colors that I want to mixin to other classes based on a dynamic property. So given this SCSS below:
</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="err">$</span><span class="nt">myWhite</span><span class="o">:</span> <span class="nt">rgb</span><span class="o">(</span><span class="nt">240</span><span class="o">,</span><span class="nt">240</span><span class="o">,</span><span class="nt">240</span><span class="o">);</span>
<span class="err">$</span><span class="nt">myGray</span><span class="o">:</span>  <span class="nt">rgb</span><span class="o">(</span><span class="nt">140</span><span class="o">,</span><span class="nt">140</span><span class="o">,</span><span class="nt">140</span><span class="o">);</span>
<span class="err">$</span><span class="nt">myBlack</span><span class="o">:</span> <span class="nt">rgb</span><span class="o">(</span><span class="nt">30</span><span class="o">,</span><span class="nt">30</span><span class="o">,</span><span class="nt">30</span><span class="o">);</span>

<span class="k">@mixin</span> <span class="nt">myColorClasses</span><span class="o">(</span><span class="err">$</span><span class="nt">property</span><span class="o">)</span> <span class="p">{</span>
  <span class="o">&amp;</span><span class="nc">.white</span>   <span class="p">{</span> <span class="err">#{$</span><span class="n">property</span><span class="p">}</span><span class="o">:</span> <span class="err">$</span><span class="nt">myWhite</span><span class="o">;</span> <span class="p">}</span>
  <span class="o">&amp;</span><span class="nc">.gray</span>    <span class="p">{</span> <span class="err">#{$</span><span class="n">property</span><span class="p">}</span><span class="o">:</span> <span class="err">$</span><span class="nt">myGray</span><span class="o">;</span> <span class="err">}</span>
  <span class="o">&amp;</span><span class="nc">.black</span>   <span class="p">{</span> <span class="err">#{$</span><span class="n">property</span><span class="p">}</span><span class="o">:</span> <span class="err">$</span><span class="nt">myBlack</span><span class="o">;</span> <span class="err">}</span>
<span class="err">}</span>

<span class="nc">.box</span> <span class="p">{</span>
  <span class="o">@</span><span class="n">include</span> <span class="n">myColorClasses</span><span class="p">(</span><span class="k">background-color</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>
  It would output something like the following. Notice how I use the variable string <code>background-color</code> and generate dynamic properties?
</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="nc">.box.white</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#f0f0f0</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.box.gray</span>  <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#8c8c8c</span><span class="p">;</span> <span class="p">}</span>
<span class="nc">.box.black</span> <span class="p">{</span> <span class="k">background-color</span><span class="o">:</span> <span class="m">#1e1e1e</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div>
<p>
  Astute observers may point out that you can achieve the same with sub classes and be more efficient in the generated CSS too. You would be correct. I did say this was a contrived example. The point is that LESS is not a CSS preprocessor and without the ability to dynamically define property values you will be limited in the ways your LESS based CSS framework can compete with frameworks like Compass. Simply put, LESS will never stack up to Sass.
</p>

<h2>In All Fairness</h2>

<p>
  I have mad respect for Alexis Sellier (<a href="https://twitter.com/#!/cloudhead">@cloudhead</a>). By far his skills and open source contributions well outrank my own. As software developers we need to recognize that there are no absolutes and as such, there is no one tool that is right. You have to weight a ton of other factors and choose the tools that are right for you. I firmly believe that as Ruby and or Rails developers that you should choose to learn Sass and Compass vs. LESS and I am basing my opinion heavily on three criteria.
</p>

<p>
  First is that from a Ruby perspective, Sass will always be more easy to extend and hook into. Second, that LESS lacks a critical feature that I require to author CSS. Lastly, that LESS is not a CSS preprocessors by design and I believe they are the way forward to a <a href="https://twitter.com/#!/chriseppstein/status/171697822012416000">better future via the CSSWG</a>. This is what Sass does very very well. I want to treat CSS as a language and use features like loops, lists and custom functions.
</p>

<p>
   Your mileage may vary and please make your own decisions. I would be more than happy to followup with any questions on this topic too, so please ask away in the comments below. Lastly, here are a few other articles that talk about LESS and Sass.
</p>

<ul>
  <li><a href="http://nittygrittyjs.com/blog/why-less-is-a-pain-in-the-sass/">Why LESS Is a Pain in the Sass</a></li>
  <li><a href="http://coding.smashingmagazine.com/2011/09/09/an-introduction-to-less-and-comparison-to-sass/">An Introduction To LESS, And Comparison To Sass</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Pretty Console Logging With Guard::Jasmine &amp;amp; Black Coffee</title>
   <link href="http://metaskills.net/2012/02/01/pretty-console-logging-with-guardjasmine-black-coffee"/>
   <updated>2012-02-01T00:00:00-05:00</updated>
   <id>http://metaskills.net/2012/02/01/pretty-console-logging-with-guardjasmine-black-coffee</id>
   <content type="html">
     <![CDATA[<p>
  OK I know I promised that we would start the dive into <a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">testing your Spine.JS application using Jasmine(rice) in my last article</a>, but this is a good diversion. If you are new to my latest series on Spine.JS and Jasmine, scroll on down to the bottom to the related section and read back. However, for those that might be more familiar with Jasmine and specifically <a href="https://github.com/netzpirat/guard-jasmine">Guard::Jasmine</a> and ever felt the pain that debugging from that terminal window was lacking, read on! Even if your new to Guard::Jasmine and <a href="http://github.com/bradphelan/jasminerice">Jasminerice</a> I still suggest you setup these elegant hacks to make your testing go that much smoother.
</p>

<h2>So What Is The Problem?</h2>

<p>
  Guard::Jasmine allows you to continuously test your JavaScript right from the terminal window just like your Ruby code. The only drawback is that the console debugging is less than helpful. Guard::Jasmine will not allow you do view a string version of every object nor see line numbers of calling files. Both of these are invaluable when your stuck in a testing hole and just need to inspect a few objects. So if you are tired of seeing <code>[object Object]</code> in your Guard::Jasmine output, let's fix it right away.
</p>

<p>
  The first place we need to patch things up is Guard::Jasmine itself. In my <a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">last article</a> I covered how to monkey patch Jasminerice in a <code>config/initializers/jasminerice.rb</code> file. My Guard::Jasmine freedom patch will be placed in that same file. Pasted below, this does two things vs the <a href="http://github.com/netzpirat/guard-jasmine/blob/master/lib/guard/jasmine/runner.rb">original</a>. First it changes the <code>report_specdoc_logs</code> method to not pass <code>true</code> to the <code>format_log_message</code> method. Second, the <code>format_log_message</code> method itself now has the message regular expression changed to a multi-line scan. It will also look out for a custom prefix tag and allow it to pass through. This is for our pretty objects. Anything else now outputs the message with the file and line number, something previously stripped by Guard::Jasmine.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># coding: utf-8</span>
<span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Jasminerice</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">Jasminerice</span><span class="o">.</span><span class="n">environments</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="p">)</span>

  <span class="c1"># Other Jasminerice patches from:</span>
  <span class="c1"># http://metaskills.net/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/</span>
  <span class="c1"># ...</span>

  <span class="c1"># Patch Guard::Jasmine to use a custom formatter for log messages that</span>
  <span class="c1"># allows multi-line objects to be printed with the line numbers.</span>
  <span class="k">module</span> <span class="nn">Guard</span>
    <span class="k">class</span> <span class="nc">Jasmine</span>
      <span class="k">module</span> <span class="nn">Runner</span>
        <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>

          <span class="k">def</span> <span class="nf">report_specdoc_logs</span><span class="p">(</span><span class="n">spec</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">level</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">spec</span><span class="o">[</span><span class="s1">&#39;logs&#39;</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:console</span><span class="o">]</span> <span class="o">==</span> <span class="ss">:always</span> <span class="o">||</span> <span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:console</span><span class="o">]</span> <span class="o">==</span> <span class="ss">:failure</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">spec</span><span class="o">[</span><span class="s1">&#39;passed&#39;</span><span class="o">]</span><span class="p">))</span>
              <span class="n">spec</span><span class="o">[</span><span class="s1">&#39;logs&#39;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">log</span><span class="o">|</span>
                <span class="no">Formatter</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="n">indent</span><span class="p">(</span><span class="s2">&quot;    • </span><span class="si">#{</span> <span class="n">format_log_message</span><span class="p">(</span><span class="n">log</span><span class="p">)</span> <span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">level</span><span class="p">))</span>
              <span class="k">end</span>
            <span class="k">end</span>
          <span class="k">end</span>

          <span class="k">def</span> <span class="nf">format_log_message</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">message</span> <span class="o">=~</span> <span class="sr">/(.*?) in http.+?assets\/(.*)\?body=\d+\s\((line\s\d+)/m</span>
              <span class="n">pp_prefix</span> <span class="o">=</span> <span class="s1">&#39;[myLog]&#39;</span>
              <span class="n">msg</span><span class="p">,</span> <span class="n">file</span><span class="p">,</span> <span class="n">line</span> <span class="o">=</span> <span class="vg">$1</span><span class="p">,</span> <span class="vg">$2</span><span class="p">,</span> <span class="vg">$3</span>
              <span class="k">if</span> <span class="n">msg</span><span class="o">.</span><span class="n">starts_with?</span> <span class="n">pp_prefix</span>
                <span class="n">msg</span><span class="o">.</span><span class="n">sub</span> <span class="n">pp_prefix</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
              <span class="k">else</span>
                <span class="s2">&quot;</span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="s2"> in </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2"> on </span><span class="si">#{</span><span class="n">line</span><span class="si">}</span><span class="s2">&quot;</span>
              <span class="k">end</span>
            <span class="k">else</span>
              <span class="n">message</span>
            <span class="k">end</span>
          <span class="k">end</span>

        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<h2>A JavaScript Pretty Print Library</h2>

<p>
  So now that we have Guard::Jasmine not stripping multi-line console messages to one line and printing file and line numbers, we are ready to hook into it. But first we need a JavaScript library that pretty prints objects for us and wrap this all up behind our own interface to <code>console.log</code>. During my research I found a library called jsDump and decided to <a href="https://github.com/NV/jsDump">use a fork of the project on github</a>. So go download that file and place it in <code>vendor/assets/javascripts/jsDump.js</code> of your Rails project. Next you will want to add it to your <code>spec/javascripts/spec.js</code> manifest like so. My below example is pulled right from my previous article and I have placed jsDump right after my jasmine files.
</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript"><span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">jasminerice</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">mock</span><span class="o">-</span><span class="nx">ajax</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">jsDump</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">application</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">jasmine</span><span class="o">-</span><span class="nx">myapp</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">models</span><span class="o">/</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">controllers</span><span class="o">/</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">views</span><span class="o">/</span>
</code></pre></div>
<h2>Logging Helpers - Using BlackCoffee</h2>

<p>
  In my last article I mentioned how I would talk more about the <code>jasmine-myapp</code> file in the manifest above. Now is the time. I recommend that this file is place to write all your top level helpers and functions for Jasmine or any other testing libraries in your JavaScript stack. Think of this file as your Ruby <code>test_helper.rb</code> or your own extensions to <code>ActiveSupport::TestCase</code>. My advice is that these functions all be written to pollute the time level namespace as other Jasmine helpers do, like the <code>beforeEach</code> and <code>clearAjaxRequests</code>. This makes things easier but be conscious of that decision and write functions keeping that in mind.
</p>

<p>
  The only thing working against is is Sprockets/Tilt rendering CoffeeScript files in their own closure. Which is something you should really not fight! But in this case I think it is fine to have this particular file avoid that. Which allows us to (a) write our helper code in CoffeeScript and (b) use these functions as helpers in the global space like other Jasmine helpers. So enter my <a href="http://github.com/metaskills/sprockets-blackcoffee">Sprockets BlackCoffee</a> gem. This is a simple gem that exposes a CoffeeScript template that uses the <code>--bare</code> option to keep your file from being wrapped in a closure. All you have to do is give the file a <code>.js.black_coffee</code> extension and it will just work. So let's assume you have a <code>spec/javascripts/jasmine-myapp.js.black_coffee</code> created and the gem installed like so.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">group</span> <span class="ss">:assets</span> <span class="k">do</span>
  <span class="c1"># ...</span>
  <span class="n">gem</span> <span class="s1">&#39;sprockets-blackcoffee&#39;</span>
<span class="k">end</span>
</code></pre></div>
<p>
  Finally, here are examples of my logging helpers in the <code>jasmine-myapp</code> file. The <code>myLogParser</code> uses jsDump to get back a pretty formatted string of any object if that object is not already a string. The primary logging helper <code>myLog</code> will prefix your message with <code>[myLog]</code> so the Guard::Jasmine recognizes the message and outputs only the object. The last helper <code>myLogLine</code> will do just like the other, but will allow the file and line number tobe printed too.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">myLog</span> <span class="o">=</span> <span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="s2">&quot;[myLog]</span><span class="si">#{</span><span class="n">myLogParser</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>

<span class="n">myLogLine</span> <span class="o">=</span> <span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="n">hmLogParser</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>

<span class="n">myLogParser</span> <span class="o">=</span> <span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="o">-&gt;</span>
  <span class="k">if</span> <span class="n">typeof</span> <span class="n">obj</span> <span class="n">is</span> <span class="s1">&#39;string&#39;</span> <span class="k">then</span> <span class="n">obj</span> <span class="k">else</span> <span class="n">jsDump</span><span class="o">.</span><span class="n">parse</span> <span class="n">obj</span>
</code></pre></div>
<h2>In Practice</h2>

<p>
  Here is an example of a Jasmine spec where I was using console.log before the patches above and what it would output to the terminal.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1">#= include spec_helper</span>

<span class="n">describe</span> <span class="s1">&#39;User&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>

  <span class="n">it</span> <span class="s1">&#39;has been configured with proper attributes&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
    <span class="vi">@user</span> <span class="o">=</span> <span class="kp">new</span> <span class="no">User</span> <span class="nb">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;bob@test.com&#39;</span>
    <span class="n">console</span><span class="o">.</span><span class="n">log</span> <span class="vi">@user</span><span class="o">.</span><span class="n">attributes</span><span class="p">()</span>
    <span class="n">expect</span><span class="p">(</span><span class="vi">@user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span><span class="o">.</span><span class="n">toEqual</span> <span class="s1">&#39;bob@test.com&#39;</span>
</code></pre></div>
<pre class="code">
User
  ✘ has been configured with proper attributes
    ➤ Expected 'foo@bar.com' to equal 'bob@test.com'.
    • [object Object]
ERROR: 1 specs, 1 failures
in 0.653 seconds  
</pre>

<p>
  There is the totally helpful <code>[object Object]</code>. But if we now change our code to leverage out patches and change console.log to <code>hmLog @user.attributes()</code> to use our helper. We will get this. If you need a pretty object with line numbers. Just use <code>hmLogLine</code>.
</p>

<pre class="code">
User
  ✘ has been configured with proper attributes
    ➤ Expected 'foo@bar.com' to equal 'bob@test.com'.
    • {
       "email": "foo@bar.com",
       "id": 2
    }
ERROR: 1 specs, 1 failures
in 0.653 seconds
</pre>

<p>
  I hope this is helpful to anyone using Guard::Jasmine with a desire to see better output. If you continue to follow my series, my next post will be a deeper dive into Jasmine testing of Spine.JS applications.
</p>

<h2>Related</h2>

<ul>
  <li><a href="/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">Rails &amp; Spine.JS - Using The CoffeeScript Source</a></li>
  <li><a href="/2012/01/16/rails-and-spine-js-jasmine-testing-part-1/">Rails &amp; Spine.JS - Jasmine Testing Part 1</a></li>
  <li><a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">Rails &amp; Spine.JS - Jasmine Testing Part 2</a></li>
  <li><a href="/2012/02/01/pretty-console-logging-with-guardjasmine-black-coffee/">Pretty Console Logging With Guard::Jasmine &amp; BlackCoffee</a></li>  
</ul>

<h2>Resources</h2>

<ul>
  <li><a href="http://github.com/metaskills/sprockets-blackcoffee">Sprockets BlackCoffee Gem</a></li>
  <li><a href="http://github.com/netzpirat/guard-jasmine">Guard::Jasmine - Automatically tests your Jasmine specs on Rails.</a></li>
  <li><a href="http://github.com/bradphelan/jasminerice">Jasminerice - Pain free CoffeeScript testing under Rails 3.1.</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Rails &amp;amp; Spine.JS - Jasmine Testing Part 2</title>
   <link href="http://metaskills.net/2012/01/17/rails-and-spine-js-jasmine-testing-part-2"/>
   <updated>2012-01-17T00:00:00-05:00</updated>
   <id>http://metaskills.net/2012/01/17/rails-and-spine-js-jasmine-testing-part-2</id>
   <content type="html">
     <![CDATA[<p>
  So this is the third part to my mini series on Rails and <a href="http://spinejs.com/">Spine.JS</a>. Part one <a href="/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">covers an initial setup</a> and how to include Spine.JS into your Rails project while part two is actually the <a href="/2012/01/16/rails-and-spine-js-jasmine-testing-part-1/">first of a tome on how to test</a> your Spine.JS application. Assuming you have covered the bases there, lets get right down to business and review some of the elegant hacks &trade; yours truly came up with while testing my own Spine.jS application using <a href="http://github.com/guard/guard">Guard</a> and <a href="http://github.com/bradphelan/jasminerice">Jasminerice</a>. 
</p>

<h2>That Engine Is Gonna Need An Overhaul</h2>

<p>
  So did I mention that Jasminerice is a Rails engine and that you can run your tests by accessing the <code>/jasmine</code> URL in your development environment's browser? Good. As uncool as browser testing is, sometimes that it useful. For instance <code>console.log</code> statements will not show up in your Guard's test output. But hopefully that is an edge case and you are really using <a href="http://github.com/netzpirat/guard-jasmine">guard-jasmine</a> and watching your specs run in the terminal window. The question now becomes how can I leverage Jasminerice and its associated engine to really test my Spine.JS application with a full-fledged DOM? The answer is simple, let's hack the Jasminerice engine to load up our application while running the Jasmine specs.
</p>

<h2>A Review Of Jasmine And HTML Fixtures</h2>

<p>
  This might be a bit contraversial (or maybe just wrong) but I would like to examine why we might hack the Jasminerice engine for a few minutes. Jasmine bills itself as behavior-driven development for JavaScript, to which I disagree. I think Jasmine first and foremost is an all-purpose testing framework. Depending on how you use it determines what it becomes. In my case, I have been doing a lot of unit testing of my Spine.JS models and supporting libs as I learn the framework and build my system. So my usage now could be called TDD at both a unit and functional level. Later on, I plan on doing higher level integration testing with Jasmine, at this time it will be my BDD tool. Normally I do not get caught up in symantics but I think it is important to understand a few lexical terms before I start showing off how I use Jasmine to test my Spine.JS application. 
</p>

<p>
  Now that I have set my higher order bit for Jasmine as my unit, functional and itegration testing framework for Spine.JS &ndash; I would like to show how my solution below might differ from other practices. Experienced Jasmine users rave about extensions that allow you to load HTML fixtures to functionally test units of code. In fact, the Jasminerice gem includes a custom version of the <a href="https://github.com/velesin/jasmine-jquery">jasmine-jquery</a> library which among other things allows you to do just that. Let me be clear on this, there is nothing wrong with that! As with all things software, proper solutions depends on what you are doing and need. In my case, I believe that testing your Spine.JS application with Rails only needs to hook into your existing application without the need for fixtures and excessive mocking and stubbing.
</p>

<p>
  My basis for this argument is founded on a few principas that I believe all rich client side JavaScript applications should follow. Most important, the application is a single page load and all other calls to the server happen from that one page via AJAX. Every other part of your Rails application then becomes an API client to the JavaScript application. All views are client side only, most likely in a <code>JST</code> namespace.
</p>

<h2>Hacking Jasminerice</h2>

<p>
  Turns out this is really easy since Jasminerice is just a simple Rails engine with few moving parts. It has a <code>SpecController</code> that renders a basic layout which requires your application's JavaScript assets along with Jasmine. The goal is to tell it to render your single application page that loads up your Spine.JS app with a few additional hacks. When done, we are going to have Jasminerice in your full control. This means we get the same CSS and JavaScript as our real application along with a solid foundation to extend Jasminerice at our whim. This leaves us with a clean canvas suitable for Jasmine unit, functional and integraiton testing all wrapped up into one.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1"># In: config/initializers/jasminerice.rb</span>

<span class="k">module</span> <span class="nn">Jasminerice</span>

  <span class="k">module</span> <span class="nn">MyApplication</span>
    <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
    <span class="n">included</span> <span class="k">do</span>
      <span class="n">delegate</span> <span class="ss">:foo_path</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">routes_url_helpers</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">jasminerice?</span>
      <span class="kp">true</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">current_user</span>
      <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="no">ApplicationHelper</span><span class="o">.</span><span class="n">send</span> <span class="ss">:include</span><span class="p">,</span> <span class="no">MyApplication</span>

  <span class="k">class</span> <span class="nc">SpecController</span> <span class="o">&lt;</span> <span class="no">Jasminerice</span><span class="o">::</span><span class="no">ApplicationController</span>
    <span class="k">def</span> <span class="nf">index</span>
      <span class="n">render</span> <span class="ss">template</span><span class="p">:</span> <span class="s1">&#39;users/home&#39;</span><span class="p">,</span> <span class="ss">layout</span><span class="p">:</span> <span class="s1">&#39;application&#39;</span>
    <span class="k">end</span>
  <span class="k">end</span>

<span class="k">end</span> <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Jasminerice</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="no">Jasminerice</span><span class="o">.</span><span class="n">environments</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="p">)</span>
</code></pre></div>
<p>
  There we go, a simple example pulled from my current project. What we are doing here is freedom-patching that spec controller's index action to render both a template and layout from your application. I also have a <code>MyApplication</code> module which I include in the <code>Jasminerice::ApplicationHelper</code> for a few methods that my application view code would expect. In this case a <code>current_user</code> method and some delegation of URL helpers to the root Rails application. Do not get hung up on what user is returned there too. It is mostly moot as all AJAX calls will be stubbed. Lastly, I made a <code>jasminerice?</code> view helper and a matching one that I have in my own <code>ApplicationHelper</code> which returns false. I will show why and how this all fits together later on.
</p>

<p>
  Now that we have full control and some reflection for Jasminerice, let's reviw our appliation's main layout. Here is an example of my <code>app/views/layouts/application.html.haml</code> file.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="o">!!!</span> <span class="mi">5</span>
<span class="o">%</span><span class="n">html</span><span class="p">{</span><span class="ss">:lang</span> <span class="o">=&gt;</span> <span class="s1">&#39;en&#39;</span><span class="p">}</span>
  <span class="o">%</span><span class="n">head</span>
    <span class="o">%</span><span class="n">meta</span><span class="p">{</span><span class="ss">:charset</span> <span class="o">=&gt;</span> <span class="s1">&#39;utf-8&#39;</span><span class="p">}</span>
    <span class="o">=</span> <span class="n">csrf_meta_tags</span>
    <span class="o">%</span><span class="n">title</span> <span class="no">My</span> <span class="no">Application</span>
    <span class="o">-</span> <span class="k">if</span> <span class="n">jasminerice?</span>
      <span class="o">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;spec&#39;</span>
      <span class="o">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;spec&#39;</span>
    <span class="o">-</span> <span class="k">else</span>
      <span class="o">=</span> <span class="n">stylesheet_link_tag</span> <span class="s1">&#39;application&#39;</span>
      <span class="o">=</span> <span class="n">javascript_include_tag</span> <span class="s1">&#39;application&#39;</span>
      <span class="o">%</span><span class="n">script</span> <span class="n">jQuery</span><span class="p">(</span><span class="n">function</span><span class="p">(){</span> <span class="no">MyApp</span><span class="o">.</span><span class="n">App</span><span class="o">.</span><span class="n">Home</span><span class="o">.</span><span class="n">init</span><span class="p">();</span> <span class="p">});</span>
  <span class="o">%</span><span class="n">body</span>
    <span class="o">%</span><span class="n">section</span><span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">}}</span>
</code></pre></div>
<p>
  It is really that simple! It has a single condition that says if Jasminerice is loading this page, use the top level <code>spec</code> CSS and JavaScript asset manifest. If not, render my main application's CSS and JavaScript manifests. You will also notice that I decouple my Spine's application initialization from the main JS files and only initialize the app on page load when not running in Jasminerce. This allows us to stub AJAX calls in specs then initialization the Spine.JS app when we are fully ready. So now, let us take a look at what both the <code>spec/javascripts/spec.css</code> and <code>spec/javascripts/spec.js</code> manifests may look like.
</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="c">/*</span>
<span class="c"> *= require jasmine</span>
<span class="c"> *= require application</span>
<span class="c"> */</span>
<span class="nc">.jasmine_reporter</span> <span class="p">{</span> <span class="k">display</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div><div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript"><span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">jasminerice</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">mock</span><span class="o">-</span><span class="nx">ajax</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">application</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require</span> <span class="nx">jasmine</span><span class="o">-</span><span class="nx">myapp</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">models</span><span class="o">/</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">controllers</span><span class="o">/</span>
<span class="err">#</span><span class="o">=</span> <span class="nx">require_tree</span> <span class="p">.</span><span class="o">/</span><span class="nx">views</span><span class="o">/</span>
</code></pre></div>
<p>
  These should be self explanatory. The <code>spec.css</code> manifest requires the jasmine styles, then our application's styles. It then hides the Jasmine reporter element. The <code>spec.js</code> manifest does something similiar, It first requires the jasminerice manifest, a Jasmine helper called <a href="https://github.com/pivotal/jasmine-ajax">jasmine-ajax</a> but poorly named mock-ajax, then your application's JavaScript followed by a personal Jasmine helper that we will discuss later. The last lines include all the spec files in each of the lib, models, controller and views directories located in the parent <code>spec/javascripts</code> directory.
</p>

<p>
  Congratulations! You are now in full control of both Spine.JS and Jasmine(rice) and how your specs are executed. You have a fully styled DOM that you can happily ignore as you test your unit code. And when the time comes, you can leverage that and you full Spine.JS application from a high level integration perspective. Tune in for my last part which will give some working examples of how to test your Spine.JS application with Jasmine.
</p>

<h2>Related</h2>

<ul>
  <li><a href="/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">Rails &amp; Spine.JS - Using The CoffeeScript Source</a></li>
  <li><a href="/2012/01/16/rails-and-spine-js-jasmine-testing-part-1/">Rails &amp; Spine.JS - Jasmine Testing Part 1</a></li>
  <li><a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">Rails &amp; Spine.JS - Jasmine Testing Part 2</a></li>
  <li><a href="/2012/02/01/pretty-console-logging-with-guardjasmine-black-coffee/">Pretty Console Logging With Guard::Jasmine &amp; BlackCoffee</a></li>  
</ul>

<h2>Resources</h2>

<ul>
  <li><a href="http://spinejs.com/">Spine.JS - Build Awesome JavaScript MVC Applications</a></li>
  <li><a href="http://github.com/bradphelan/jasminerice">Jasminerice - Pain free CoffeeScript testing under Rails 3.1</a></li>
  <li><a href="http://github.com/pivotal/jasmine-ajax">Jasmine AJAX - A library for faking Ajax responses in your Jasmine suite.</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Rails &amp;amp; Spine.JS - Jasmine Testing Part 1</title>
   <link href="http://metaskills.net/2012/01/16/rails-and-spine-js-jasmine-testing-part-1"/>
   <updated>2012-01-16T00:00:00-05:00</updated>
   <id>http://metaskills.net/2012/01/16/rails-and-spine-js-jasmine-testing-part-1</id>
   <content type="html">
     <![CDATA[<p>
  In my <a href="/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">previous article</a> I talked a little bit about why I decided to use Spine.JS and how to include the CoffeeScript source into your Rails project using git submodules. Now I would like to talk about testing your brand new Spine.JS application. Afterward, be sure to <a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">read the second part</a> to this article which covers more advanced aspects of your Spine.JS application specs.
</p>

<h2>Testing JavaScript</h2>

<p>
  OK, so like any good programmer, you want to test your JavaScript web application, but how? Like most, I kept finding that <a href="http://pivotal.github.com/jasmine/">Jasmine</a> was the de facto testing framework that most Rails developers were using. For the newly aquatinted, Jasmine describes itself as behavior-driven and sports a clean spec style using <code>describe</code> and <code>it</code> blocks similar to RSpec or MiniTest::Spec. But maybe you, like me, quickly dismissed Jasmine since you sure as hell were not going to hit refresh or F5 in your browser every time you wanted to run your damn specs. After all, this is 2012 and Rails developers do not test with a browser! So why should I start now?
</p>

<p>
  Luckily I am a big fan of Ruby's <a href="https://github.com/guard/guard">Guard</a> gem, a simple library that responds to file system events. The guard project literally has TONS of other guard gems that automate everything from running test files to restarting your development server. Thankfully my search for JavaScript testing with Guard in mind brought me right back to Jasmine. Enter the <a href="https://github.com/netzpirat/guard-jasmine">guard-jasmine</a> gem and the wonderful world of a headless JavaScript testing piped right down to your terminal window!
</p>

<h2>Guard, Jasmine &amp; Jasminerice</h2>

<p>
  So this is our holy trinity and to be honest, there are a lot of moving parts under the stack. Things will seem to get complicated quick, but don't worry. I will give you a brief overview of the moving parts and then get right down to the basics of how you can start using Guard and Jasmine to test your Sine.JS application. 
</p>

<p>
  First, let's cover Guard. It is a simple gem that uses a <code>Guardfile</code> at the root of your project to control how other guards are triggered. I'll give you an example Guardfile later. But for starters, <a href="https://github.com/guard/guard">read the documentation</a> on what special libraries may be needed for file system events or notifications on your specific platform. In my case, I us Mac OS X and purchased the latest Growl 1.3. So my example <code>Gemfile</code> below will have the <a href="https://rubygems.org/gems/ruby_gntp">ruby_gntp</a> gem included in the spec.
</p>

<p>
  Next up is the guard-jasmine gem. My instructions assume you are running a Rails 3.1 or 3.2 app and that you are taking full advantage of the asset pipeline and CoffeeScript. Many of these details can be found on the <a href="https://github.com/netzpirat/guard-jasmine">guard-jamine's Rails 3.1 setup</a> section of their readme page. The underlying components of guard-jasmine are two a libs named <a href="https://github.com/bradphelan/jasminerice">Jasminerice</a> and <a href="http://www.phantomjs.org/">PhantomJS</a>. Jasminerice is a simple Rails engine that brings in the Jasmine source files to the asset pipeline while running a rack app mounted to <code>/jasmine</code> to run your specs from your current application. PhantomJS is yet another headless WebKit based on Qt that has a rich JavaScript API which guard-jasmine delegates to. Is your head spinning? Mine was too.
</p>

<h2>Put It All Together</h2>

<p>
  Here is the bullet train to getting this stack up and running. First, you will need to get PhantomJS installed. If Homebrew is your thing, just do <code>$ brew install phantomjs</code>. Or you can <a href="http://code.google.com/p/phantomjs/downloads/list">download one of their precompiled binaries</a> for your specific platform. This is what I opted to do and I just placed the phantomjs in my <code>PATH</code> somewhere.
</p>

<p>
  Next, we need to get the gems in our <code>Gemfile</code>. Here is how mine are setup. I have them in both the <code>:develpment</code> and <code>:test</code> groups since Jasminerice runs in both of those Rails environments. I also have that ruby_gntp dependency since I am using Growl on Mac OS X, YMMV.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
  <span class="n">gem</span> <span class="s1">&#39;jasminerice&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;guard-jasmine&#39;</span>
  <span class="n">gem</span> <span class="s1">&#39;ruby_gntp&#39;</span>
<span class="k">end</span>
</code></pre></div>
<p>
  So that was easy, now on to our <code>Guardfile</code>. Here is mine below. Notice how I put my JavaScript related guards into a <code>js</code> group? This is a seldom used feature of Guard and it means I can monitor only my jasmine specs by starting guard off using <code>$ guard -g js</code> and my other guards in my <code>ruby</code> group, like minitest, will be ignored.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">group</span> <span class="s1">&#39;js&#39;</span> <span class="k">do</span>

  <span class="n">guard</span> <span class="s1">&#39;jasmine&#39;</span> <span class="k">do</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app/assets/javascripts/myapp/index\.js\.coffee$}</span><span class="p">)</span>  <span class="p">{</span> <span class="s2">&quot;spec/javascripts&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{app/assets/javascripts/myapp/(.+)\.js\.coffee$}</span><span class="p">)</span>   <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/javascripts/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.js.coffee&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{spec/javascripts/(.+)_spec\.js\.coffee$}</span><span class="p">)</span>          <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/javascripts/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.js.coffee&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{spec/javascripts/spec\.js$}</span><span class="p">)</span>                       <span class="p">{</span> <span class="s2">&quot;spec/javascripts&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{spec/javascripts/spec_helper\.js$}</span><span class="p">)</span>                <span class="p">{</span> <span class="s2">&quot;spec/javascripts&quot;</span> <span class="p">}</span>
    <span class="n">watch</span><span class="p">(</span><span class="sr">%r{spec/javascripts/jasmine-myapp.*}</span><span class="p">)</span>                 <span class="p">{</span> <span class="s2">&quot;spec/javascripts&quot;</span> <span class="p">}</span>
  <span class="k">end</span>

<span class="k">end</span>
</code></pre></div>
<p>
  This setup assumes a few things. First that you are only testing your Spine.JS application and that those files are in the <code>app/assets/javascripts/myapp</code> directory. That myapp directory could just be <code>app</code> in your case if you used the <a href="http://github.com/maccman/spine-rails">spine-rails</a> gem without the <code>--app</code> option. In my case, that folder is named <code>homemarks</code>. This Guardfile also assumes that your JavaScript app and specs are CoffeeScript files and that specs are in the <code>spec/javascripts</code> folder specified by Jasminerice. You are going to want to follow some file naming convention now too. For example if you have a Spine.JS app file in <code>app/assets/javascripts/myapp/models/post.js.coffee</code>, then you are going to want the matching spec in <code>spec/javascripts/models/post_spec.js.coffee</code>. So saving each of those files will trigger that specific spec to run. There are also so some watchers on important root files like your spec.js sprockets manifest and your Spine.JS app index. Changing any of those files will result in your entire spec suite running again. 
</p>

<h2>To Be Continued...</h2>

<p>
  I will go into more details on the <code>spec_helper.js</code> and <code>jasmine-myapp</code> files above in <a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">the second part</a> of this article. For now you should be set to start writing specs like the one below and seeing them run by either visiting the <code>/jasmine</code> URL of your running Rails application or by using Guard in your terminal window.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">describe</span> <span class="s1">&#39;App&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>

  <span class="n">it</span> <span class="s1">&#39;sets el&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
    <span class="n">expect</span><span class="p">(</span><span class="no">MyApp</span><span class="o">.</span><span class="n">Application</span><span class="o">.</span><span class="n">el</span><span class="p">)</span><span class="o">.</span><span class="n">toEqual</span> <span class="err">$</span><span class="p">(</span><span class="s1">&#39;#app&#39;</span><span class="p">)</span>

  <span class="n">it</span> <span class="s1">&#39;sets the userId as a property on itself&#39;</span><span class="p">,</span> <span class="o">-&gt;</span>
    <span class="n">expect</span><span class="p">(</span><span class="no">MyApp</span><span class="o">.</span><span class="n">Application</span><span class="o">.</span><span class="n">userId</span><span class="p">)</span><span class="o">.</span><span class="n">toEqual</span> <span class="vi">@bob</span><span class="o">.</span><span class="n">id</span>
</code></pre></div>
<p>
  <a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">Continue to part two...</a>
</p>

<h2>Related</h2>

<ul>
  <li><a href="/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">Rails &amp; Spine.JS - Using The CoffeeScript Source</a></li>
  <li><a href="/2012/01/16/rails-and-spine-js-jasmine-testing-part-1/">Rails &amp; Spine.JS - Jasmine Testing Part 1</a></li>
  <li><a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">Rails &amp; Spine.JS - Jasmine Testing Part 2</a></li>
  <li><a href="/2012/02/01/pretty-console-logging-with-guardjasmine-black-coffee/">Pretty Console Logging With Guard::Jasmine &amp; BlackCoffee</a></li>  
</ul>

<h2>Resources</h2>

<ul>
  <li><a href="http://spinejs.com/">Spine.JS - Build Awesome JavaScript
  MVC Applications</a></li>
  <li><a href="http://pivotal.github.com/jasmine/">Jasmine - BDD for JavaScript. (I disagree, TDD too!)</a></li>
  <li><a href="http://github.com/netzpirat/guard-jasmine">Guard Jasmine - Automated Jasmine tests to your console.</a></li>
  <li><a href="http://github.com/bradphelan/jasminerice">Jasminerice - Pain free CoffeeScript testing under Rails 3.1</a></li>
  <li><a href="http://www.phantomjs.org/">PhantomJS - Headless WebKit with JavaScript API.</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>Rails &amp;amp; Spine.JS - Using The CoffeeScript Source</title>
   <link href="http://metaskills.net/2012/01/15/rails-and-spine-js-using-the-coffeescript-source"/>
   <updated>2012-01-15T00:00:00-05:00</updated>
   <id>http://metaskills.net/2012/01/15/rails-and-spine-js-using-the-coffeescript-source</id>
   <content type="html">
     <![CDATA[<p>
  Our <a href="http://addyosmani.com/blog/short-musings-on-javascript-mv-tech-stacks/">options for JavaScript MVC frameworks</a> are numerous these days. While working on the third major rewrite of my personal bookmarking application, <a href="http://homemarks.com/">HomeMarks</a>, I decided to learn <a href="http://documentcloud.github.com/backbone/">Backbone.js</a>. Thankfully a local friend of mine <a href="https://twitter.com/#!/brennandunn/status/153487553062907905">recommended</a> that I try <a href="http://spinejs.com/">Spine.JS</a>. I was immediately hooked! 
</p>

<h2>Why Spine.JS?</h2>

<p>
  Spine.JS is is authored in <a href="http://coffeescript.org/">CoffeeScript</a> and that is a big deal for me. I will never write raw JavaScript again, which I consider, the deprecated syntax. So a JavaScript MVC framework that is written in CoffeeScript means I can read the source, learn from it and even debug it if necessary. Sure, I can read raw JavaScript or just rely on documentation. But nothing beats reading source code. A practice I think good developers follow. So here is an example of the <a href="https://github.com/documentcloud/backbone/blob/master/backbone.js#L151">Backbone.js model source</a> compared to reading <a href="https://github.com/maccman/spine/blob/master/src/spine.coffee#L83">Spine.JS model source</a> and I think you will see the difference.
</p>

<p>
  Source code legibilty is not the only reason to use Spine.JS. It is also very lightweight and requires no other JavaScript dependencies. Take for example Backbone.js which requies the use of <a href="http://documentcloud.github.com/underscore/">Underscore.js</a> and think for a moment why. Underscore.js makes mundane tasks in JavaScript like itterators and event binding much more friendly. But this is all moot when you are using CoffeeScipt's loops and comprehensions. And take my advice, CoffeeScript has so much more to offer. One of my personal favorites is the existential operator!
</p>

<h2>Coffee Time!</h2>

<p>
  So, are you with me and want to try out Spine? Great! But do not rush in and use the <a href="http://github.com/maccman/spine-rails">spine-rails</a> gem. Sure it gives you a nice way to require the Spine JavaScript files in the asset pipeline and some fancy generators. But when you break it down, there are better ways to get Spine's source files and who the hell uses generators? I mean, the only useful one is the initial <code>rails g spine:new</code> generator. Past the initial project setup, the spine-rails gem really does nothing but lock you down to an explicit version of Spine tied to that gem release. 
</p>

<p>
  I highly advise that new-comers to Spine start off with the spine-rails gem and its new project generator. Then quickly switch to just including the spine source using a git submodule. This will give you the benefit of using the source CoffeeScript files and tracking Spine's git repo which is getting good active development. So let's live on the edge and read some source. First uninstall the spine-rails gem if you have it and add the Spine project as a git submodule to your git repo.
</p>

<pre class="command">
$ mkdir -p vendor/assets/javascripts
$ git submodule add git://github.com/maccman/spine.git vendor/assets/javascripts/spine
</pre>

<p>
  This adds the Spine project to your <code>vendor/assets/javascripts/spine</code> directory. Which means it can now be leveraged by Rails asset pipeline using Sprockets. So if you had used the spine-rails generator above and had your spine requires in <code>app/assets/javascripts/app/index.js.coffee</code>, you would now be able to change what should have looked like this:
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1">#= require spine</span>
<span class="c1">#= require spine/manager</span>
<span class="c1">#= require spine/ajax</span>
<span class="c1">#= require spine/route</span>
</code></pre></div>
<p>
  To something like the following. Since the <code>spine/src</code> directory is where the source CoffeeScript files from our submodule above and Sprockets will render these just fine, it all just works!
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="c1">#= require spine/src/spine</span>
<span class="c1">#= require spine/src/manager</span>
<span class="c1">#= require spine/src/ajax</span>
<span class="c1">#= require spine/src/route</span>
</code></pre></div>
<p>
  So now you can easily update your Spine dependency using a simple git workflow with the added benefit that you can open up any of the source CoffeeScript files and learn Spine from the inside out. You can even change the source or put in console debugging to see what is happening and your application files will recompile via Sprockets on the next request.
</p>

<h2>Related</h2>

<ul>
  <li><a href="/2012/01/15/rails-and-spine-js-using-the-coffeescript-source/">Rails &amp; Spine.JS - Using The CoffeeScript Source</a></li>
  <li><a href="/2012/01/16/rails-and-spine-js-jasmine-testing-part-1/">Rails &amp; Spine.JS - Jasmine Testing Part 1</a></li>
  <li><a href="/2012/01/17/rails-and-spine-js-jasmine-testing-part-2/">Rails &amp; Spine.JS - Jasmine Testing Part 2</a></li>
  <li><a href="/2012/02/01/pretty-console-logging-with-guardjasmine-black-coffee/">Pretty Console Logging With Guard::Jasmine &amp; BlackCoffee</a></li>  
</ul>

<h2>Resources</h2>

<ul>
  <li><a href="http://spinejs.com/">Spine.JS - Build Awesome JavaScript
  MVC Applications</a></li>
  <li><a href="http://coffeescript.org/">CoffeeScript - A little language that compiles into JavaScript.</a></li>
  <li><a href="http://github.com/maccman/spine-rails">The Spine Rails Gem</a></li>
</ul>
]]>
    </content>
 </entry>
 
 <entry>
   <title>LESS Is More - Using Twitter&#39;s Bootstrap In The Rails 3.1 Asset Pipeline</title>
   <link href="http://metaskills.net/2011/09/26/less-is-more-using-twitter-bootstrap-in-the-rails-3-1-asset-pipeline"/>
   <updated>2011-09-26T00:00:00-04:00</updated>
   <id>http://metaskills.net/2011/09/26/less-is-more-using-twitter-bootstrap-in-the-rails-3-1-asset-pipeline</id>
   <content type="html">
     <![CDATA[<p>
  <span class="floatr ml20 mb20">
    <img src="/assets/less.png" alt="LESS - The Dynamic Stylesheet language" width="199" height="81" />
  </span>
  This weekend I decided to experiment with <a href="http://lesscss.org/">LESS CSS</a> by replacing the existing <a href="http://sass-lang.com/">Sass</a> and <a href="http://compass-style.org/">Compass</a> code that had been built thus far a small project. Why? Three basic reasons. First, I wanted to see how LESS stacked up. Second, I was intrigued by some of LESS' features, in particular <a href="http://lesscss.org/#-namespaces">their namespace support.</a> Lastly, I wanted to use <a href="http://twitter.github.com/bootstrap/">Twitter's Bootstrap</a> project as a baseline for my design. Since Rails 3.1 has been out for some time, I was expecting the move to LESS to go considerably smoother than my <a href="/2011/07/29/use-compass-sass-framework-files-with-the-rails-3.1.0.rc5-asset-pipeline/">pre-release attempts with Compass and Sass<a/>. I was wrong.
</p>

<p>
  So the tilt gem already supported LESS templates and that means that Sprockets and the asset pipeline rendering technically did too. But there was <a href="https://github.com/cowboyd/less.rb/issues/8">no official less-rails gem</a> that setup a standard configuration for other gems to hook into. This meant that libraries that distributed the Twitter Bootstrap assets were often hard to use or had inconsistent results. For example, it was not possible to load the Bootstrap's assets in such as way that let you build on top of the LESS mixins they had build. Nor were those assets namespaced in such a way that would allow you to have a <code>modal.less</code> asset as it would have conflicted with Bootstrap's version. So since I apparently have a bunch of free time and I hate building on top of a bad foundation, I set out to learn both <code>Rails::Railtie</code> and <code>Rails::Engine</code> to build the proper tools for LESS and Bootstrap in the Rails 3.1 asset pipeline.
</p>

<h2>New LESS Gems</h2>

<p>
  I introduce you to both the new <a href="http://github.com/metaskills/less-rails">less-rails</a> and <a href="http://github.com/metaskills/less-rails-bootstrap">less-rails-bootstrap</a> gems. Take a look at the source code if you ever wanted to learn how to implement a simple Rails::Railtie or Engine. But assuming you want to use Twitter's Bootstrap, here are a few examples to get you started. First just bundle up to less-rails-bootstrap, it will automatically pull in less-rails and less.rb via their dependencies. BTW, I am going to keep the semantic versioning of the less-rails-bootstrap gem in sync with the major and minor versions of the Bootstrap project.
</p>
<div class="highlight"><pre><code class="ruby language-ruby" data-lang="ruby"><span class="n">gem</span> <span class="s1">&#39;less-rails-bootstrap&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.3.0&#39;</span>
</code></pre></div>
<p>
  From here, the easiest way to use Bootstrap is to require it in your <code>application.css</code> file. Doing so will compile the complete LESS libraries files for Bootstrap. Note how we namespace the files using a simple directory structure.
</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="c">/*</span>
<span class="c"> *= require twitter/bootstrap</span>
<span class="c">*/</span>

<span class="nf">#foo</span> <span class="p">{</span>
  <span class="c">/* Your styles... */</span>
<span class="p">}</span>
</code></pre></div>
<p>
  Alternatively, in a file with the <code>.css.less</code> extension, you can import the entire Bootstrap LESS framework. This will allow you to use Bootstrap's variables and mixins in your CSS that follows. Remember, unlike other CSS frameworks, requiring or importing Bootstrap will include all the CSS for building a bootstrapped website. If you only want variables or mixins, you will have to import those discreet files, see next section.
</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="k">@import</span> <span class="s2">&quot;twitter/bootstrap&quot;</span><span class="p">;</span>

<span class="nf">#foo</span> <span class="p">{</span>
  <span class="o">.</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="p">(</span><span class="m">4px</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>
  Maybe all you want to use are the variables and mixins that come with Twitter Bootstrap. No problem, just import them individually from you own <code>.css.less</code> file. In this case only the <code>#foo</code> selector is output.
</p>
<div class="highlight"><pre><code class="css language-css" data-lang="css"><span class="k">@import</span> <span class="s2">&quot;twitter/bootstrap/variables&quot;</span><span class="p">;</span>
<span class="k">@import</span> <span class="s2">&quot;twitter/bootstrap/mixins&quot;</span><span class="p">;</span>

<span class="nc">.myButton</span><span class="o">(</span><span class="k">@radius</span><span class="o">:</span> <span class="nt">5px</span><span class="o">)</span> <span class="p">{</span>
  <span class="nc">.border-radius</span><span class="o">(</span><span class="k">@radius</span><span class="o">)</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#foo</span> <span class="p">{</span>
  <span class="o">.</span><span class="n">myButton</span><span class="p">(</span><span class="m">10px</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div>
<p>
  Using the <a href="http://twitter.github.com/bootstrap/#javascript">Bootstrap JavaScript</a> files is just as easy. Again, you can include all them with a single directive from your <code>application.js</code> file. Optionally, you can require only the files you need like <code>require twitter/bootstrap/modal</code>.
</p>
<div class="highlight"><pre><code class="javascript language-javascript" data-lang="javascript"><span class="c1">//= require twitter/bootstrap</span>

<span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="c1">//...</span>
<span class="p">});</span>
</code></pre></div>
<p>
  The less-rails project has already started getting some good feedback. Soon we hope to implement all the features that you may have used in the sass-rails project, <a href="https://github.com/metaskills/less-rails/issues/1">like asset pipeline helpers</a>. One last thing, I wanted to say thanks to <a href="https://github.com/nmerouze">Nicolas Mérouze</a> for opening up the old less-rails gem space on rubygems.org for the new gem!
</p>

<h2>Resources</h2>

<ul>
  <li><a href="http://lesscss.org/">LESS - The Dynamic Stylesheet Language</a></li>
  <li><a href="http://github.com/metaskills/less-rails">LESS-Rails - Official Support For LESS In Rails</a></li>
  <li><a href="http://github.com/metaskills/less-rails-bootstrap">LESS-Rails-Bootstrap - CSS toolkit from Twitter For Rails 3.1 Asset Pipeline</a></li>
  <li><a href="http://github.com/cowboyd/less.rb">LESS.rb - LESS CSS Rendering From Ruby</a></li>
  <li><a href="http://sass-lang.com/">Sass - Syntactically Awesome Stylesheets</a></li>
  <li><a href="http://github.com/rails/sass-rails">Sass-Rails - Official Support For Sass In Rails</a></li>
  <li><a href="http://compass-style.org/">Compass - An Open-Source CSS Authoring Framework</a></li>
  <li><a href="http://twitter.github.com/bootstrap/">Bootstrap - A Toolkit From Twitter Designed To Kickstart Development</a></li>
</ul>
]]>
    </content>
 </entry>
 
 
</feed>
